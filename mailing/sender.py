# mailing/sender.py
import asyncio
import json
import os
from datetime import datetime
from aiogram import Bot
from aiogram.types import BufferedInputFile
from .models import BonusMailing
from database import db


class MailingSender:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.bonus_mailing = BonusMailing(db)
    
    async def check_db_time(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ë–î"""
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute("SELECT datetime('now'), datetime('now', 'localtime')")
                result = cursor.fetchone()
                print(f"üïí –í—Ä–µ–º—è –≤ –ë–î: UTC={result[0]}, Local={result[1]}")
                print(f"üïí –í—Ä–µ–º—è Python: {datetime.now()}")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏ –ë–î: {e}")
    
    async def send_active_mailings(self):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º—è
            await self.check_db_time()
            
            mailings = self.bonus_mailing.get_all_mailings()
            current_time = datetime.now()
            
            print(f"üïí –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ {current_time}")
            
            sent_count = 0
            for mailing in mailings:
                if not mailing['is_active']:
                    continue
                
                start_date = datetime.fromisoformat(mailing['start_date'])
                end_date = datetime.fromisoformat(mailing['end_date'])
                
                print(f"üìß –†–∞—Å—Å—ã–ª–∫–∞ #{mailing['id']}: {start_date} - {end_date}")
                print(f"üïí –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è: {current_time}")
                print(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞: {start_date <= current_time <= end_date}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ –ø–µ—Ä–∏–æ–¥–µ —Ä–∞—Å—Å—ã–ª–∫–∏
                if start_date <= current_time <= end_date:
                    count = await self._send_mailing(mailing)
                    sent_count += count
                    print(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ #{mailing['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                else:
                    print(f"‚è∏Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ #{mailing['id']} –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞ –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç")
                    
            if sent_count > 0:
                print(f"üìß –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —Ä–∞—Å—Å—ã–ª–æ–∫")
            else:
                print("‚ÑπÔ∏è –ê–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
    
    async def _send_mailing(self, mailing: dict) -> int:
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö"""
        sent_count = 0
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ —Ç–∞—Ä–∏—Ñ–∞–º
            users = await self._get_users_by_tariffs(mailing)
            
            print(f"üë• –î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ #{mailing['id']} –Ω–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            
            if not users:
                print(f"‚ö†Ô∏è –î–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ #{mailing['id']} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
                return 0
            
            file_paths = json.loads(mailing['file_paths']) if mailing['file_paths'] else []
            
            for user_id in users:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    if self.bonus_mailing.is_mailing_sent_to_user(mailing['id'], user_id):
                        print(f"‚ö†Ô∏è –†–∞—Å—Å—ã–ª–∫–∞ #{mailing['id']} —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                        continue
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await self.bot.send_message(
                        chat_id=user_id,
                        text=mailing['message_text'],
                        parse_mode="HTML"
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —á–µ—Ä–µ–∑ BufferedInputFile
                    for file_path in file_paths:
                        try:
                            if os.path.exists(file_path):
                                # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –≤ –ø–∞–º—è—Ç—å –∏ —Å–æ–∑–¥–∞–µ–º BufferedInputFile
                                with open(file_path, 'rb') as file:
                                    file_data = file.read()
                                
                                input_file = BufferedInputFile(
                                    file_data,
                                    filename=os.path.basename(file_path)
                                )
                                
                                await self.bot.send_document(
                                    chat_id=user_id,
                                    document=input_file,
                                    caption="üéÅ –ë–æ–Ω—É—Å–Ω—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª"
                                )
                                print(f"‚úÖ –§–∞–π–ª {os.path.basename(file_path)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                            else:
                                print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                                
                        except Exception as e:
                            print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
                    
                    sent_count += 1
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É
                    self.bonus_mailing.log_mailing_sent(mailing['id'], user_id, 'sent')
                    print(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                    await asyncio.sleep(0.1)
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    self.bonus_mailing.log_mailing_sent(mailing['id'], user_id, 'error', str(e))
                    
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ä–∞—Å—Å—ã–ª–∫–∏ {mailing['id']}: {e}")
        
        return sent_count
    
    async def _get_users_by_tariffs(self, mailing: dict) -> list:
        """–ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø–æ –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∞—Ä–∏—Ñ–∞–º –∏–∑ —Ç–∞–±–ª–∏—Ü—ã payments"""
        tariffs = json.loads(mailing['tariffs'])
        users = []
        
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º Python datetime –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
                current_time = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
                start_date_str = mailing['start_date'].replace('T', ' ').split('.')[0]  # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞
                
                if tariffs:  # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
                    placeholders = ','.join(['?'] * len(tariffs))
                    query = f'''
                        SELECT DISTINCT user_id 
                        FROM payments 
                        WHERE tariff_name IN ({placeholders}) 
                        AND status = 'succeeded'
                        AND valid_until >= ?
                        AND updated_at >= ?
                    '''
                    cursor.execute(query, tariffs + [current_time, start_date_str])
                else:  # –ï—Å–ª–∏ –≤—Å–µ —Ç–∞—Ä–∏—Ñ—ã (–ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)
                    query = '''
                        SELECT DISTINCT user_id 
                        FROM payments 
                        WHERE status = 'succeeded'
                        AND valid_until >= ?
                        AND updated_at >= ?
                    '''
                    cursor.execute(query, [current_time, start_date_str])
                
                users = [row[0] for row in cursor.fetchall()]
                
                print(f"üîç –ó–∞–ø—Ä–æ—Å: {query}")
                print(f"üîç –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {tariffs + [current_time, start_date_str] if tariffs else [current_time, start_date_str]}")
                print(f"üîç –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π: {len(users)}")
                
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
                if users:
                    cursor.execute(f'''
                        SELECT user_id, tariff_name, valid_until, updated_at
                        FROM payments 
                        WHERE user_id = ? 
                        AND status = 'succeeded'
                        ORDER BY valid_until DESC
                        LIMIT 1
                    ''', (users[0],))
                    user_info = cursor.fetchone()
                    if user_info:
                        print(f"üîç –ü—Ä–∏–º–µ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ID={user_info[0]}, —Ç–∞—Ä–∏—Ñ='{user_info[1]}', valid_until={user_info[2]}, updated_at={user_info[3]}")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        
        return users

# –§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
async def mailing_scheduler(bot: Bot):
    """–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫"""
    sender = MailingSender(bot)
    
    print("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —Ä–∞—Å—Å—ã–ª–æ–∫ –∑–∞–ø—É—â–µ–Ω")
    
    while True:
        try:
            await sender.send_active_mailings()
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
            await asyncio.sleep(300)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")
            await asyncio.sleep(60)
