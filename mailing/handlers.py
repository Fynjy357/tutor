# mailing/handlers.py
import asyncio
from asyncio.log import logger
import os
import json
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardButton, InlineKeyboardMarkup

from commands.config import SUPER_ADMIN_ID
from .models import BonusMailing, MailingConfig
from database import db


# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
mailing_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
class CreateMailingStates(StatesGroup):
    waiting_for_message = State()
    confirm_message = State()
    waiting_for_files = State()
    waiting_for_tariffs = State()
    waiting_for_start_date = State()
    waiting_for_end_date = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏
class EditMailingStates(StatesGroup):
    waiting_for_new_start_date = State()
    waiting_for_new_end_date = State()
    waiting_for_new_files = State()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏
bonus_mailing = BonusMailing(db)

def is_admin(user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    return user_id == SUPER_ADMIN_ID

def create_tariffs_keyboard(selected_tariffs=None, action="select"):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    if selected_tariffs is None:
        selected_tariffs = []
    
    available_tariffs = ["1 –º–µ—Å—è—Ü", "6 –º–µ—Å—è—Ü–µ–≤", "1 –≥–æ–¥"]
    keyboard = []
    
    for tariff in available_tariffs:
        prefix = "‚úÖ " if tariff in selected_tariffs else ""
        keyboard.append([
            InlineKeyboardButton(
                text=f"{prefix}{tariff}", 
                callback_data=f"tariff_{tariff}"
            )
        ])
    
    button_text = "‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä" if action == "select" else "‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã"
    callback_data = "finish_tariffs" if action == "select" else "save_tariffs"
    
    keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

def create_edit_mailing_keyboard(mailing_id: int):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîÑ –ó–∞–ø—É—Å—Ç–∏—Ç—å/–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å", callback_data=f"toggle_mailing_{mailing_id}")],
        [InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞", callback_data=f"change_start_{mailing_id}")],
        [InlineKeyboardButton(text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è", callback_data=f"change_end_{mailing_id}")],
        [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã", callback_data=f"change_tariffs_{mailing_id}")],
        [InlineKeyboardButton(text="üìé –ò–∑–º–µ–Ω–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data=f"change_files_{mailing_id}")],
        [InlineKeyboardButton(text="üóëÔ∏è –£–¥–∞–ª–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=f"delete_mailing_{mailing_id}")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="bonus_planner")]
    ])

async def show_mailing_menu(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìù –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±–æ–Ω—É—Å", callback_data="create_bonus")],
        [InlineKeyboardButton(text="üìã –ü–ª–∞–Ω–µ—Ä –±–æ–Ω—É—Å–æ–≤", callback_data="bonus_planner")]
    ])
    
    await message.answer(
        "üéÅ <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

async def update_mailing_message(message: Message, mailing_id: int):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ä–∞—Å—Å—ã–ª–∫–µ"""
    mailing = bonus_mailing.get_mailing_by_id(mailing_id)
    if not mailing:
        return
    
    tariffs = json.loads(mailing['tariffs'])
    file_paths = json.loads(mailing['file_paths']) if mailing['file_paths'] else []
    start_date = datetime.fromisoformat(mailing['start_date'])
    end_date = datetime.fromisoformat(mailing['end_date'])
    
    status_text = "üü¢ –ê–∫—Ç–∏–≤–Ω–∞" if mailing['is_active'] else "üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω–∞"
    
    await message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ #{mailing_id}</b>\n\n"
        f"–°—Ç–∞—Ç—É—Å: {status_text}\n"
        f"–¢–∞—Ä–∏—Ñ—ã: {', '.join(tariffs)}\n"
        f"–ù–∞—á–∞–ª–æ: {start_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date.strftime('%d.%m.%Y %H:%M')}\n"
        f"–§–∞–π–ª–æ–≤: {len(file_paths)}\n\n"
        f"<b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{mailing['message_text'][:200]}...",
        reply_markup=create_edit_mailing_keyboard(mailing_id)
    )


# –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@mailing_router.message(Command("bonus_mailing"))
async def bonus_mailing_command(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await show_mailing_menu(message)

@mailing_router.message(Command("mailing_stats"))
async def mailing_stats(message: Message):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–∞–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    with db.get_connection() as conn:
        cursor = conn.cursor()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–∞–º
        cursor.execute('''
            SELECT 
                COUNT(*) as total_mailings,
                SUM(CASE WHEN is_active = 1 THEN 1 ELSE 0 END) as active_mailings,
                SUM(CASE WHEN is_active = 0 THEN 1 ELSE 0 END) as inactive_mailings
            FROM bonus_mailings
        ''')
        stats = cursor.fetchone()
        
        # –ê–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥
        cursor.execute('''
            SELECT id, start_date, end_date 
            FROM bonus_mailings 
            WHERE is_active = 1 
            AND datetime(start_date) <= datetime('now') 
            AND datetime(end_date) >= datetime('now')
        ''')
        current_mailings = cursor.fetchall()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç–ø—Ä–∞–≤–æ–∫
        cursor.execute('''
            SELECT COUNT(DISTINCT user_id) as total_users_sent 
            FROM mailing_logs
        ''')
        sent_stats = cursor.fetchone()
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º —Ä–∞—Å—Å—ã–ª–∫–∞–º
        cursor.execute('''
            SELECT mailing_id, COUNT(*) as sent_count
            FROM mailing_logs 
            GROUP BY mailing_id 
            ORDER BY sent_count DESC 
            LIMIT 5
        ''')
        top_mailings = cursor.fetchall()
    
    text = (
        f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
        f"üìß –í—Å–µ–≥–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {stats[0]}\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats[1]}\n"
        f"üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: {stats[2]}\n"
        f"üìÖ –°–µ–π—á–∞—Å –∞–∫—Ç–∏–≤–Ω—ã: {len(current_mailings)}\n"
        f"üë• –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: {sent_stats[0] if sent_stats else 0}\n\n"
    )
    
    if current_mailings:
        text += "<b>–¢–µ–∫—É—â–∏–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏:</b>\n"
        for mailing in current_mailings:
            text += f"‚Ä¢ #{mailing[0]} ({mailing[1][:10]} - {mailing[2][:10]})\n"
    
    if top_mailings:
        text += "\n<b>–¢–æ–ø —Ä–∞—Å—Å—ã–ª–æ–∫ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–∞–º:</b>\n"
        for mailing in top_mailings:
            text += f"‚Ä¢ #{mailing[0]}: {mailing[1]} –æ—Ç–ø—Ä–∞–≤–æ–∫\n"
    
    await message.answer(text)

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@mailing_router.callback_query(F.data == "create_bonus")
async def create_bonus_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è –±–æ–Ω—É—Å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await state.set_state(CreateMailingStates.waiting_for_message)
    await callback.message.edit_text(
        "üìù <b>–°–æ–∑–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML. –í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:\n"
        "‚Ä¢ <b>–∂–∏—Ä–Ω—ã–π —Ç–µ–∫—Å—Ç</b>\n"
        "‚Ä¢ <i>–∫—É—Ä—Å–∏–≤</i>\n"
        "‚Ä¢ —Å—Å—ã–ª–∫–∏\n"
        "‚Ä¢ —ç–º–æ–¥–∑–∏\n\n"
        "<i>–°–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –ø–æ–∫–∞–∑–∞–Ω–æ —Å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–º –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.</i>"
    )
    await callback.answer()

@mailing_router.message(CreateMailingStates.waiting_for_message)
async def process_message_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –∏—Å–ø–æ–ª—å–∑—É–µ–º message.text –≤–º–µ—Å—Ç–æ message.html_text
    await state.update_data(message_text=message.text)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_message")],
        [InlineKeyboardButton(text="üîÑ –ò–∑–º–µ–Ω–∏—Ç—å", callback_data="change_message")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel_mailing")]
    ])
    
    await message.answer(
        "üëÄ <b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å–æ–æ–±—â–µ–Ω–∏—è:</b>\n\n" + message.text,
        reply_markup=keyboard,
        parse_mode="HTML"  # –î–æ–±–∞–≤–ª—è–µ–º HTML –ø–∞—Ä—Å–∏–Ω–≥ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    )
    await state.set_state(CreateMailingStates.confirm_message)


@mailing_router.callback_query(F.data == "confirm_message")
async def confirm_message(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await state.set_state(CreateMailingStates.waiting_for_files)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Ñ–∞–π–ª–æ–≤
    await callback.message.edit_text(
        "üìé <b>–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
        "‚Ä¢ PDF —Ñ–∞–π–ª—ã\n" 
        "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG)\n\n"
        "–ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤.\n"
        "–ï—Å–ª–∏ —Ñ–∞–π–ª—ã –Ω–µ –Ω—É–∂–Ω—ã, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ —Ñ–∞–π–ª–æ–≤", callback_data="finish_files")]
        ])
    )
    await state.update_data(file_paths=[])
    await callback.answer()

@mailing_router.callback_query(F.data == "change_message")
async def change_message(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    await state.set_state(CreateMailingStates.waiting_for_message)
    await callback.message.edit_text("üìù –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML:")
    await callback.answer()

@mailing_router.message(CreateMailingStates.waiting_for_files, F.document | F.photo)
async def process_file_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    try:
        data = await state.get_data()
        file_paths = data.get('file_paths', [])
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        if message.document:
            # –î–æ–∫—É–º–µ–Ω—Ç—ã - —Ç–æ–ª—å–∫–æ PDF
            if message.document.mime_type != 'application/pdf':
                await message.answer("‚ùå –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã.")
                return
            file_id = message.document.file_id
            file_name = message.document.file_name
            file_type = 'document'
            
        elif message.photo:
            # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
            file_id = message.photo[-1].file_id
            file_name = f"image_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
            file_type = 'photo'
        else:
            await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ PDF —Ñ–∞–π–ª—ã –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
            return
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
        file = await message.bot.get_file(file_id)
        file_path = file.file_path
        
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        downloaded_file = await message.bot.download_file(file_path)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        filename = f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{file_name}"
        local_path = os.path.join(MailingConfig.FILES_DIR, filename)
        
        with open(local_path, 'wb') as f:
            f.write(downloaded_file.read())
        
        file_paths.append(local_path)
        await state.update_data(file_paths=file_paths)
        
        await message.answer(f"‚úÖ –§–∞–π–ª '{file_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Ñ–∞–π–ª–∞: {str(e)}")

@mailing_router.callback_query(F.data == "finish_files")
async def finish_files(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ - —Ñ–∞–π–ª—ã —Ç–µ–ø–µ—Ä—å –Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã"""
    data = await state.get_data()
    file_paths = data.get('file_paths', [])
    
    # –£–ë–ò–†–ê–ï–ú –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Ñ–∞–π–ª–æ–≤
    # if not file_paths:
    #     await callback.answer("‚ùå –ù—É–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ñ–∞–π–ª!", show_alert=True)
    #     return
    
    await state.set_state(CreateMailingStates.waiting_for_tariffs)
    
    # –°–æ–æ–±—â–µ–Ω–∏–µ –º–µ–Ω—è–µ–º –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
    if file_paths:
        file_text = f"üìé –ó–∞–≥—Ä—É–∂–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(file_paths)}"
    else:
        file_text = "üìé –§–∞–π–ª—ã –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
    
    await callback.message.edit_text(
        f"üí∞ <b>–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        f"{file_text}\n\n"
        "–ú–æ–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ç–∞—Ä–∏—Ñ–æ–≤. –ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–±–æ—Ä'.",
        reply_markup=create_tariffs_keyboard(action="select")
    )
    await state.update_data(selected_tariffs=[])
    await callback.answer()

@mailing_router.callback_query(F.data.startswith("tariff_"))
async def select_tariff(callback: CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä —Ç–∞—Ä–∏—Ñ–∞"""
    tariff = callback.data.replace("tariff_", "")
    data = await state.get_data()
    selected_tariffs = data.get('selected_tariffs', [])
    
    if tariff in selected_tariffs:
        selected_tariffs.remove(tariff)
    else:
        selected_tariffs.append(tariff)
    
    await state.update_data(selected_tariffs=selected_tariffs)
    
    action = "select" if "finish_tariffs" in callback.message.reply_markup.inline_keyboard[-1][0].callback_data else "edit"
    await callback.message.edit_reply_markup(reply_markup=create_tariffs_keyboard(selected_tariffs, action))
    await callback.answer()

@mailing_router.callback_query(F.data == "finish_tariffs")
async def finish_tariffs(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    data = await state.get_data()
    selected_tariffs = data.get('selected_tariffs', [])
    
    if not selected_tariffs:
        await callback.answer("‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∞—Ä–∏—Ñ!", show_alert=True)
        return
    
    await state.set_state(CreateMailingStates.waiting_for_start_date)
    await callback.message.edit_text(
        "üìÖ <b>–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ü—Ä–∏–º–µ—Ä: 25.12.2024 10:00"
    )
    await callback.answer()

@mailing_router.message(CreateMailingStates.waiting_for_start_date)
async def process_start_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞"""
    try:
        start_date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        await state.update_data(start_date=start_date)
        await state.set_state(CreateMailingStates.waiting_for_end_date)
        await message.answer(
            "üìÖ <b>–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
            "–ü—Ä–∏–º–µ—Ä: 31.12.2024 23:59"
        )
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")

@mailing_router.message(CreateMailingStates.waiting_for_end_date)
async def process_end_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    try:
        end_date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        data = await state.get_data()
        start_date = data['start_date']
        
        if end_date <= start_date:
            await message.answer("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞!")
            return
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
        mailing_id = bonus_mailing.create_mailing(
            message_text=data['message_text'],
            file_paths=data.get('file_paths', []),  # –ú–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º
            tariffs=data['selected_tariffs'],
            start_date=start_date,
            end_date=end_date
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–æ–≤
        file_info = f"–§–∞–π–ª–æ–≤: {len(data.get('file_paths', []))}" if data.get('file_paths') else "–§–∞–π–ª—ã: –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
        
        await message.answer(
            f"‚úÖ <b>–ë–æ–Ω—É—Å–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
            f"ID: {mailing_id}\n"
            f"–¢–∞—Ä–∏—Ñ—ã: {', '.join(data['selected_tariffs'])}\n"
            f"–ù–∞—á–∞–ª–æ: {start_date.strftime('%d.%m.%Y %H:%M')}\n"
            f"–û–∫–æ–Ω—á–∞–Ω–∏–µ: {end_date.strftime('%d.%m.%Y %H:%M')}\n\n"
            f"{file_info}"
        )
        
        await state.clear()
        await show_mailing_menu(message)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")


# –ü–ª–∞–Ω–µ—Ä –±–æ–Ω—É—Å–æ–≤
@mailing_router.callback_query(F.data == "bonus_planner")
async def show_bonus_planner(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    mailings = bonus_mailing.get_all_mailings()
    
    if not mailings:
        await callback.message.edit_text(
            "üìã <b>–ü–ª–∞–Ω–µ—Ä –±–æ–Ω—É—Å–æ–≤</b>\n\n"
            "–ù–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")]
            ])
        )
        return
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[])
    
    for mailing in mailings:
        status = "üü¢" if mailing['is_active'] else "üî¥"
        tariffs = json.loads(mailing['tariffs'])
        keyboard.inline_keyboard.append([
            InlineKeyboardButton(
                text=f"{status} –†–∞—Å—Å—ã–ª–∫–∞ #{mailing['id']} ({', '.join(tariffs)})",
                callback_data=f"edit_mailing_{mailing['id']}"
            )
        ])
    
    keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_menu")])
    
    await callback.message.edit_text(
        "üìã <b>–ü–ª–∞–Ω–µ—Ä –±–æ–Ω—É—Å–æ–≤</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )
    await callback.answer()

@mailing_router.callback_query(F.data.startswith("edit_mailing_"))
async def edit_mailing_menu(callback: CallbackQuery, state: FSMContext = None):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    mailing_id = int(callback.data.replace("edit_mailing_", ""))
    mailing = bonus_mailing.get_mailing_by_id(mailing_id)
    
    if not mailing:
        await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    if state:
        await state.update_data(editing_mailing_id=mailing_id)
    
    await update_mailing_message(callback.message, mailing_id)
    await callback.answer()



# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@mailing_router.callback_query(F.data.startswith("toggle_mailing_"))
async def toggle_mailing(callback: CallbackQuery):
    """–í–∫–ª—é—á–µ–Ω–∏–µ/–≤—ã–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        mailing_id = int(callback.data.replace("toggle_mailing_", ""))
        mailing = bonus_mailing.get_mailing_by_id(mailing_id)
        
        if not mailing:
            await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
            return
        
        new_status = not mailing['is_active']
        bonus_mailing.update_mailing(mailing_id, is_active=new_status)
        
        status_text = "–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞"
        await callback.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ {status_text}!", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await update_mailing_message(callback.message, mailing_id)
        
    except Exception as e:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
        print(f"–û—à–∏–±–∫–∞ –≤ toggle_mailing: {e}")

@mailing_router.callback_query(F.data.startswith("change_start_"))
async def change_start_date(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞"""
    mailing_id = int(callback.data.replace("change_start_", ""))
    await state.set_state(EditMailingStates.waiting_for_new_start_date)
    await state.update_data(editing_mailing_id=mailing_id)
    
    await callback.message.edit_text(
        "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞</b>\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ü—Ä–∏–º–µ—Ä: 25.12.2024 10:00"
    )
    await callback.answer()

@mailing_router.callback_query(F.data.startswith("change_end_"))
async def change_end_date(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    mailing_id = int(callback.data.replace("change_end_", ""))
    await state.set_state(EditMailingStates.waiting_for_new_end_date)
    await state.update_data(editing_mailing_id=mailing_id)
    
    await callback.message.edit_text(
        "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è</b>\n\n"
        "–§–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú\n"
        "–ü—Ä–∏–º–µ—Ä: 31.12.2024 23:59"
    )
    await callback.answer()

@mailing_router.callback_query(F.data.startswith("change_tariffs_"))
async def change_tariffs(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–∞—Ä–∏—Ñ–æ–≤"""
    mailing_id = int(callback.data.replace("change_tariffs_", ""))
    mailing = bonus_mailing.get_mailing_by_id(mailing_id)
    
    if not mailing:
        await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    current_tariffs = json.loads(mailing['tariffs'])
    await state.update_data(editing_mailing_id=mailing_id, selected_tariffs=current_tariffs)
    
    await callback.message.edit_text(
        "üí∞ <b>–ò–∑–º–µ–Ω–∏—Ç–µ —Ç–∞—Ä–∏—Ñ—ã –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã –∏ –Ω–∞–∂–º–∏—Ç–µ '–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–∞—Ä–∏—Ñ—ã'.",
        reply_markup=create_tariffs_keyboard(current_tariffs, action="edit")
    )
    await callback.answer()

@mailing_router.callback_query(F.data == "save_tariffs")
async def save_tariffs(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–Ω—ã—Ö —Ç–∞—Ä–∏—Ñ–æ–≤"""
    data = await state.get_data()
    mailing_id = data.get('editing_mailing_id')
    selected_tariffs = data.get('selected_tariffs', [])
    
    if not selected_tariffs:
        await callback.answer("‚ùå –ù—É–∂–Ω–æ –≤—ã–±—Ä–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∞—Ä–∏—Ñ!", show_alert=True)
        return
    
    bonus_mailing.update_mailing(mailing_id, tariffs=selected_tariffs)
    await callback.answer("‚úÖ –¢–∞—Ä–∏—Ñ—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", show_alert=True)
    await state.clear()
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ù–µ –∏–∑–º–µ–Ω—è–µ–º callback.data, –∞ –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –Ω–∞–ø—Ä—è–º—É—é
    await update_mailing_message(callback.message, mailing_id)


@mailing_router.callback_query(F.data.startswith("change_files_"))
async def change_files(callback: CallbackQuery, state: FSMContext):
    """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
    mailing_id = int(callback.data.replace("change_files_", ""))
    await state.set_state(EditMailingStates.waiting_for_new_files)
    await state.update_data(editing_mailing_id=mailing_id, file_paths=[])
    
    await callback.message.edit_text(
        "üìé <b>–î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å:\n"
        "‚Ä¢ PDF —Ñ–∞–π–ª—ã\n"
        "‚Ä¢ –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (JPG, PNG)\n\n"
        "–¢–µ–∫—É—â–∏–µ —Ñ–∞–π–ª—ã –±—É–¥—É—Ç –∑–∞–º–µ–Ω–µ–Ω—ã.\n"
        "–ö–æ–≥–¥–∞ –∑–∞–∫–æ–Ω—á–∏—Ç–µ, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ.",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª—ã", callback_data="save_files")]
        ])
    )
    await callback.answer()

@mailing_router.callback_query(F.data == "save_files")
async def save_files(callback: CallbackQuery, state: FSMContext):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤"""
    data = await state.get_data()
    mailing_id = data.get('editing_mailing_id')
    file_paths = data.get('file_paths', [])
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ñ–∞–π–ª—ã
    mailing = bonus_mailing.get_mailing_by_id(mailing_id)
    if mailing and mailing['file_paths']:
        old_files = json.loads(mailing['file_paths'])
        for old_file in old_files:
            try:
                if os.path.exists(old_file):
                    os.remove(old_file)
            except:
                pass
    
    bonus_mailing.update_mailing(mailing_id, file_paths=file_paths)
    await callback.answer("‚úÖ –§–∞–π–ª—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã!", show_alert=True)
    await state.clear()
    
    # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ò—Å–ø–æ–ª—å–∑—É–µ–º update_mailing_message –≤–º–µ—Å—Ç–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è callback.data
    await update_mailing_message(callback.message, mailing_id)


# # –°–æ–∑–¥–∞–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã–∑–æ–≤–∞ edit_mailing_menu
# async def edit_mailing_menu_from_callback(callback: CallbackQuery, mailing_id: int, state: FSMContext):
#     """–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ edit_mailing_menu"""
#     # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π callback —Å –Ω—É–∂–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
#     class TempCallback:
#         def __init__(self, original_callback, mailing_id):
#             self.message = original_callback.message
#             self.data = f"edit_mailing_{mailing_id}"
#             self.id = original_callback.id
#             self.from_user = original_callback.from_user
    
#     temp_callback = TempCallback(callback, mailing_id)
#     await edit_mailing_menu(temp_callback, state)

@mailing_router.callback_query(F.data.startswith("delete_mailing_"))
async def delete_mailing(callback: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    mailing_id = int(callback.data.replace("delete_mailing_", ""))
    mailing = bonus_mailing.get_mailing_by_id(mailing_id)
    
    if not mailing:
        await callback.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return
    
    # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
    if mailing['file_paths']:
        file_paths = json.loads(mailing['file_paths'])
        for file_path in file_paths:
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
            except:
                pass
    
    bonus_mailing.delete_mailing(mailing_id)
    await callback.answer("‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
    await show_bonus_planner(callback)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@mailing_router.message(EditMailingStates.waiting_for_new_start_date)
async def process_new_start_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞"""
    try:
        start_date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        data = await state.get_data()
        mailing_id = data['editing_mailing_id']
        
        bonus_mailing.update_mailing(mailing_id, start_date=start_date)
        await message.answer("‚úÖ –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update_mailing_message(message, mailing_id)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")

@mailing_router.message(EditMailingStates.waiting_for_new_end_date)
async def process_new_end_date(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
    try:
        end_date = datetime.strptime(message.text, "%d.%m.%Y %H:%M")
        data = await state.get_data()
        mailing_id = data['editing_mailing_id']
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –¥–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞
        mailing = bonus_mailing.get_mailing_by_id(mailing_id)
        start_date = datetime.fromisoformat(mailing['start_date'])
        
        if end_date <= start_date:
            await message.answer("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–∑–∂–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞!")
            return
        
        bonus_mailing.update_mailing(mailing_id, end_date=end_date)
        await message.answer("‚úÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
        await state.clear()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –º–µ–Ω—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–µ—Ä–µ–∑ –ø—Ä—è–º–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update_mailing_message(message, mailing_id)
        
    except ValueError:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –î–î.–ú–ú.–ì–ì–ì–ì –ß–ß:–ú–ú")

@mailing_router.message(EditMailingStates.waiting_for_new_files, F.document | F.photo)
async def process_new_file_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    data = await state.get_data()
    file_paths = data.get('file_paths', [])
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    if message.document:
        # –î–æ–∫—É–º–µ–Ω—Ç—ã - —Ç–æ–ª—å–∫–æ PDF
        if message.document.mime_type != 'application/pdf':
            await message.answer("‚ùå –î–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è —Ç–æ–ª—å–∫–æ PDF —Ñ–∞–π–ª—ã.")
            return
        file_id = message.document.file_id
        file_name = message.document.file_name
        
    elif message.photo:
        # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è - –±–µ—Ä–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file_id = message.photo[-1].file_id
        file_name = f"image_{datetime.now().strftime('%Y%m%d_%H%M%S')}.jpg"
    else:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ PDF —Ñ–∞–π–ª—ã –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
    file = await message.bot.get_file(file_id)
    file_path = file.file_path
    
    # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
    downloaded_file = await message.bot.download_file(file_path)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
    filename = f"{datetime.now().strftime('%Y%m%d_%H%M%S')}_{file_name}"
    local_path = os.path.join(MailingConfig.FILES_DIR, filename)
    
    with open(local_path, 'wb') as f:
        f.write(downloaded_file.read())
    
    file_paths.append(local_path)
    await state.update_data(file_paths=file_paths)
    
    await message.answer(f"‚úÖ –§–∞–π–ª '{file_name}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω!")

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
@mailing_router.callback_query(F.data == "back_to_menu")
async def back_to_menu(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    await show_mailing_menu(callback.message)
    await callback.answer()


@mailing_router.callback_query(F.data == "cancel_mailing")
async def cancel_mailing(callback: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    await state.clear()
    await callback.message.edit_text("‚ùå –°–æ–∑–¥–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_mailing_menu(callback.message)
    await callback.answer()


# –ö–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
@mailing_router.message(Command("send_mailings"))
async def send_mailings_now(message: Message):
    """–†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    from mailing.sender import MailingSender
    sender = MailingSender(message.bot)
    
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é –æ—Ç–ø—Ä–∞–≤–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫...")
    await sender.send_active_mailings()
    await message.answer("‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

@mailing_router.message(Command("test_mailing"))
async def test_mailing_now(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
        mailings = bonus_mailing.get_all_mailings()
        current_time = datetime.now()
        
        active_mailings = []
        for mailing in mailings:
            if not mailing['is_active']:
                continue
            
            start_date = datetime.fromisoformat(mailing['start_date'])
            end_date = datetime.fromisoformat(mailing['end_date'])
            
            if start_date <= current_time <= end_date:
                active_mailings.append(mailing)
        
        if not active_mailings:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏")
            return
        
        await message.answer(f"üìß –ù–∞–π–¥–µ–Ω–æ {len(active_mailings)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        for mailing in active_mailings:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Ç–æ–¥ –º–æ–¥–µ–ª–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
            with db.get_connection() as conn:
                cursor = conn.cursor()
                
                tariffs = json.loads(mailing['tariffs'])
                placeholders = ','.join(['?'] * len(tariffs))
                
                cursor.execute(f'''
                    SELECT DISTINCT user_id 
                    FROM payments 
                    WHERE tariff_name IN ({placeholders}) 
                    AND status = 'succeeded'
                    AND datetime(valid_until) > datetime('now')
                ''', tariffs)
                
                users = cursor.fetchall()
            
            await message.answer(
                f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ #{mailing['id']}\n"
                f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {mailing['start_date'][:16]} - {mailing['end_date'][:16]}\n"
                f"üí∞ –¢–∞—Ä–∏—Ñ—ã: {', '.join(tariffs)}"
            )
            
            # –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É –° –§–ê–ô–õ–ê–ú–ò (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ)
            try:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                await message.bot.send_message(
                    chat_id=message.from_user.id, 
                    text=f"üìß <b>–¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ #{mailing['id']}</b>\n\n{mailing['message_text']}",
                    parse_mode='HTML'
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å - –¢–ê–ö –ñ–ï –ö–ê–ö –í –†–ï–ê–õ–¨–ù–û–ô –†–ê–°–°–´–õ–ö–ï
                if mailing['file_paths']:
                    files = json.loads(mailing['file_paths'])
                    for file_path in files:
                        if os.path.exists(file_path):
                            try:
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                                file_ext = os.path.splitext(file_path)[1].lower()
                                
                                with open(file_path, 'rb') as file:
                                    file_data = file.read()
                                
                                from aiogram.types import BufferedInputFile
                                input_file = BufferedInputFile(
                                    file_data,
                                    filename=os.path.basename(file_path)
                                )
                                
                                if file_ext in ['.jpg', '.jpeg', '.png', '.gif']:
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                                    await message.bot.send_photo(
                                        chat_id=message.from_user.id,
                                        photo=input_file
                                    )
                                else:
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                                    await message.bot.send_document(
                                        chat_id=message.from_user.id,
                                        document=input_file
                                    )
                                    
                            except Exception as file_error:
                                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(file_error)}")
                
                await message.answer(f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ #{mailing['id']} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
                
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏ #{mailing['id']}: {str(e)}")
        
        await message.answer("üéâ –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")


@mailing_router.message(Command("final_test_mailing"))
async def final_test_mailing(message: Message):
    """–§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º–∏"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.answer("üîÑ –ù–∞—á–∏–Ω–∞—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é –æ—Ç–ø—Ä–∞–≤–∫—É...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
        mailings = bonus_mailing.get_all_mailings()
        current_time = datetime.now()
        
        active_mailings = []
        for mailing in mailings:
            if not mailing['is_active']:
                continue
            
            start_date = datetime.fromisoformat(mailing['start_date'])
            end_date = datetime.fromisoformat(mailing['end_date'])
            
            if start_date <= current_time <= end_date:
                active_mailings.append(mailing)
        
        if not active_mailings:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏")
            return
        
        await message.answer(f"üìß –ù–∞–π–¥–µ–Ω–æ {len(active_mailings)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")
        
        for mailing in active_mailings:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                
                tariffs = json.loads(mailing['tariffs'])
                placeholders = ','.join(['?'] * len(tariffs))
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ó–ê–ü–†–û–°
                cursor.execute(f'''
                    SELECT DISTINCT user_id 
                    FROM payments 
                    WHERE tariff_name IN ({placeholders}) 
                    AND status = 'succeeded'
                    AND datetime(valid_until) > datetime('now')
                ''', tariffs)
                
                users = cursor.fetchall()
            
            await message.answer(
                f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ #{mailing['id']}\n"
                f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {mailing['start_date'][:16]} - {mailing['end_date'][:16]}\n"
                f"üí∞ –¢–∞—Ä–∏—Ñ—ã: {', '.join(tariffs)}"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –° –§–ê–ô–õ–ê–ú–ò (–∫–∞–∫ –≤ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ)
            try:
                # –¢–µ–∫—Å—Ç
                await message.bot.send_message(
                    chat_id=message.from_user.id,
                    text=f"üìß <b>–¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ #{mailing['id']}</b>\n\n{mailing['message_text']}",
                    parse_mode='HTML'
                )
                
                # –§–∞–π–ª—ã - –¢–ê–ö –ñ–ï –ö–ê–ö –í –†–ï–ê–õ–¨–ù–û–ô –†–ê–°–°–´–õ–ö–ï
                if mailing['file_paths']:
                    files = json.loads(mailing['file_paths'])
                    for file_path in files:
                        if os.path.exists(file_path):
                            try:
                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                                file_ext = os.path.splitext(file_path)[1].lower()
                                
                                with open(file_path, 'rb') as file:
                                    file_data = file.read()
                                
                                from aiogram.types import BufferedInputFile
                                input_file = BufferedInputFile(
                                    file_data,
                                    filename=os.path.basename(file_path)
                                )
                                
                                if file_ext in ['.jpg', '.jpeg', '.png', '.gif']:
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                                    await message.bot.send_photo(
                                        chat_id=message.from_user.id,
                                        photo=input_file
                                    )
                                else:
                                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                                    await message.bot.send_document(
                                        chat_id=message.from_user.id,
                                        document=input_file
                                    )
                                    
                            except Exception as file_error:
                                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞: {str(file_error)}")
                
                await message.answer(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ #{mailing['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                
            except Exception as e:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {str(e)}")
        
        await message.answer("üéâ –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        
    except Exception as e:
        await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")



@mailing_router.message(Command("start_mailing"))
async def start_mailing(message: Message):
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.answer("üöÄ –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —á–µ—Ä–µ–∑ –º–æ–¥–µ–ª—å
        mailings = bonus_mailing.get_all_mailings()
        current_time = datetime.now()
        
        active_mailings = []
        for mailing in mailings:
            if not mailing['is_active']:
                continue
            
            start_date = datetime.fromisoformat(mailing['start_date'])
            end_date = datetime.fromisoformat(mailing['end_date'])
            
            if start_date <= current_time <= end_date:
                active_mailings.append(mailing)
        
        if not active_mailings:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥ –≤—Ä–µ–º–µ–Ω–∏")
            return
        
        await message.answer(f"üìß –ù–∞–π–¥–µ–Ω–æ {len(active_mailings)} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫")
        
        total_sent = 0
        total_errors = 0
        
        for mailing in active_mailings:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                
                tariffs = json.loads(mailing['tariffs'])
                placeholders = ','.join(['?'] * len(tariffs))
                
                cursor.execute(f'''
                    SELECT DISTINCT user_id 
                    FROM payments 
                    WHERE tariff_name IN ({placeholders}) 
                    AND status = 'succeeded'
                    AND datetime(valid_until) > datetime('now')
                ''', tariffs)
                
                users = cursor.fetchall()
            
            await message.answer(
                f"üì§ –†–∞—Å—Å—ã–ª–∫–∞ #{mailing['id']}\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: {len(users)}\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {mailing['start_date'][:16]} - {mailing['end_date'][:16]}\n"
                f"üí∞ –¢–∞—Ä–∏—Ñ—ã: {', '.join(tariffs)}"
            )
            
            mailing_sent = 0
            mailing_errors = 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for user in users:
                user_id = user[0]
                
                try:
                    # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–¥–µ–ª—å–Ω–æ
                    await message.bot.send_message(
                        chat_id=user_id,
                        text=mailing['message_text'],
                        parse_mode='HTML'
                    )
                    
                    # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    if mailing['file_paths']:
                        files = json.loads(mailing['file_paths'])
                        for file_path in files:
                            if os.path.exists(file_path):
                                try:
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                                    file_ext = os.path.splitext(file_path)[1].lower()
                                    
                                    with open(file_path, 'rb') as file:
                                        file_data = file.read()
                                    
                                    from aiogram.types import BufferedInputFile
                                    input_file = BufferedInputFile(
                                        file_data,
                                        filename=os.path.basename(file_path)
                                    )
                                    
                                    if file_ext in ['.jpg', '.jpeg', '.png', '.gif']:
                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                                        await message.bot.send_photo(
                                            chat_id=user_id,
                                            photo=input_file
                                        )
                                    else:
                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                                        await message.bot.send_document(
                                            chat_id=user_id,
                                            document=input_file
                                        )
                                        
                                except Exception as file_error:
                                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(file_error)}")
                    
                    mailing_sent += 1
                    total_sent += 1
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                    await asyncio.sleep(0.1)
                    
                except Exception as e:
                    mailing_errors += 1
                    total_errors += 1
                    print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
            
            await message.answer(
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏ #{mailing['id']}:\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {mailing_sent}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {mailing_errors}"
            )
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        await message.answer(
            f"üéâ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {total_errors}\n"
            f"üìß –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {len(active_mailings)}",
            parse_mode='HTML'
        )
    except Exception as e:
        await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")




@mailing_router.message(Command("test_mailing_with_files"))
async def test_mailing_with_files(message: Message):
    """–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å —Ñ–∞–π–ª–∞–º–∏ - –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.answer("üîÑ –¢–µ—Å—Ç–∏—Ä—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Å —Ñ–∞–π–ª–∞–º–∏...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        mailings = bonus_mailing.get_all_mailings()
        current_time = datetime.now()
        
        # –§–∏–ª—å—Ç—Ä—É–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        active_mailings = []
        for mailing in mailings:
            if not mailing['is_active']:
                continue
            
            start_date = datetime.fromisoformat(mailing['start_date'])
            end_date = datetime.fromisoformat(mailing['end_date'])
            
            if start_date <= current_time <= end_date:
                active_mailings.append(mailing)
        
        if not active_mailings:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É
        for mailing in active_mailings:
            mailing_id = mailing['id']
            await message.answer(f"üìß –¢–µ—Å—Ç–∏—Ä—É—é —Ä–∞—Å—Å—ã–ª–∫—É #{mailing_id}")
            
            try:
                # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏
                await message.answer("üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏...")
                await message.bot.send_message(
                    chat_id=message.from_user.id,
                    text=f"üìß –¢–µ—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ #{mailing_id}\n\n{mailing['message_text']}",
                    parse_mode='HTML'
                )
                
                # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –ß–ê–°–¢–¨
                if mailing['file_paths']:
                    files = json.loads(mailing['file_paths'])
                    await message.answer(f"üìé –û—Ç–ø—Ä–∞–≤–ª—è—é {len(files)} —Ñ–∞–π–ª–æ–≤...")
                    
                    for i, file_path in enumerate(files, 1):
                        if not os.path.exists(file_path):
                            await message.answer(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}")
                            continue
                        
                        try:
                            await message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é —Ñ–∞–π–ª {i}: {os.path.basename(file_path)}")
                            
                            # –ò—Å–ø–æ–ª—å–∑—É–µ–º FSInputFile –≤–º–µ—Å—Ç–æ BufferedInputFile –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                            from aiogram.types import FSInputFile
                            
                            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                            file_ext = os.path.splitext(file_path)[1].lower()
                            
                            if file_ext in ['.jpg', '.jpeg', '.png', '.gif']:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                                input_file = FSInputFile(file_path)
                                await message.bot.send_photo(
                                    chat_id=message.from_user.id,
                                    photo=input_file,
                                    caption=f"–§–∞–π–ª {i}: {os.path.basename(file_path)}"
                                )
                            else:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                                input_file = FSInputFile(file_path)
                                await message.bot.send_document(
                                    chat_id=message.from_user.id,
                                    document=input_file,
                                    caption=f"–§–∞–π–ª {i}: {os.path.basename(file_path)}"
                                )
                            
                            await message.answer(f"‚úÖ –§–∞–π–ª {i} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                            
                        except Exception as file_error:
                            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ {i}: {str(file_error)}")
                            
                            # –ü—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±
                            try:
                                await message.answer("üîÑ –ü—Ä–æ–±—É—é –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± –æ—Ç–ø—Ä–∞–≤–∫–∏...")
                                # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                                if file_ext in ['.jpg', '.jpeg', '.png', '.gif']:
                                    await message.bot.send_photo(
                                        chat_id=message.from_user.id,
                                        photo=file_path,
                                        caption=f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: {os.path.basename(file_path)}"
                                    )
                                else:
                                    await message.bot.send_document(
                                        chat_id=message.from_user.id,
                                        document=file_path,
                                        caption=f"–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±: {os.path.basename(file_path)}"
                                    )
                                await message.answer("‚úÖ –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Å—Ä–∞–±–æ—Ç–∞–ª")
                            except Exception as alt_error:
                                await message.answer(f"‚ùå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–± —Ç–æ–∂–µ –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {str(alt_error)}")
                else:
                    await message.answer("‚ÑπÔ∏è –í —ç—Ç–æ–π —Ä–∞—Å—Å—ã–ª–∫–µ –Ω–µ—Ç –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤")
                
                await message.answer(f"‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏ #{mailing_id} –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n")
                
            except Exception as mailing_error:
                await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏ #{mailing_id}: {str(mailing_error)}")
        
        await message.answer("üéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        
    except Exception as e:
        await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")



@mailing_router.message(Command("start_real_mailing"))
async def start_real_mailing(message: Message):
    """–ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏ –ø–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º —Ç–∞—Ä–∏—Ñ–∞–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é —Ä–µ–∞–ª—å–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º —Ç–∞—Ä–∏—Ñ–∞–º...")
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        mailings = bonus_mailing.get_all_mailings()
        current_time = datetime.now()
        
        active_mailings = []
        for mailing in mailings:
            if not mailing['is_active']:
                continue
            
            start_date = datetime.fromisoformat(mailing['start_date'])
            end_date = datetime.fromisoformat(mailing['end_date'])
            
            if start_date <= current_time <= end_date:
                active_mailings.append(mailing)
        
        if not active_mailings:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥")
            return
        
        total_sent = 0
        total_errors = 0
        total_already_sent = 0
        
        for mailing in active_mailings:
            mailing_id = mailing['id']
            tariffs = json.loads(mailing['tariffs'])
            
            await message.answer(
                f"üìß –†–∞—Å—Å—ã–ª–∫–∞ #{mailing_id}\n"
                f"üí∞ –¢–∞—Ä–∏—Ñ—ã: {', '.join(tariffs)}\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {mailing['start_date'][:16]} - {mailing['end_date'][:16]}"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –æ–ø–ª–∞—Ç–∏–≤—à–∏—Ö —ç—Ç–∏ —Ç–∞—Ä–∏—Ñ—ã
            with db.get_connection() as conn:
                cursor = conn.cursor()
                
                placeholders = ','.join(['?'] * len(tariffs))
                cursor.execute(f'''
                    SELECT DISTINCT user_id 
                    FROM payments 
                    WHERE tariff_name IN ({placeholders}) 
                    AND status = 'succeeded'
                    AND datetime(valid_until) > datetime('now')
                ''', tariffs)
                
                users = cursor.fetchall()
            
            if not users:
                await message.answer(f"‚ùå –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–º–∏ —Ç–∞—Ä–∏—Ñ–∞–º–∏: {', '.join(tariffs)}")
                continue
            
            await message.answer(f"üë• –ù–∞–π–¥–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}")
            
            mailing_sent = 0
            mailing_errors = 0
            mailing_already_sent = 0
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            for i, user in enumerate(users, 1):
                user_id = user[0]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —ç—Ç—É —Ä–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                if bonus_mailing.is_mailing_sent_to_user(mailing_id, user_id):
                    mailing_already_sent += 1
                    total_already_sent += 1
                    continue
                
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                    await message.bot.send_message(
                        chat_id=user_id,
                        text=mailing['message_text'],
                        parse_mode='HTML'
                    )
                    
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                    if mailing['file_paths']:
                        files = json.loads(mailing['file_paths'])
                        for file_path in files:
                            if os.path.exists(file_path):
                                try:
                                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                                    file_ext = os.path.splitext(file_path)[1].lower()
                                    
                                    with open(file_path, 'rb') as file:
                                        file_data = file.read()
                                    
                                    from aiogram.types import BufferedInputFile
                                    input_file = BufferedInputFile(
                                        file_data,
                                        filename=os.path.basename(file_path)
                                    )
                                    
                                    if file_ext in ['.jpg', '.jpeg', '.png', '.gif']:
                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                                        await message.bot.send_photo(
                                            chat_id=user_id,
                                            photo=input_file
                                        )
                                    else:
                                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                                        await message.bot.send_document(
                                            chat_id=user_id,
                                            document=input_file
                                        )
                                        
                                except Exception as file_error:
                                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {file_error}")
                                    bonus_mailing.log_mailing_sent(
                                        mailing_id, user_id, 'error', 
                                        f"File error: {str(file_error)}"
                                    )
                                    mailing_errors += 1
                                    total_errors += 1
                    
                    # –õ–æ–≥–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ—Ç–ø—Ä–∞–≤–∫—É
                    bonus_mailing.log_mailing_sent(mailing_id, user_id, 'sent')
                    mailing_sent += 1
                    total_sent += 1
                    
                    # –ü—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                    if i % 10 == 0:
                        await message.answer(f"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {i}/{len(users)} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
                    
                    # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                    await asyncio.sleep(0.1)
                    
                except Exception as e:
                    # –õ–æ–≥–∏—Ä—É–µ–º –æ—à–∏–±–∫—É
                    bonus_mailing.log_mailing_sent(mailing_id, user_id, 'error', str(e))
                    mailing_errors += 1
                    total_errors += 1
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            
            await message.answer(
                f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—Å—ã–ª–∫–∏ #{mailing_id}:\n"
                f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {mailing_sent}\n"
                f"üîÑ –£–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {mailing_already_sent}\n"
                f"‚ùå –û—à–∏–±–æ–∫: {mailing_errors}"
            )
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        await message.answer(
            f"üéâ <b>–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
            f"üìä <b>–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
            f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_sent}\n"
            f"üîÑ –£–∂–µ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {total_already_sent}\n"
            f"‚ùå –û—à–∏–±–æ–∫: {total_errors}\n"
            f"üìß –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {len(active_mailings)}",
            parse_mode='HTML'
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")




@mailing_router.message(Command("mailing_stats_detailed"))
async def mailing_stats_detailed(message: Message):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–ø—Ä–∞–≤–∫–∞–º —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–∞–º
            cursor.execute('''
                SELECT 
                    bm.id,
                    bm.message_text,
                    COUNT(ml.id) as total_sent,
                    SUM(CASE WHEN ml.status = 'sent' THEN 1 ELSE 0 END) as success_sent,
                    SUM(CASE WHEN ml.status = 'error' THEN 1 ELSE 0 END) as error_sent
                FROM bonus_mailings bm
                LEFT JOIN mailing_logs ml ON bm.id = ml.mailing_id
                GROUP BY bm.id
                ORDER BY bm.created_at DESC
            ''')
            
            stats = cursor.fetchall()
            
            if not stats:
                await message.answer("üìä –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ —Ä–∞—Å—Å—ã–ª–∫–∞–º")
                return
            
            text = "üìä <b>–î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
            
            for stat in stats:
                mailing_id, message_text, total, success, errors = stat
                preview = message_text[:50] + "..." if len(message_text) > 50 else message_text
                
                text += (
                    f"üìß <b>–†–∞—Å—Å—ã–ª–∫–∞ #{mailing_id}</b>\n"
                    f"üìù {preview}\n"
                    f"‚úÖ –£—Å–ø–µ—à–Ω–æ: {success or 0}\n"
                    f"‚ùå –û—à–∏–±–æ–∫: {errors or 0}\n"
                    f"üì§ –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–æ–∫: {total or 0}\n"
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n\n"
                )
            
            await message.answer(text, parse_mode='HTML')
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")


@mailing_router.message(Command("check_mailing_users"))
async def check_mailing_users(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
        mailings = bonus_mailing.get_all_mailings()
        current_time = datetime.now()
        
        active_mailings = []
        for mailing in mailings:
            if not mailing['is_active']:
                continue
            
            start_date = datetime.fromisoformat(mailing['start_date'])
            end_date = datetime.fromisoformat(mailing['end_date'])
            
            if start_date <= current_time <= end_date:
                active_mailings.append(mailing)
        
        if not active_mailings:
            await message.answer("‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –≤ —Ç–µ–∫—É—â–∏–π –ø–µ—Ä–∏–æ–¥")
            return
        
        text = "üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫</b>\n\n"
        
        for mailing in active_mailings:
            mailing_id = mailing['id']
            tariffs = json.loads(mailing['tariffs'])
            
            with db.get_connection() as conn:
                cursor = conn.cursor()
                
                placeholders = ','.join(['?'] * len(tariffs))
                cursor.execute(f'''
                    SELECT DISTINCT user_id 
                    FROM payments 
                    WHERE tariff_name IN ({placeholders}) 
                    AND status = 'succeeded'
                    AND datetime(valid_until) > datetime('now')
                ''', tariffs)
                
                users = cursor.fetchall()
            
            text += (
                f"üìß <b>–†–∞—Å—Å—ã–ª–∫–∞ #{mailing_id}</b>\n"
                f"üí∞ –¢–∞—Ä–∏—Ñ—ã: {', '.join(tariffs)}\n"
                f"üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(users)}\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {mailing['start_date'][:16]} - {mailing['end_date'][:16]}\n\n"
            )
            
            if users:
                text += "<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
                for user in users[:5]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã—Ö 5
                    text += f"‚Ä¢ ID: {user[0]}\n"
                if len(users) > 5:
                    text += f"‚Ä¢ ... –∏ –µ—â–µ {len(users) - 5}\n"
            else:
                text += "‚ùå <b>–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</b>\n"
            
            text += "\n" + "‚îÄ" * 30 + "\n\n"
        
        await message.answer(text, parse_mode='HTML')
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
@mailing_router.message(Command("create_test_mailing"))
async def create_test_mailing(message: Message):
    """–°–æ–∑–¥–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 2 —á–∞—Å–∞
        from datetime import datetime, timedelta
        start_date = datetime.now()
        end_date = start_date + timedelta(hours=2)
        
        mailing_id = bonus_mailing.create_mailing(
            message_text="üéâ <b>–¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞</b>\n\n–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫!",
            file_paths=[],  # –ë–µ–∑ —Ñ–∞–π–ª–æ–≤
            tariffs=["1 –º–µ—Å—è—Ü", "6 –º–µ—Å—è—Ü–µ–≤"],
            start_date=start_date,
            end_date=end_date
        )
        
        await message.answer(
            f"‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!\n"
            f"ID: {mailing_id}\n"
            f"–ü–µ—Ä–∏–æ–¥: {start_date.strftime('%H:%M')} - {end_date.strftime('%H:%M')}\n\n"
            f"–¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /test_mailing –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"
        )

    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")

@mailing_router.message(Command("cleanup_mailings"))
async def cleanup_mailings(message: Message):
    """–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫ –∏ —Ñ–∞–π–ª–æ–≤"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–∞—Å—Å—ã–ª–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–æ–ª–µ–µ 30 –¥–Ω–µ–π –Ω–∞–∑–∞–¥
            cursor.execute('''
                SELECT id, file_paths 
                FROM bonus_mailings 
                WHERE datetime(end_date) < datetime('now', '-30 days')
            ''')
            old_mailings = cursor.fetchall()
            
            deleted_count = 0
            file_count = 0
            
            for mailing in old_mailings:
                mailing_id = mailing[0]
                file_paths = json.loads(mailing[1]) if mailing[1] else []
                
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã
                for file_path in file_paths:
                    try:
                        if os.path.exists(file_path):
                            os.remove(file_path)
                            file_count += 1
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞ {file_path}: {e}")
                
                # –£–¥–∞–ª—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É –∏–∑ –ë–î
                cursor.execute('DELETE FROM bonus_mailings WHERE id = ?', (mailing_id,))
                deleted_count += 1
            
            conn.commit()
        
        await message.answer(
            f"üßπ <b>–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞</b>\n\n"
            f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ —Ä–∞—Å—Å—ã–ª–æ–∫: {deleted_count}\n"
            f"üìé –£–¥–∞–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {file_count}"
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏: {str(e)}")

@mailing_router.message(Command("mailing_help"))
async def mailing_help(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º —Ä–∞—Å—Å—ã–ª–æ–∫"""
    help_text = """
üéÅ <b>–ö–æ–º–∞–Ω–¥—ã —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ–Ω—É—Å–Ω—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏</b>

<b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/bonus_mailing - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Ä–∞—Å—Å—ã–ª–æ–∫
/mailing_stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ä–∞—Å—Å—ã–ª–∫–∞–º
/send_mailings - –†—É—á–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
/start_mailing - –ó–∞–ø—É—Å–∫ —Ä–µ–∞–ª—å–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏

<b>–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>
/test_mailing - –¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
/final_test_mailing - –§–∏–Ω–∞–ª—å–Ω–∞—è —Ç–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞
/test_mailing_with_files - –¢–µ—Å—Ç —Å —Ñ–∞–π–ª–∞–º–∏
/create_test_mailing - –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é —Ä–∞—Å—Å—ã–ª–∫—É

<b>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ:</b>
/cleanup_mailings - –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —Ä–∞—Å—Å—ã–ª–æ–∫
/mailing_help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

<b>–ü—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è:</b>
1. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /bonus_mailing
2. –í—ã–±–µ—Ä–∏—Ç–µ "–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –±–æ–Ω—É—Å"
3. –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ HTML —Ñ–æ—Ä–º–∞—Ç–µ
4. –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–∞–π–ª—ã (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ) - PDF –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
5. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ—ã
6. –£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ –∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è

<b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>
‚Ä¢ –í –ø–ª–∞–Ω–µ—Ä–µ –±–æ–Ω—É—Å–æ–≤ –º–æ–∂–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
‚Ä¢ –ú–æ–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å/–≤—ã–∫–ª—é—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫–∏
‚Ä¢ –ò–∑–º–µ–Ω—è—Ç—å –¥–∞—Ç—ã, —Ç–∞—Ä–∏—Ñ—ã –∏ —Ñ–∞–π–ª—ã
‚Ä¢ –£–¥–∞–ª—è—Ç—å –Ω–µ–Ω—É–∂–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
"""
    await message.answer(help_text)


# –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã
@mailing_router.message(Command("check_users"))
async def check_users(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—á–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞—Å—Å—ã–ª–∫—É #1
            cursor.execute('SELECT tariffs FROM bonus_mailings WHERE id = 1')
            mailing_result = cursor.fetchone()
            
            if not mailing_result:
                await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ #1 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
                return
            
            tariffs = json.loads(mailing_result[0])
            
            # –í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            cursor.execute('''
                SELECT user_id, tariff_name, valid_until, status
                FROM payments 
                WHERE datetime(valid_until) > datetime('now')
                ORDER BY valid_until DESC
            ''')
            all_active = cursor.fetchall()
            
            # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–¥ —Ç–∞—Ä–∏—Ñ—ã
            placeholders = ','.join(['?'] * len(tariffs))
            cursor.execute(f'''
                SELECT user_id, tariff_name, valid_until, status
                FROM payments 
                WHERE tariff_name IN ({placeholders}) 
                AND datetime(valid_until) > datetime('now')
                ORDER BY valid_until DESC
            ''', tariffs)
            matching = cursor.fetchall()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ "1 –º–µ—Å—è—Ü"
            cursor.execute('''
                SELECT user_id, tariff_name, valid_until, status
                FROM payments 
                WHERE tariff_name = '1 –º–µ—Å—è—Ü'
                AND datetime(valid_until) > datetime('now')
                ORDER BY valid_until DESC
            ''')
            month_tariff = cursor.fetchall()
        
        text = (
            f"üîç <b>–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π</b>\n\n"
            f"üí∞ –¢–∞—Ä–∏—Ñ—ã —Ä–∞—Å—Å—ã–ª–∫–∏: {', '.join(tariffs)}\n\n"
            f"üë• –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {len(all_active)}\n"
            f"‚úÖ –ü–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–¥ —Ç–∞—Ä–∏—Ñ—ã: {len(matching)}\n"
            f"üìÖ –° —Ç–∞—Ä–∏—Ñ–æ–º '1 –º–µ—Å—è—Ü': {len(month_tariff)}\n\n"
        )
        
        if all_active:
            text += "<b>–í—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            for user in all_active[:5]:
                text += f"‚Ä¢ ID: {user[0]}, –¢–∞—Ä–∏—Ñ: {user[1]}, –î–æ: {user[2][:16]}, –°—Ç–∞—Ç—É—Å: {user[3]}\n"
        
        if matching:
            text += f"\n<b>–ü–æ–¥—Ö–æ–¥—è—â–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n"
            for user in matching:
                text += f"‚Ä¢ ID: {user[0]}, –¢–∞—Ä–∏—Ñ: {user[1]}, –î–æ: {user[2][:16]}, –°—Ç–∞—Ç—É—Å: {user[3]}\n"
        else:
            text += "\n‚ùå <b>–ù–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!</b>\n"
            text += "–í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:\n"
            text += "1. –ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏\n"
            text += "2. –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Ç–∞—Ä–∏—Ñ–æ–≤\n"
            text += "3. –ü—Ä–æ–±–ª–µ–º—ã —Å —Ñ–æ—Ä–º–∞—Ç–æ–º –¥–∞—Ç\n"
        
        await message.answer(text)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏: {str(e)}")

@mailing_router.message(Command("check_payments_structure"))
async def check_payments_structure(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã payments"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
            cursor.execute("PRAGMA table_info(payments)")
            columns = cursor.fetchall()
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
            cursor.execute('''
                SELECT tariff_name, status, valid_until 
                FROM payments 
                LIMIT 5
            ''')
            examples = cursor.fetchall()
            
            # –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã
            cursor.execute('SELECT DISTINCT tariff_name FROM payments')
            unique_tariffs = cursor.fetchall()
        
        text = "<b>–°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ç–∞–±–ª–∏—Ü—ã payments:</b>\n"
        for col in columns:
            text += f"‚Ä¢ {col[1]} ({col[2]})\n"
        
        text += f"\n<b>–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ç–∞—Ä–∏—Ñ—ã ({len(unique_tariffs)}):</b>\n"
        for tariff in unique_tariffs:
            text += f"‚Ä¢ '{tariff[0]}'\n"
        
        text += "\n<b>–ü—Ä–∏–º–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö:</b>\n"
        for example in examples:
            text += f"‚Ä¢ –¢–∞—Ä–∏—Ñ: '{example[0]}', –°—Ç–∞—Ç—É—Å: '{example[1]}', –î–æ: {example[2]}\n"
        
        await message.answer(text)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: {str(e)}")

async def auto_send_mailings(bot):
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    try:
        mailings = bonus_mailing.get_all_mailings()
        current_time = datetime.now()
        
        for mailing in mailings:
            if not mailing['is_active']:
                continue
            
            start_date = datetime.fromisoformat(mailing['start_date'])
            end_date = datetime.fromisoformat(mailing['end_date'])
            
            if start_date <= current_time <= end_date:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∞—Å—å –ª–∏ —É–∂–µ —Å–µ–≥–æ–¥–Ω—è
                last_sent_key = f"mailing_last_sent_{mailing['id']}"
                last_sent = bonus_mailing.get_setting(last_sent_key)
                
                if last_sent and last_sent == current_time.strftime('%Y-%m-%d'):
                    continue  # –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–µ–≥–æ–¥–Ω—è
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
                with db.get_connection() as conn:
                    cursor = conn.cursor()
                    
                    tariffs = json.loads(mailing['tariffs'])
                    placeholders = ','.join(['?'] * len(tariffs))
                    
                    cursor.execute(f'''
                        SELECT DISTINCT user_id 
                        FROM payments 
                        WHERE tariff_name IN ({placeholders}) 
                        AND status = 'succeeded'
                        AND datetime(valid_until) > datetime('now')
                    ''', tariffs)
                    
                    users = cursor.fetchall()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
                sent_count = 0
                for user in users:
                    try:
                        user_id = user[0]
                        
                        # –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
                        await bot.send_message(
                            chat_id=user_id,
                            text=mailing['message_text'],
                            parse_mode='HTML'
                        )
                        
                        # –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –µ—Å—Ç—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                        if mailing['file_paths']:
                            files = json.loads(mailing['file_paths'])
                            for file_path in files:
                                if os.path.exists(file_path):
                                    try:
                                        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
                                        file_ext = os.path.splitext(file_path)[1].lower()
                                        
                                        with open(file_path, 'rb') as file:
                                            file_data = file.read()
                                        
                                        from aiogram.types import BufferedInputFile
                                        input_file = BufferedInputFile(
                                            file_data,
                                            filename=os.path.basename(file_path)
                                        )
                                        
                                        if file_ext in ['.jpg', '.jpeg', '.png', '.gif']:
                                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ —Ñ–æ—Ç–æ
                                            await bot.send_photo(
                                                chat_id=user_id,
                                                photo=input_file
                                            )
                                        else:
                                            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –¥–æ–∫—É–º–µ–Ω—Ç
                                            await bot.send_document(
                                                chat_id=user_id,
                                                document=input_file
                                            )
                                            
                                    except Exception as file_error:
                                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(file_error)}")
                        
                        sent_count += 1
                        await asyncio.sleep(0.1)
                        
                    except Exception as e:
                        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {str(e)}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –æ—Ç–ø—Ä–∞–≤–∫–∏
                bonus_mailing.update_setting(last_sent_key, current_time.strftime('%Y-%m-%d'))
                
                print(f"‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ #{mailing['id']} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ {sent_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏: {str(e)}")




# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
@mailing_router.errors()
async def mailing_errors_handler(event, exception):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫"""
    if hasattr(event, 'message') and event.message:
        await event.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    
    print(f"–û—à–∏–±–∫–∞ –≤ –º–æ–¥—É–ª–µ —Ä–∞—Å—Å—ã–ª–æ–∫: {exception}")
    return True


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
def init_mailing_system():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫"""
    try:
        # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ñ–∞–π–ª–æ–≤ –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if not os.path.exists(MailingConfig.FILES_DIR):
            os.makedirs(MailingConfig.FILES_DIR)
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ñ–∞–π–ª–æ–≤: {MailingConfig.FILES_DIR}")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –¢–∞–±–ª–∏—Ü–∞ —Ä–∞—Å—Å—ã–ª–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS bonus_mailings (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    message_text TEXT NOT NULL,
                    file_paths TEXT,
                    tariffs TEXT NOT NULL,
                    start_date DATETIME NOT NULL,
                    end_date DATETIME NOT NULL,
                    is_active BOOLEAN DEFAULT 1,
                    created_at DATETIME DEFAULT CURRENT_TIMESTAMP
                )
            ''')
            
            # –¢–∞–±–ª–∏—Ü–∞ –ª–æ–≥–æ–≤ –æ—Ç–ø—Ä–∞–≤–æ–∫
            cursor.execute('''
                CREATE TABLE IF NOT EXISTS mailing_logs (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    mailing_id INTEGER NOT NULL,
                    user_id INTEGER NOT NULL,
                    sent_at DATETIME DEFAULT CURRENT_TIMESTAMP,
                    FOREIGN KEY (mailing_id) REFERENCES bonus_mailings (id)
                )
            ''')
            
            conn.commit()
        
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ —Ä–∞—Å—Å—ã–ª–æ–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–æ–∫: {e}")

@mailing_router.message(Command("test_single_file"))
async def test_single_file(message: Message):
    """–¢–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª –∏–∑ –ø–µ—Ä–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
    try:
        mailings = bonus_mailing.get_all_mailings()
        current_time = datetime.now()
        
        test_file_path = None
        
        for mailing in mailings:
            if not mailing['is_active']:
                continue
            
            start_date = datetime.fromisoformat(mailing['start_date'])
            end_date = datetime.fromisoformat(mailing['end_date'])
            
            if start_date <= current_time <= end_date and mailing['file_paths']:
                files = json.loads(mailing['file_paths'])
                if files and os.path.exists(files[0]):
                    test_file_path = files[0]
                    break
        
        if not test_file_path:
            await message.answer("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ñ–∞–π–ª –¥–ª—è —Ç–µ—Å—Ç–∞")
            return
        
        await message.answer(f"üì§ –¢–µ—Å—Ç–∏—Ä—É—é –æ—Ç–ø—Ä–∞–≤–∫—É —Ñ–∞–π–ª–∞: {os.path.basename(test_file_path)}")
        
        # –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–æ–π –ø—É—Ç—å (—Å–∞–º—ã–π –ø—Ä–æ—Å—Ç–æ–π)
        await message.answer("üîÑ –°–ø–æ—Å–æ–± 1: –ü—Ä—è–º–æ–π –ø—É—Ç—å...")
        try:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            file_ext = os.path.splitext(test_file_path)[1].lower()
            
            if file_ext in ['.jpg', '.jpeg', '.png', '.gif']:
                await message.bot.send_photo(
                    chat_id=message.from_user.id,
                    photo=test_file_path
                )
            else:
                await message.bot.send_document(
                    chat_id=message.from_user.id,
                    document=test_file_path
                )
            await message.answer("‚úÖ –°–ø–æ—Å–æ–± 1: –£—Å–ø–µ—à–Ω–æ")
            return
        except Exception as e:
            await message.answer(f"‚ùå –°–ø–æ—Å–æ–± 1 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {str(e)}")
        
        # –°–ø–æ—Å–æ–± 2: –ë–∏–Ω–∞—Ä–Ω–æ–µ —á—Ç–µ–Ω–∏–µ —Å —è–≤–Ω—ã–º –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Ñ–∞–π–ª–∞
        await message.answer("üîÑ –°–ø–æ—Å–æ–± 2: –ë–∏–Ω–∞—Ä–Ω–æ–µ —á—Ç–µ–Ω–∏–µ...")
        try:
            with open(test_file_path, 'rb') as file:
                file_data = file.read()  # –ß–∏—Ç–∞–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ø–∞–º—è—Ç—å
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º BufferedInputFile
            from aiogram.types import BufferedInputFile
            input_file = BufferedInputFile(file_data, filename=os.path.basename(test_file_path))
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Ñ–∞–π–ª–∞ –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
            file_ext = os.path.splitext(test_file_path)[1].lower()
            
            if file_ext in ['.jpg', '.jpeg', '.png', '.gif']:
                await message.bot.send_photo(
                    chat_id=message.from_user.id,
                    photo=input_file
                )
            else:
                await message.bot.send_document(
                    chat_id=message.from_user.id,
                    document=input_file
                )
            await message.answer("‚úÖ –°–ø–æ—Å–æ–± 2: –£—Å–ø–µ—à–Ω–æ")
            
        except Exception as e2:
            await message.answer(f"‚ùå –°–ø–æ—Å–æ–± 2 –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª: {str(e2)}")
            
    except Exception as e:
        await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {str(e)}")



@mailing_router.message(Command("test_mailing_direct"))
async def test_mailing_direct(message: Message):
    """–ü—Ä—è–º–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ –ø—É—Ç—è–º"""
    if not is_admin(message.from_user.id):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.answer("üîÑ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–æ–≤...")
    
    try:
        mailings = bonus_mailing.get_all_mailings()
        current_time = datetime.now()
        
        for mailing in mailings:
            if not mailing['is_active']:
                continue
            
            start_date = datetime.fromisoformat(mailing['start_date'])
            end_date = datetime.fromisoformat(mailing['end_date'])
            
            if start_date <= current_time <= end_date:
                await message.answer(f"üìß –†–∞—Å—Å—ã–ª–∫–∞ #{mailing['id']}")
                
                # –¢–µ–∫—Å—Ç
                await message.answer("üì§ –¢–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏:")
                await message.bot.send_message(
                    chat_id=message.from_user.id,
                    text=mailing['message_text'],
                    parse_mode='HTML'
                )
                
                # –§–∞–π–ª—ã - –°–ê–ú–´–ô –ü–†–û–°–¢–û–ô –°–ü–û–°–û–ë
                if mailing['file_paths']:
                    files = json.loads(mailing['file_paths'])
                    for file_path in files:
                        if os.path.exists(file_path):
                            await message.answer(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è—é: {os.path.basename(file_path)}")
                            
                            # –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ–¥–∞–µ–º –ø—É—Ç—å –∫–∞–∫ —Å—Ç—Ä–æ–∫—É
                            await message.bot.send_document(
                                chat_id=message.from_user.id,
                                document=file_path  # –ü—Ä–æ—Å—Ç–æ —Å—Ç—Ä–æ–∫–∞ —Å –ø—É—Ç–µ–º!
                            )
                
                break  # –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—É—é
        
        await message.answer("‚úÖ –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω")
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")



# –í—ã–∑—ã–≤–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
init_mailing_system()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä
__all__ = ['mailing_router', 'auto_send_mailings']
