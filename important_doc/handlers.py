from aiogram import Router, types, F, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import logging

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ —Ç–æ–≥–æ –∂–µ –ø–∞–∫–µ—Ç–∞
from .models import consent_manager

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

consent_router = Router()

class ConsentStates(StatesGroup):
    """–°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º–∏"""
    waiting_consent = State()

@consent_router.message(Command("consent_status"))
async def consent_status_command(message: types.Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—Å–∏–π"""
    try:
        await show_consent_status(message)
    except Exception as e:
        logger.error(f"Error in consent_status_command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—Å–∏–π.")

async def request_consents(message: types.Message, user_id: int):
    """–ó–∞–ø—Ä–æ—Å —Å–æ–≥–ª–∞—Å–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å —Ç—Ä–µ–º—è –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status = consent_manager.get_user_consent_status(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è—Ç–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
        agreement_accepted = any(doc_type == 'user_agreement' and accepted for doc_type, accepted, _, _ in status)
        if not agreement_accepted:
            keyboard.append([InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="accept_agreement")])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è—Ç–∞ –ª–∏ –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        privacy_accepted = any(doc_type == 'privacy_policy' and accepted for doc_type, accepted, _, _ in status)
        if not privacy_accepted:
            keyboard.append([InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="accept_privacy")])
        
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–∞–∑–∞
        keyboard.append([InlineKeyboardButton(text="‚ùå –ù–µ –ø—Ä–∏–Ω–∏–º–∞—é", callback_data="reject_all")])
        
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        message_text = (
            "üìã <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞</b>\n"
            "<b>–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:</b>\n"
            "‚ñ™Ô∏è <a href='https://gist.githubusercontent.com/Fynjy357/38503ed0bf1ae571965d33e48a130d47/raw/94785d814d5521c3aa104b386a1cae81e783fb41/privacy_policy.txt'>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</a>\n"
            "‚ñ™Ô∏è <a href='https://gist.githubusercontent.com/Fynjy357/ccfc2f6130575fe43d4210e23aac98e9/raw/73e9496d391991c4ac570ba91eed79f2141a94b1/gistfile1.txt'>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</a>\n\n"
        )
        
        if agreement_accepted:
            message_text += "‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</b> - –ø—Ä–∏–Ω—è—Ç–æ\n"
        else:
            message_text += "üìÑ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</b> - –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è\n"
        
        if privacy_accepted:
            message_text += "‚úÖ <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b> - –ø—Ä–∏–Ω—è—Ç–∞\n"
        else:
            message_text += "üîí <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b> - –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è\n"
        
        message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        await message.answer(message_text, reply_markup=reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error in request_consents: {e}")
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Å–æ–≥–ª–∞—à–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def update_consent_message(message: types.Message, user_id: int):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º–∏ –ø–æ—Å–ª–µ –ø—Ä–∏–Ω—è—Ç–∏—è"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        status = consent_manager.get_user_consent_status(user_id)
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Ç–æ–ª—å–∫–æ —Å –æ—Å—Ç–∞–≤—à–∏–º–∏—Å—è –∫–Ω–æ–ø–∫–∞–º–∏
        keyboard = []
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è—Ç–æ –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ
        agreement_accepted = any(doc_type == 'user_agreement' and accepted for doc_type, accepted, _, _ in status)
        if not agreement_accepted:
            keyboard.append([InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ", callback_data="accept_agreement")])
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è—Ç–∞ –ª–∏ –ø–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
        privacy_accepted = any(doc_type == 'privacy_policy' and accepted for doc_type, accepted, _, _ in status)
        if not privacy_accepted:
            keyboard.append([InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å –ø–æ–ª–∏—Ç–∏–∫—É –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏", callback_data="accept_privacy")])
        
        # –í—Å–µ–≥–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–∫–∞–∑–∞
        keyboard.append([InlineKeyboardButton(text="‚ùå –ù–µ –ø—Ä–∏–Ω–∏–º–∞—é", callback_data="reject_all")])
        
        reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
        
        message_text = (
            "üìã <b>–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –±–æ—Ç–∞</b>\n"
            "<b>–Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–∞—à–µ —Å–æ–≥–ª–∞—Å–∏–µ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞–º–∏:</b>\n\n"
        )
        
        if agreement_accepted:
            message_text += "‚úÖ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</b> - –ø—Ä–∏–Ω—è—Ç–æ\n"
        else:
            message_text += "üìÑ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ</b> - –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è\n"
        
        if privacy_accepted:
            message_text += "‚úÖ <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b> - –ø—Ä–∏–Ω—è—Ç–∞\n"
        else:
            message_text += "üîí <b>–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏</b> - –æ–∂–∏–¥–∞–µ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è\n"
        
        message_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await message.edit_text(message_text, reply_markup=reply_markup, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error in update_consent_message: {e}")
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await request_consents(message, user_id)

async def show_consent_status(message: types.Message):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å —Å–æ–≥–ª–∞—Å–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    try:
        user_id = message.from_user.id
        status = consent_manager.get_user_consent_status(user_id)
        
        if not status:
            await message.answer("‚ùå –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–≥–ª–∞—Å–∏—è—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        
        response = "üìä <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–∏—Ö —Å–æ–≥–ª–∞—Å–∏–π:</b>\n\n"
        
        for doc_type, accepted, accepted_at, version in status:
            status_emoji = "‚úÖ" if accepted else "‚ùå"
            status_text = "–ü—Ä–∏–Ω—è—Ç–æ" if accepted else "–ù–µ –ø—Ä–∏–Ω—è—Ç–æ"
            
            doc_name = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ" if doc_type == "user_agreement" else "–ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏"
            
            response += f"{status_emoji} <b>{doc_name}</b> v{version}\n"
            response += f"   –°—Ç–∞—Ç—É—Å: {status_text}\n"
            if accepted_at:
                response += f"   –í—Ä–µ–º—è: {accepted_at}\n"
            response += "\n"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è—Ç—ã –ª–∏ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ–≥–ª–∞—Å–∏—è
        has_all_consents = consent_manager.has_user_consents(user_id)
        if has_all_consents:
            response += "üéâ <b>–í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ–≥–ª–∞—Å–∏—è –ø—Ä–∏–Ω—è—Ç—ã!</b>"
        else:
            response += "‚ö†Ô∏è <b>–ù–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Å–æ–≥–ª–∞—Å–∏—è –ø—Ä–∏–Ω—è—Ç—ã.</b>\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏–π."
        
        await message.answer(response, parse_mode='HTML')
        
    except Exception as e:
        logger.error(f"Error in show_consent_status: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —Å–æ–≥–ª–∞—Å–∏–π.")

async def start_registration_process(message: types.Message, state: FSMContext, bot: Bot):
    """–§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        from handlers.registration.states import RegistrationStates
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await state.update_data(registration_messages=[])
        
        # –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
        await message.answer(
            "üìù <b>–ù–∞—á–∏–Ω–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û:",
            parse_mode="HTML"
        )
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏
        await state.set_state(RegistrationStates.waiting_for_name)
        
        logger.info("=== –ü–†–û–¶–ï–°–° –†–ï–ì–ò–°–¢–†–ê–¶–ò–ò –ó–ê–ü–£–©–ï–ù ===")
        
    except Exception as e:
        logger.error(f"Error in start_registration_process: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")

@consent_router.callback_query(F.data.in_(["accept_agreement", "accept_privacy", "reject_all"]))
async def consent_callback_handler(callback_query: CallbackQuery, state: FSMContext, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫ —Å–æ–≥–ª–∞—Å–∏–π (—Ç–æ–ª—å–∫–æ —Ç—Ä–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏)"""
    try:
        user_id = callback_query.from_user.id
        ip_address = get_user_ip(callback_query) or "unknown"
        
        if callback_query.data == "accept_agreement":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
            success = consent_manager.save_consent(user_id, ip_address, "user_agreement", "1.0", True)
            
            if success:
                await callback_query.answer("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è—Ç—ã –ª–∏ –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è
                if consent_manager.has_user_consents(user_id):
                    user_data = await state.get_data()
                    wants_registration = user_data.get('wants_registration', False)
                    
                    if wants_registration:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                        await callback_query.message.edit_text(
                            "üéâ <b>–°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –≤—Å–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.</b>\n\n"
                            "–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...",
                            parse_mode='HTML'
                        )
                        
                        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥, –Ω–æ –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é!
                        await state.update_data(wants_registration=False)
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                        await start_registration_process(callback_query.message, state, bot)
                    else:
                        await callback_query.message.edit_text(
                            "üéâ <b>–°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –≤—Å–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.</b>\n\n"
                            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!",
                            parse_mode='HTML'
                        )
                        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—Å–∏–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        await state.clear()
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
                    await update_consent_message(callback_query.message, user_id)
            else:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è")
            
        elif callback_query.data == "accept_privacy":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–Ω—è—Ç–∏–µ –ø–æ–ª–∏—Ç–∏–∫–∏ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏
            success = consent_manager.save_consent(user_id, ip_address, "privacy_policy", "1.0", True)
            
            if success:
                await callback_query.answer("‚úÖ –ü–æ–ª–∏—Ç–∏–∫–∞ –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏ –ø—Ä–∏–Ω—è—Ç–∞!")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–∏–Ω—è—Ç—ã –ª–∏ –≤—Å–µ —Å–æ–≥–ª–∞—Å–∏—è
                if consent_manager.has_user_consents(user_id):
                    user_data = await state.get_data()
                    wants_registration = user_data.get('wants_registration', False)
                    
                    if wants_registration:
                        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                        await callback_query.message.edit_text(
                            "üéâ <b>–°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –≤—Å–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.</b>\n\n"
                            "–ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏...",
                            parse_mode='HTML'
                        )
                        
                        # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥, –Ω–æ –ù–ï –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é!
                        await state.update_data(wants_registration=False)
                        
                        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
                        await start_registration_process(callback_query.message, state, bot)
                    else:
                        await callback_query.message.edit_text(
                            "üéâ <b>–°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–Ω—è–ª–∏ –≤—Å–µ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è.</b>\n\n"
                            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞!",
                            parse_mode='HTML'
                        )
                        # –î–ª—è –æ–±—ã—á–Ω–æ–≥–æ –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—Å–∏–π –æ—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
                        await state.clear()
                else:
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —É–±—Ä–∞–Ω–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π
                    await update_consent_message(callback_query.message, user_id)
            else:
                await callback_query.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–æ–≥–ª–∞—Å–∏—è")
            
        elif callback_query.data == "reject_all":
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–∫–∞–∑
            consent_manager.save_consent(user_id, ip_address, "user_agreement", "1.0", False)
            consent_manager.save_consent(user_id, ip_address, "privacy_policy", "1.0", False)
            
            # –û—á–∏—â–∞–µ–º —Ñ–ª–∞–≥ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–∏ –æ—Ç–∫–∞–∑–µ
            await state.update_data(wants_registration=False)
            
            await callback_query.message.edit_text(
                "‚ùå <b>–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç –ø—Ä–∏–Ω—è—Ç–∏—è —Å–æ–≥–ª–∞—à–µ–Ω–∏–π.</b>\n\n"
                "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–∏–Ω—è—Ç—å –≤—Å–µ —É—Å–ª–æ–≤–∏—è.\n\n"
                "–í—ã–ø–æ–ª–Ω–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /start —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞.",
                parse_mode='HTML'
            )
            await state.clear()
            await callback_query.answer()
        
    except Exception as e:
        logger.error(f"Error in consent_callback_handler: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def get_user_ip(callback_query: CallbackQuery) -> str:
    """
    –ü–æ–ª—É—á–µ–Ω–∏–µ IP –∞–¥—Ä–µ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —Ä–µ–∞–ª–∏–∑—É–π—Ç–µ –ø–æ–ª—É—á–µ–Ω–∏–µ IP –∏–∑ –∑–∞–ø—Ä–æ—Å–∞
    """
    return "unknown"

# Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏–π –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ start_registration
class ConsentMiddleware:
    """Middleware –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–≥–ª–∞—Å–∏–π –ø–µ—Ä–µ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º –∫–æ–ª–±—ç–∫–∞ start_registration"""
    
    async def __call__(self, handler, event, data):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –∫–æ–ª–±—ç–∫–æ–º start_registration
        is_start_registration = False
            
        if hasattr(event, 'data') and event.data:
            if event.data == 'start_registration':
                is_start_registration = True
        
        # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–ª–±—ç–∫ start_registration, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
        if not is_start_registration:
            return await handler(event, data)
        
        # –î–ª—è –∫–æ–ª–±—ç–∫–∞ start_registration –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏—è
        user_id = event.from_user.id
        
        # –ï—Å–ª–∏ —Å–æ–≥–ª–∞—Å–∏—è —É–∂–µ –ø—Ä–∏–Ω—è—Ç—ã - —Å—Ä–∞–∑—É –≤—ã–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
        if consent_manager.has_user_consents(user_id):
            return await handler(event, data)
        
        # –ü–æ–ª—É—á–∞–µ–º FSMContext –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        state = data.get('state')
        if state:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–æ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—Ç–µ–ª –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
            await state.update_data(wants_registration=True)
        
        # –°—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —ç–∫—Ä–∞–Ω —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π
        if hasattr(event, 'message'):
            await request_consents(event.message, user_id)
        
        # –ù–µ –≤—ã–∑—ã–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π handler, —Ç–∞–∫ –∫–∞–∫ –∫–æ–ª–±—ç–∫ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω
        return

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä middleware
consent_middleware = ConsentMiddleware()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π
@consent_router.callback_query(F.data == "show_consents")
async def show_consents_callback(callback_query: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ø–æ–∫–∞–∑–∞ —Å–æ–≥–ª–∞—à–µ–Ω–∏–π"""
    await callback_query.answer()
    await request_consents(callback_query.message, callback_query.from_user.id)
    await state.set_state(ConsentStates.waiting_consent)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è
@consent_router.message(ConsentStates.waiting_consent)
async def handle_waiting_consent(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è —Å–æ–≥–ª–∞—Å–∏—è"""
    await message.answer(
        "‚è≥ <b>–û–∂–∏–¥–∞—é –≤–∞—à–µ–≥–æ —Ä–µ—à–µ–Ω–∏—è –ø–æ —Å–æ–≥–ª–∞—à–µ–Ω–∏—è–º.</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ –¥–ª—è –ø—Ä–∏–Ω—è—Ç–∏—è –∏–ª–∏ –æ—Ç–∫–∞–∑–∞ –æ—Ç —Å–æ–≥–ª–∞—à–µ–Ω–∏–π.",
        parse_mode='HTML'
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã —Å—Ç–∞—Ä—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
@consent_router.message(Command("start_registration"))
async def start_registration_command(message: types.Message, state: FSMContext, bot: Bot):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏"""
    try:
        user_id = message.from_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–≥–ª–∞—Å–∏—è
        if consent_manager.has_user_consents(user_id):
            # –°–æ–≥–ª–∞—Å–∏—è –ø—Ä–∏–Ω—è—Ç—ã - –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
            await start_registration_process(message, state, bot)
        else:
            # –°–æ–≥–ª–∞—Å–∏—è –Ω–µ –ø—Ä–∏–Ω—è—Ç—ã - —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–ª–∞–≥ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–≥–ª–∞—à–µ–Ω–∏—è
            await state.update_data(wants_registration=True)
            await request_consents(message, user_id)
            await state.set_state(ConsentStates.waiting_consent)
            
    except Exception as e:
        logger.error(f"Error in start_registration_command: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Å—Ç–æ—è–Ω–∏—è –æ–∂–∏–¥–∞–Ω–∏—è –∏–º–µ–Ω–∏ –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–æ—É—Ç–µ—Ä–æ–º
from handlers.registration.states import RegistrationStates

@consent_router.message(RegistrationStates.waiting_for_name)
async def process_name_fallback(message: types.Message, state: FSMContext, bot: Bot):
    """–§–æ–ª–±—ç–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–º–µ–Ω–∏ –Ω–∞ —Å–ª—É—á–∞–π –ø—Ä–æ–±–ª–µ–º —Å –æ—Å–Ω–æ–≤–Ω—ã–º —Ä–æ—É—Ç–µ—Ä–æ–º"""
    logger.info("=== –§–û–õ–ë–≠–ö –û–ë–†–ê–ë–û–¢–ß–ò–ö –ò–ú–ï–ù–ò –í–´–ó–í–ê–ù ===")
    
    if not message.text:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –§–ò–û —Ç–µ–∫—Å—Ç–æ–º:")
        return
    
    name = message.text.strip()
    
    if len(name) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è
    await state.update_data(name=name)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. "
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏:",
        reply_markup=get_phone_keyboard()
    )
    
    await state.set_state(RegistrationStates.waiting_for_phone)
    logger.info("=== –ò–ú–Ø –û–ë–†–ê–ë–û–¢–ê–ù–û –ß–ï–†–ï–ó –§–û–õ–ë–≠–ö ===")

def get_phone_keyboard():
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    return types.ReplyKeyboardMarkup(
        keyboard=[
            [types.KeyboardButton(text="üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è
@consent_router.message(Command("state"))
async def check_state(message: types.Message, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    current_state = await state.get_state()
    data = await state.get_data()
    await message.answer(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}\n–î–∞–Ω–Ω—ã–µ: {data}")