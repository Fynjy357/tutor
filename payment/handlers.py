from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from handlers.schedule.schedule_utils import get_today_schedule_text
from handlers.start.config import WELCOME_BACK_TEXT
from handlers.start.keyboards_start import get_registration_keyboard
from keyboards.main_menu import get_main_menu_keyboard
from .models import PaymentManager
from .yookassa_integration import YooKassaManager

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ get_today_schedule_text (–¥–æ–±–∞–≤—å—Ç–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
# from your_module import get_today_schedule_text, db

router = Router()
yookassa = YooKassaManager()

@router.callback_query(F.data == "settings")
async def settings_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    user_id = callback.from_user.id
    payment_info = await PaymentManager.get_payment_info(user_id)
    
    if payment_info and payment_info['is_active']:
        message_text = f"üí∞ **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏**\n\n" \
                      f"‚úÖ –°–µ—Ä–≤–∏—Å –æ–ø–ª–∞—á–µ–Ω\n" \
                      f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {payment_info['valid_until']}\n" \
                      f"üí≥ –¢–∞—Ä–∏—Ñ: {payment_info['tariff']}\n\n" \
                      f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:"
    else:
        message_text = "‚ùå **–°–µ—Ä–≤–∏—Å –Ω–µ –æ–ø–ª–∞—á–µ–Ω**\n\n" \
                      "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞", callback_data="payment_menu")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
    ])
    
    await callback.message.edit_text(message_text, reply_markup=keyboard, parse_mode='Markdown')
    await callback.answer()

@router.callback_query(F.data == "payment_menu")
async def payment_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –æ–ø–ª–∞—Ç—ã"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ 1 –º–µ—Å—è—Ü - 120 —Ä—É–±", callback_data="payment_1month")],
        [InlineKeyboardButton(text="üìÖ 6 –º–µ—Å—è—Ü–µ–≤ - 650 —Ä—É–±", callback_data="payment_6months")],
        [InlineKeyboardButton(text="üìÖ 1 –≥–æ–¥ - 1000 —Ä—É–±", callback_data="payment_1year")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
    ])  # ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ back_to_settings
    
    text = "üí≥ **–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n" \
           "‚Ä¢ 1 –º–µ—Å—è—Ü - 120 —Ä—É–±–ª–µ–π\n" \
           "‚Ä¢ 6 –º–µ—Å—è—Ü–µ–≤ - 650 —Ä—É–±–ª–µ–π (‚âà108 —Ä—É–±/–º–µ—Å)\n" \
           "‚Ä¢ 1 –≥–æ–¥ - 1000 —Ä—É–±–ª–µ–π (‚âà83 —Ä—É–±/–º–µ—Å)\n\n" \
           "üí∞ **–≠–∫–æ–Ω–æ–º–∏—è –ø—Ä–∏ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ!**"
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
    await callback.answer()

@router.callback_query(F.data.startswith("payment_"))
async def process_payment_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    tariff_type = callback.data
    
    tariffs = {
        "payment_1month": {"amount": 120, "days": 30, "name": "1 –º–µ—Å—è—Ü"},
        "payment_6months": {"amount": 650, "days": 180, "name": "6 –º–µ—Å—è—Ü–µ–≤"},
        "payment_1year": {"amount": 1000, "days": 365, "name": "1 –≥–æ–¥"}
    }
    
    if tariff_type in tariffs:
        tariff = tariffs[tariff_type]
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data({
            "selected_tariff": tariff_type,
            "amount": tariff["amount"],
            "days": tariff["days"],
            "tariff_name": tariff["name"]
        })
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
        payment_url = await yookassa.create_payment(
            amount=tariff["amount"],
            user_id=callback.from_user.id,
            tariff_name=tariff["name"],
            tariff_days=tariff["days"]
        )
        
        if payment_url:
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)],
                [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_payment")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="payment_menu")]
            ])
            
            text = f"üí≥ **–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞: {tariff['name']}**\n\n" \
                  f"–°—É–º–º–∞: {tariff['amount']} —Ä—É–±.\n" \
                  f"–°—Ä–æ–∫: {tariff['days']} –¥–Ω–µ–π\n\n" \
                  f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:"
            
            await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
        else:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="payment_menu")]
                ])
            )
    
    await callback.answer()

@router.callback_query(F.data == "check_payment")
async def check_payment_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã"""
    data = await state.get_data()
    
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ API –ÆKassa
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∏–º–∏—Ç–∏—Ä—É–µ–º —É—Å–ø–µ—à–Ω—É—é –æ–ø–ª–∞—Ç—É
    
    if data:
        success = await PaymentManager.update_subscription(
            user_id=callback.from_user.id,
            days=data['days'],
            tariff=data['tariff_name']
        )
        
        if success:
            text = f"‚úÖ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n" \
                  f"–í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ {data['days']} –¥–Ω–µ–π.\n" \
                  f"–¢–∞—Ä–∏—Ñ: {data['tariff_name']}\n\n" \
                  f"–¢–µ–ø–µ—Ä—å –≤–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ–ª–Ω—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª —Å–µ—Ä–≤–∏—Å–∞!"
        else:
            text = "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    else:
        text = "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –æ–± –æ–ø–ª–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤—ã–±—Ä–∞—Ç—å —Ç–∞—Ä–∏—Ñ –∑–∞–Ω–æ–≤–æ."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
    ])  # ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ back_to_main_menu
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode='Markdown')
    await callback.answer()

@router.callback_query(F.data == "back_to_settings")
async def back_to_settings_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    await settings_handler(callback, state)

@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    # –í–ê–ñ–ù–û: –†–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —ç—Ç–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π:
    from database import db
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    tutor = db.get_tutor_by_telegram_id(callback.from_user.id)
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–ª –ø—Ä–æ–±–ª–µ–º–Ω—ã–µ —á–∞—Å—Ç–∏:
    if not tutor:
        try:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞",
                parse_mode="HTML"
            )
        except TelegramBadRequest:
            await callback.message.answer(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞",
                parse_mode="HTML"
            )
        return
    
    tutor_id = tutor[0]
    schedule_text = await get_today_schedule_text(tutor_id)
    
    # –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    try:
        await callback.message.edit_text(
            WELCOME_BACK_TEXT.format(tutor_name=tutor[2], schedule_text=schedule_text),
            reply_markup=get_main_menu_keyboard(),
            parse_mode="HTML"
        )
    except TelegramBadRequest:
        await callback.message.answer(
            WELCOME_BACK_TEXT.format(tutor_name=tutor[2], schedule_text=schedule_text),
            reply_markup=get_main_menu_keyboard(),
            parse_mode="HTML"
        )
    
    await callback.answer()