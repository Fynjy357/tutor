from datetime import datetime
from aiogram import types, Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
from handlers.start.welcome import show_main_menu
from payment.config import TARIF
from .models import PaymentManager
from .yookassa_integration import YooKassaManager
import logging
from handlers.schedule.planner.timer.planner_manager import planner_manager

logger = logging.getLogger(__name__)
router = Router()
yookassa = YooKassaManager()

async def safe_edit_message(message, text, reply_markup=None, parse_mode=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ 'message not modified'
    """
    try:
        await message.edit_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        return True
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            return False
        else:
            logger.error(f"Error editing message: {e}")
            return False
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        return False

async def get_settings_message(user_id: int) -> tuple:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—Å—Ç –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
    payment_info = await PaymentManager.get_payment_info(user_id)
    logger.info(f"Payment info for user {user_id}: {payment_info}")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –µ—Å–ª–∏ –µ—Å—Ç—å valid_until, –Ω–æ is_active = False
    if payment_info and payment_info.get('valid_until') and not payment_info.get('is_active', False):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞
        try:
            valid_until = payment_info['valid_until']
            if isinstance(valid_until, str):
                valid_until = datetime.strptime(valid_until, '%Y-%m-%d %H:%M:%S')
            
            if valid_until > datetime.now():
                # –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞, –Ω–æ –ø–æ–º–µ—á–µ–Ω–∞ –∫–∞–∫ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞—è - –∏—Å–ø—Ä–∞–≤–ª—è–µ–º
                message_text = f"üí∞ **–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏**\n\n" \
                              f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n" \
                              f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {valid_until.strftime('%d.%m.%Y %H:%M')}\n" \
                              f"üí≥ –¢–∞—Ä–∏—Ñ: {payment_info.get('tariff', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n" \
                              f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:"
            else:
                message_text = "‚ùå **–°–µ—Ä–≤–∏—Å –Ω–µ –æ–ø–ª–∞—á–µ–Ω**\n\n" \
                              "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
        except:
            message_text = "‚ùå **–°–µ—Ä–≤–∏—Å –Ω–µ –æ–ø–ª–∞—á–µ–Ω**\n\n" \
                          "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
    
    elif payment_info and payment_info.get('is_active', False):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è –∫—Ä–∞—Å–∏–≤–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        valid_until = payment_info['valid_until']
        if isinstance(valid_until, str):
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ, –ø—Ä–µ–æ–±—Ä–∞–∑—É–µ–º
            try:
                valid_until = datetime.strptime(valid_until, '%Y-%m-%d %H:%M:%S')
            except:
                pass
        
        if isinstance(valid_until, datetime):
            formatted_date = valid_until.strftime('%d.%m.%Y %H:%M')
        else:
            formatted_date = str(valid_until)
        
        message_text = f"**–°—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏**\n\n" \
                      f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞\n" \
                      f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {formatted_date}\n" \
                      f"üí≥ –¢–∞—Ä–∏—Ñ: {payment_info.get('tariff', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n" \
                      f"–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É:"
    else:
        message_text = "‚ùå **–°–µ—Ä–≤–∏—Å –Ω–µ –æ–ø–ª–∞—á–µ–Ω**\n\n" \
                      "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–æ–ª–Ω–æ–º—É —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É."
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞", callback_data="payment_menu")],
        # [InlineKeyboardButton(text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å", callback_data="settings")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_main_menu")]
    ])
    
    return message_text, keyboard

@router.callback_query(F.data == "settings")
async def settings_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π"""
    try:
        user_id = callback.from_user.id
        logger.info(f"Settings handler called for user {user_id}")
        
        # –£–ë–†–ê–õ –û–¢–õ–ê–î–û–ß–ù–´–ô –í–´–ó–û–í - –æ–Ω –≤—ã–∑—ã–≤–∞–ª –æ—à–∏–±–∫—É
        # await PaymentManager.debug_check_payments(user_id)
        
        # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        message_text, keyboard = await get_settings_message(user_id)
        
        # –í—Å–µ–≥–¥–∞ –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å
        success = await safe_edit_message(
            callback.message,
            text=message_text,
            reply_markup=keyboard,
            parse_mode='Markdown'
        )
        
        if success:
            await callback.answer("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏")
        else:
            await callback.answer("‚úÖ –°—Ç–∞—Ç—É—Å –∞–∫—Ç—É–∞–ª–µ–Ω")
        
    except Exception as e:
        logger.error(f"Error in settings_handler: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫", show_alert=True)

@router.callback_query(F.data == "payment_menu")
async def payment_menu_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ú–µ–Ω—é –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞ –æ–ø–ª–∞—Ç—ã"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ 1 –º–µ—Å—è—Ü - 120 —Ä—É–±", callback_data="payment_1month")],
        [InlineKeyboardButton(text="üìÖ 6 –º–µ—Å—è—Ü–µ–≤ - 650 —Ä—É–±", callback_data="payment_6months")],
        [InlineKeyboardButton(text="üìÖ 1 –≥–æ–¥ - 1000 —Ä—É–±", callback_data="payment_1year")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
    ])
     
    text = TARIF
    
    await safe_edit_message(
        callback.message,
        text=text,
        reply_markup=keyboard,
        parse_mode='Markdown'
    )
    await callback.answer()

@router.callback_query(F.data.startswith("payment_"))
async def process_payment_handler(callback: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∞—Ä–∏—Ñ–∞"""
    try:
        tariff_type = callback.data
        
        tariffs = {
            "payment_1month": {"amount": 120, "days": 30, "name": "1 –º–µ—Å—è—Ü"},
            "payment_6months": {"amount": 650, "days": 180, "name": "6 –º–µ—Å—è—Ü–µ–≤"},
            "payment_1year": {"amount": 1000, "days": 365, "name": "1 –≥–æ–¥"}
        }
        
        if tariff_type in tariffs:
            tariff = tariffs[tariff_type]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.update_data({
                "selected_tariff": tariff_type,
                "amount": tariff["amount"],
                "days": tariff["days"],
                "tariff_name": tariff["name"]
            })
            
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂ –≤ –ÆKassa
            payment_url = await yookassa.create_payment(
                amount=tariff["amount"],
                user_id=callback.from_user.id,
                tariff_name=tariff["name"],
                tariff_days=tariff["days"]
            )
            
            if payment_url:
                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üí≥ –ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ", url=payment_url)],
                    [InlineKeyboardButton(text="‚úÖ –Ø –æ–ø–ª–∞—Ç–∏–ª", callback_data="check_payment")],
                    [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Ç–∞—Ä–∏—Ñ–∞–º", callback_data="payment_menu")]
                ])
                
                text = f"üí≥ **–û–ø–ª–∞—Ç–∞ —Ç–∞—Ä–∏—Ñ–∞: {tariff['name']}**\n\n" \
                      f"–°—É–º–º–∞: {tariff['amount']} —Ä—É–±.\n" \
                      f"–°—Ä–æ–∫: {tariff['days']} –¥–Ω–µ–π\n\n" \
                      f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ:"
                
                await safe_edit_message(
                    callback.message,
                    text=text,
                    reply_markup=keyboard,
                    parse_mode='Markdown'
                )
            else:
                await safe_edit_message(
                    callback.message,
                    text="‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                    reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="payment_menu")]
                    ])
                )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in process_payment_handler: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)

@router.callback_query(F.data == "check_payment")
async def check_payment_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã —á–µ—Ä–µ–∑ API –ÆKassa —Å –ø—Ä–æ–¥–ª–µ–Ω–∏–µ–º –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        user_id = callback.from_user.id
        logger.info(f"Checking payment for user {user_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–ª–∞—Ç–µ–∂ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        payment_info = await yookassa.get_last_payment(user_id)
        logger.info(f"Payment info from YooKassa: {payment_info}")
        
        if not payment_info:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        status = payment_info.get('status')
        
        if status == 'succeeded':
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ç–∞—Ä–∏—Ñ–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
            data = await state.get_data()
            if not data:
                await callback.answer("‚ùå –î–∞–Ω–Ω—ã–µ –æ —Ç–∞—Ä–∏—Ñ–µ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
                return
            
            tariff_days = data.get('days', 30)
            tariff_name = data.get('tariff_name', '1 –º–µ—Å—è—Ü')
            amount = data.get('amount', 0)
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞
            days = int(payment_info['metadata']['days'])
            
            # –°–û–ó–î–ê–ï–ú –ó–ê–ü–ò–°–¨ –í –¢–ê–ë–õ–ò–¶–ï PAYMENTS
            payment_id = payment_info.get('id', f"manual_{datetime.now().timestamp()}")
            success = await PaymentManager.create_payment_record(
                user_id=user_id,
                payment_id=payment_id,
                tariff_name=tariff_name,
                amount=amount,
                status='succeeded',
                days=days  # ‚Üê –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
            )
            
            if not success:
                logger.error(f"Failed to create payment record for user {user_id}")
            
            # ‚úÖ –í–°–¢–ê–í–õ–Ø–ï–ú –ó–î–ï–°–¨ - –ù–ï–ú–ï–î–õ–ï–ù–ù–ê–Ø –ê–ö–¢–ò–í–ê–¶–ò–Ø –ü–õ–ê–ù–ï–†–ê
            # –ü–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è/–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏:
            await PaymentManager.activate_planner_immediately(user_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            current_subscription = await PaymentManager.get_payment_info(user_id)
            logger.info(f"Current subscription after payment: {current_subscription}")
            
            if current_subscription and current_subscription.get('is_active', False):
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏
                valid_until_str = current_subscription.get('valid_until')
                if valid_until_str:
                    try:
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ datetime –æ–±—ä–µ–∫—Ç
                        valid_until = datetime.strptime(valid_until_str, '%Y-%m-%d %H:%M:%S')
                        formatted_date = valid_until.strftime('%d.%m.%Y')
                    except:
                        formatted_date = valid_until_str
                else:
                    formatted_date = "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∞"
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                text = (
                    f"‚úÖ –í—ã –ø—Ä–æ–¥–ª–∏–ª–∏ –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ {days} –¥–Ω–µ–π\n\n"
                    f"üìÖ –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {formatted_date}\n"
                    f"üí≥ –¢–∞—Ä–∏—Ñ: {tariff_name}\n\n"
                    f"üéâ –í–∞–º –¥–æ—Å—Ç—É–ø–µ–Ω –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª!"
                )
                
                # ‚úÖ –í–°–¢–ê–í–õ–Ø–ï–ú –ó–î–ï–°–¨ - –°–û–û–ë–©–ï–ù–ò–ï –û–ë –ê–ö–¢–ò–í–ê–¶–ò–ò –ü–õ–ê–ù–ï–†–ê
                await callback.message.answer(
                    "‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ! –ü–ª–∞–Ω–µ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω.\n"
                    "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–¥–∞—á–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤."
                )
            else:
                text = "‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ä–æ–±–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚óÄÔ∏è –í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="back_to_main_menu")]
            ])
            
            await safe_edit_message(
                callback.message,
                text=text,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
            await callback.answer()
            
        elif status == 'pending':
            await callback.answer("‚è≥ –ü–ª–∞—Ç–µ–∂ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ", show_alert=True)
        elif status in ['canceled', 'failed']:
            await callback.answer("‚ùå –ü–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª", show_alert=True)
        else:
            await callback.answer("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Å—Ç–∞—Ç—É—Å –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)
            
    except Exception as e:
        logger.error(f"Error in check_payment_handler: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞", show_alert=True)


@router.callback_query(F.data == "back_to_settings")
async def back_to_settings_handler(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º"""
    await settings_handler(callback, state)

@router.callback_query(F.data == "back_to_main_menu")
async def back_to_main_menu_handler(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    try:
        from database import Database
        
        db = Database()
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM tutors WHERE telegram_id = ?", (callback.from_user.id,))
            tutor = cursor.fetchone()
        
        if not tutor:
            await safe_edit_message(
                callback.message,
                text="‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞",
                parse_mode="HTML"
            )
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await show_main_menu(
            chat_id=callback.from_user.id,
            callback_query=callback
        )
        
    except Exception as e:
        logger.error(f"Error in back_to_main_menu_handler: {e}", exc_info=True)
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", show_alert=True)
    
    await callback.answer()

async def handle_payment_success(telegram_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã - –≤–∫–ª—é—á–∞–µ–º –ø–ª–∞–Ω–µ—Ä"""
    success = await planner_manager.update_tutor_planner_status(telegram_id, True)
    if success:
        logger.info(f"–ü–ª–∞–Ω–µ—Ä –≤–∫–ª—é—á–µ–Ω –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {telegram_id} –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–µ—Ä–∞ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {telegram_id}")

async def handle_payment_expired(telegram_id: int):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏ - –æ—Ç–∫–ª—é—á–∞–µ–º –ø–ª–∞–Ω–µ—Ä"""
    success = await planner_manager.update_tutor_planner_status(telegram_id, False)
    if success:
        logger.info(f"–ü–ª–∞–Ω–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {telegram_id} (–ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞)")
    else:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –ø–ª–∞–Ω–µ—Ä–∞ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {telegram_id}")