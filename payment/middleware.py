from aiogram import BaseMiddleware
from aiogram.types import Message, CallbackQuery, Update
from typing import Callable, Dict, Any, Awaitable
from .models import PaymentManager

class SubscriptionMiddleware(BaseMiddleware):
    def __init__(self):
        # ‚≠êÔ∏è –°–ü–ò–°–û–ö –ü–†–ï–ú–ò–£–ú-–§–£–ù–ö–¶–ò–ô (—Ç–æ–ª—å–∫–æ –∏—Ö –ø—Ä–æ–≤–µ—Ä—è–µ–º)
        self.premium_commands = [
            '/premium', '/pro', '/expert', '/generate', '/analyze',
            '/deep', '/advanced', '/custom'
        ]
        
        self.premium_callbacks = [
            'groups', 'lesson_type_group', 'generate_', 'analyze_', 'deep_',
            'custom_', 'expert_', 'download_', 'export_'
        ]

    async def __call__(
        self,
        handler: Callable[[Update, Dict[str, Any]], Awaitable[Any]],
        event: Update,
        data: Dict[str, Any]
    ) -> Any:
        real_event = None
        
        if event.message:
            real_event = event.message
        elif event.callback_query:
            real_event = event.callback_query
        
        if not real_event:
            return await handler(event, data)
        
        # üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏–µ–π
        is_premium_feature = False
        
        if (isinstance(real_event, Message) and real_event.text and
            any(real_event.text.startswith(cmd) for cmd in self.premium_commands)):
            is_premium_feature = True
        
        elif (isinstance(real_event, CallbackQuery) and real_event.data and
              any(real_event.data.startswith(cb) for cb in self.premium_callbacks)):
            is_premium_feature = True
        
        # üÜì –ï—Å–ª–∏ —ç—Ç–æ –ù–ï –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å—Ä–∞–∑—É
        if not is_premium_feature:
            return await handler(event, data)
        
        # ‚≠êÔ∏è –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è - –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        user_id = real_event.from_user.id
        has_active_subscription = await PaymentManager.check_subscription(user_id)
        
        if not has_active_subscription:
            if isinstance(real_event, Message):
                await real_event.answer(
                    "‚ùå –≠—Ç–æ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è! –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
                    "üíé –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö.",
                    reply_markup=data.get('reply_markup')
                )
            elif isinstance(real_event, CallbackQuery):
                # ‚ö°Ô∏è –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, –ø–æ—Ç–æ–º –ø–æ–∫–∞–∑—ã–≤–∞–µ–º alert
                await real_event.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
                await real_event.message.answer(
                    "‚ùå –≠—Ç–æ –ø—Ä–µ–º–∏—É–º-—Ñ—É–Ω–∫—Ü–∏—è! –¢—Ä–µ–±—É–µ—Ç—Å—è –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
                    "üíé –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö."
                )
            return
        
        return await handler(event, data)