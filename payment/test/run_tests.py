#!/usr/bin/env python3
import pytest
import sys
import os
import logging

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —Ç–µ—Å—Ç–æ–≤
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('payment_tests.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)

def run_tests():
    """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–æ–¥—É–ª—è"""
    logger = logging.getLogger('TestRunner')
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–æ–¥—É–ª—è")
    
    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–∞–º (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –ø—É—Ç—å)
    test_path = os.path.dirname(__file__)
    
    # –ê—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è pytest
    pytest_args = [
        test_path,
        "-v",           # –ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥
        "--tb=short",   # –ö–æ—Ä–æ—Ç–∫–∏–π traceback
        "--no-header",  # –ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        "--color=yes",  # –¶–≤–µ—Ç–Ω–æ–π –≤—ã–≤–æ–¥
        "-x"            # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ø–µ—Ä–≤–æ–π –æ—à–∏–±–∫–µ
    ]
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    exit_code = pytest.main(pytest_args)
    
    # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    if exit_code == 0:
        logger.info("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
    else:
        logger.error(f"‚ùå –¢–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π. –ö–æ–¥ –≤–æ–∑–≤—Ä–∞—Ç–∞: {exit_code}")
    
    return exit_code

def run_specific_test(test_file, test_function=None):
    """–ó–∞–ø—É—Å–∫ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞"""
    logger = logging.getLogger('TestRunner')
    
    test_path = os.path.join(os.path.dirname(__file__), test_file)
    
    if test_function:
        test_path += f"::{test_function}"
    
    logger.info(f"üîç –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: {test_path}")
    
    pytest_args = [
        test_path,
        "-v",
        "--tb=short",
        "--no-header",
        "--color=yes"
    ]
    
    exit_code = pytest.main(pytest_args)
    return exit_code

def run_test_coverage():
    """–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø–æ–∫—Ä—ã—Ç–∏–µ–º –∫–æ–¥–∞"""
    logger = logging.getLogger('TestRunner')
    logger.info("üìä –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–∫—Ä—ã—Ç–∏—è")
    
    test_path = os.path.dirname(__file__)
    source_path = os.path.join(os.path.dirname(__file__), '..')
    
    pytest_args = [
        test_path,
        "-v",
        "--tb=short",
        "--cov=" + source_path,
        "--cov-report=term",
        "--cov-report=html:coverage_report"
    ]
    
    exit_code = pytest.main(pytest_args)
    
    if exit_code == 0:
        logger.info("‚úÖ –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        logger.info("üìÅ –û—Ç—á–µ—Ç –æ –ø–æ–∫—Ä—ã—Ç–∏–∏: coverage_report/index.html")
    else:
        logger.error(f"‚ùå –¢–µ—Å—Ç—ã —Å –ø–æ–∫—Ä—ã—Ç–∏—è –∑–∞–≤–µ—Ä—à–∏–ª–∏—Å—å —Å –æ—à–∏–±–∫–æ–π")
    
    return exit_code

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description='–ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ –º–æ–¥—É–ª—è')
    parser.add_argument('--test', '-t', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª')
    parser.add_argument('--function', '-f', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é —Ç–µ—Å—Ç–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é')
    parser.add_argument('--coverage', '-c', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–∫—Ä—ã—Ç–∏—è')
    parser.add_argument('--all', '-a', action='store_true', help='–ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)')
    
    args = parser.parse_args()
    
    if args.test:
        exit_code = run_specific_test(args.test, args.function)
    elif args.coverage:
        exit_code = run_test_coverage()
    else:
        exit_code = run_tests()
    
    sys.exit(exit_code)