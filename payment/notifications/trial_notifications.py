import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Set
from aiogram import Bot
from database import Database

logger = logging.getLogger(__name__)

class TrialNotificationManager:
    def __init__(self, bot: Bot):
        self.bot = bot
        self.db = Database()
        self.sent_notifications: Set[int] = set()  # –•—Ä–∞–Ω–∏–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ

    async def get_users_with_expiring_trial(self, hours_before: int = 24) -> List[dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫–∞–µ—Ç —á–µ—Ä–µ–∑ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤"""
        try:
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                
                # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –≤—Ä–µ–º—è, —á–µ—Ä–µ–∑ –∫–æ—Ç–æ—Ä–æ–µ –∏—Å—Ç–µ–∫–∞–µ—Ç –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
                expiration_time = datetime.now() + timedelta(hours=hours_before)
                
                query = """
                SELECT p.user_id, p.valid_until, t.telegram_id, t.full_name
                FROM payments p
                JOIN tutors t ON p.user_id = t.telegram_id
                WHERE p.tariff_name = '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
                AND p.status = 'succeeded'
                AND p.valid_until BETWEEN datetime('now') AND ?
                """
                
                cursor.execute(query, (expiration_time.strftime('%Y-%m-%d %H:%M:%S'),))
                users = cursor.fetchall()
                
                return users
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º: {e}")
            return []

    async def send_trial_expiration_notification(self, user_id: int, telegram_id: int, full_name: str, valid_until: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —ç—Ç–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            if user_id in self.sent_notifications:
                logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                return False
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è
            end_date = datetime.strptime(valid_until, '%Y-%m-%d %H:%M:%S')
            formatted_date = end_date.strftime('%d.%m.%Y –≤ %H:%M')
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ–ø–ª–∞—Ç—ã
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üí≥ –û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="payment_menu")]
            ])
            
            message_text = (
                f"üëã <b>{full_name}, –±–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ, —á—Ç–æ –≤—ã–±—Ä–∞–ª–∏ –Ω–∞—à —Å–µ—Ä–≤–∏—Å!</b>\n\n"
                f"‚è∞ –í–∞—à –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫–∞–µ—Ç <b> {formatted_date}.</b>\n\n"
                f"‚ú® –ü–æ–Ω—Ä–∞–≤–∏–ª—Å—è –≤–µ—Å—å —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª? \n –ù–µ —Ä–∞—Å—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å —Å –Ω–∏–º!\n"
                f"–û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ª–µ–≥–∫–æ —É–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä—É–ø–ø–æ–≤—ã–º–∏ –∑–∞–Ω—è—Ç–∏—è–º–∏, —É—á–µ–Ω–∏–∫–∞–º–∏ –∏ —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.\n\n"
                f"<b>–ú—ã —Ä–∞—Å—Ç–µ–º –∏ —Ä–∞–∑–≤–∏–≤–∞–µ–º—Å—è –±–ª–∞–≥–æ–¥–∞—Ä—è —Ç–∞–∫–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–∞–∫ –≤—ã! üíô.</b>"
            )
            
            await self.bot.send_message(
                chat_id=telegram_id,
                text=message_text,
                reply_markup=keyboard,
                parse_mode='HTML'
            )
            
            # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ
            self.sent_notifications.add(user_id)
            logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            return True
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
            return False

    async def check_and_send_trial_notifications(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
        try:
            users = await self.get_users_with_expiring_trial(24)
            
            if not users:
                logger.info("–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º")
                return
            
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º")
            
            sent_count = 0
            for user in users:
                success = await self.send_trial_expiration_notification(
                    user_id=user['user_id'],
                    telegram_id=user['telegram_id'],
                    full_name=user['full_name'],
                    valid_until=user['valid_until']
                )
                if success:
                    sent_count += 1
                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                await asyncio.sleep(0.5)
            
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")

    async def cleanup_expired_notifications(self):
        """–û—á–∏—â–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, —É –∫–æ—Ç–æ—Ä—ã—Ö —É–∂–µ –∏—Å—Ç–µ–∫ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥"""
        try:
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º –ø—Ä–æ–±–Ω—ã–º –ø–µ—Ä–∏–æ–¥–æ–º
                cursor.execute('''
                SELECT user_id FROM payments 
                WHERE tariff_name = '–ë–µ—Å–ø–ª–∞—Ç–Ω—ã–π –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥'
                AND status = 'succeeded'
                AND valid_until < datetime('now')
                ''')
                
                expired_users = [row['user_id'] for row in cursor.fetchall()]
                
                # –£–¥–∞–ª—è–µ–º –∏–∑ –ø–∞–º—è—Ç–∏
                for user_id in expired_users:
                    if user_id in self.sent_notifications:
                        self.sent_notifications.remove(user_id)
                        logger.info(f"–û—á–∏—â–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} (–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∏—Å—Ç–µ–∫)")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {e}")