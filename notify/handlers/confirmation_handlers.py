import logging
from aiogram import Dispatcher, types, F

logger = logging.getLogger(__name__)

async def handle_confirmation_callback(callback_query: types.CallbackQuery, notification_manager, bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    data = callback_query.data
    user_id = callback_query.from_user.id

    # –î–û–ë–ê–í–¨–¢–ï –≠–¢–û –î–õ–Ø –î–ï–ë–ê–ì–ê
    logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω callback: {data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    
    try:
        if data.startswith('confirm_'):
            # –§–æ—Ä–º–∞—Ç: confirm_{lesson_id}_{confirmation_id}
            parts = data.split('_')
            if len(parts) >= 3:
                confirmation_id = parts[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
                notification_manager.mark_confirmation(confirmation_id, True)
                await callback_query.answer("‚úÖ –ó–∞–Ω—è—Ç–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!")
                await callback_query.message.edit_text(
                    f"‚úÖ –í—ã –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ –∑–∞–Ω—è—Ç–∏–∏\n"
                    f"–ñ–¥–µ–º –≤–∞—Å –Ω–∞ —É—Ä–æ–∫–µ!",
                    reply_markup=None
                )
            
        elif data.startswith('cancel_'):
            # –§–æ—Ä–º–∞—Ç: cancel_{lesson_id}_{confirmation_id}
            parts = data.split('_')
            if len(parts) >= 3:
                confirmation_id = parts[-1]  # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —á–∞—Å—Ç—å
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ
                notification_manager.mark_confirmation(confirmation_id, False)
                await callback_query.answer("‚ùå –ó–∞–Ω—è—Ç–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
                await callback_query.message.edit_text(
                    f"‚ùå –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ —É—á–∞—Å—Ç–∏–µ –≤ –∑–∞–Ω—è—Ç–∏–∏\n"
                    f"–°–≤—è–∂–∏—Ç–µ—Å—å —Å –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–º –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞",
                    reply_markup=None
                )
            
        elif data.startswith('reschedule_'):
            # –§–æ—Ä–º–∞—Ç: reschedule_{lesson_id}_{confirmation_id}
            parts = data.split('_')
            if len(parts) >= 3:
                confirmation_id = parts[-1]
                lesson_id = parts[1]
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –Ω–∞ "–ø–µ—Ä–µ–Ω–æ—Å"
                notification_manager.mark_confirmation(confirmation_id, 2)
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
                try:
                    # –ü–æ–ª—É—á–∞–µ–º chat_id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è —ç—Ç–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
                    teacher_chat_id = notification_manager.get_teacher_chat_id_by_confirmation(confirmation_id)
                    
                    if teacher_chat_id:
                        await bot.send_message(
                            chat_id=teacher_chat_id,
                            text=f"üîÑ –°—Ç—É–¥–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–Ω—è—Ç–∏—è\n"
                                 f"ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {confirmation_id}\n"
                                 f"ID –∑–∞–Ω—è—Ç–∏—è: {lesson_id}"
                        )
                        logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É {teacher_chat_id}")
                    else:
                        logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω chat_id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è {confirmation_id}")
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É: {e}")
                
                await callback_query.answer("üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                await callback_query.message.edit_text(
                    f"üîÑ –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–µ—Ä–µ–Ω–æ—Å –∑–∞–Ω—è—Ç–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—é\n"
                    f"–° –≤–∞–º–∏ —Å–≤—è–∂—É—Ç—Å—è –¥–ª—è —Å–æ–≥–ª–∞—Å–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏",
                    reply_markup=None
                )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

def register_confirmation_handlers(dp: Dispatcher, notification_manager, bot):
    """–†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫"""
    
    # –ï–¥–∏–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–π
    async def confirmation_handler(callback_query: types.CallbackQuery):
        await handle_confirmation_callback(callback_query, notification_manager, bot)
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–∏–ø–∞ callback
    dp.callback_query.register(
        confirmation_handler,
        F.data.startswith("confirm_")
    )
    
    dp.callback_query.register(
        confirmation_handler,
        F.data.startswith("cancel_")
    )
    
    dp.callback_query.register(
        confirmation_handler,
        F.data.startswith("reschedule_")
    )
    
    logger.info("‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã")