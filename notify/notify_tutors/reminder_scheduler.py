# notify/notify_tutors/reminder_scheduler.py
import asyncio
import logging
from datetime import datetime
from database import db  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö

logger = logging.getLogger(__name__)

class ReminderScheduler:
    def __init__(self, bot):
        self.bot = bot
        self.is_running = False
        self.task = None

    async def start(self):
        """–ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        if self.is_running:
            logger.warning("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
            
        self.is_running = True
        logger.info("üöÄ –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
        
        # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
        reset_count = db.reset_reminders_for_past_lessons()
        logger.info(f"–°–±—Ä–æ—à–µ–Ω–æ {reset_count} –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–Ω—è—Ç–∏–π")
        
        self.task = asyncio.create_task(self._scheduler_loop())
        return self.task

    async def _scheduler_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —Å –æ—Ç–ø—Ä–∞–≤–∫–æ–π –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
        try:
            while self.is_running:
                try:
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    await self.check_and_send_reminders()
                    await asyncio.sleep(300)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
                    
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞: {e}")
                    await asyncio.sleep(60)
                    
        except asyncio.CancelledError:
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É")
        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ: {e}")
        finally:
            self.is_running = False
            logger.info("–¶–∏–∫–ª –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω")

    async def check_and_send_reminders(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö –≤ –±–ª–∏–∂–∞–π—à–∏–µ 60 –º–∏–Ω—É—Ç"""
        try:
            current_time = datetime.now().strftime("%H:%M:%S")
            logger.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ {current_time}")
            
            lessons = db.get_lessons_for_reminder()
            
            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π
            sent_group_lessons = {}
            
            if lessons:
                logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(lessons)} –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
                
                for lesson in lessons:
                    try:
                        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∑–∞–Ω—è—Ç–∏–µ –≥—Ä—É–ø–ø–æ–≤—ã–º
                        group_id = lesson.get('group_id')
                        
                        if group_id:  # –≠—Ç–æ –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
                            if group_id not in sent_group_lessons:
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥—Ä—É–ø–ø–æ–≤–æ–º –∑–∞–Ω—è—Ç–∏–∏
                                await self.send_group_lesson_reminder(lesson)
                                sent_group_lessons[group_id] = True
                                
                                # –ü–æ–º–µ—á–∞–µ–º –í–°–ï –∑–∞–Ω—è—Ç–∏—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ
                                self.mark_group_lessons_as_sent(group_id)
                                logger.info(f"‚úÖ –ì—Ä—É–ø–ø–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –≥—Ä—É–ø–ø—ã #{group_id}")
                            else:
                                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –¥—É–±–ª–∏—Ä—É—é—â–µ–µ –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ #{group_id}")
                        else:
                            # –≠—Ç–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
                            await self.send_lesson_reminder(lesson)
                            if db.mark_reminder_sent(lesson['lesson_id']):
                                logger.info(f"‚úÖ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è #{lesson['lesson_id']}")
                            else:
                                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–º–µ—Ç–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è #{lesson['lesson_id']}")
                                
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è #{lesson['lesson_id']}: {e}")
            else:
                logger.debug("–ó–∞–Ω—è—Ç–∏–π –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–µ—Ç")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

    async def send_lesson_reminder(self, lesson):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É"""
        try:
            tutor_telegram_id = lesson['tutor_telegram_id']
            lesson_date = datetime.strptime(lesson['lesson_date'], '%Y-%m-%d %H:%M:%S')
            formatted_date = lesson_date.strftime('%d.%m.%Y –≤ %H:%M')
            
            message = (
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏!\n\n"
                f"üìö –£ –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ:\n"
                f"üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç: {lesson['student_name']}\n"
                f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {formatted_date}\n"
                f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson['duration']} –º–∏–Ω—É—Ç\n\n"
                f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é! üéØ"
            )
            
            await self.bot.send_message(
                chat_id=tutor_telegram_id,
                text=message
            )
            logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É {tutor_telegram_id} –æ –∑–∞–Ω—è—Ç–∏–∏ {lesson['lesson_id']}")
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson['lesson_id']}: {e}")

    async def send_group_lesson_reminder(self, lesson):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥—Ä—É–ø–ø–æ–≤–æ–º –∑–∞–Ω—è—Ç–∏–∏"""
        try:
            tutor_telegram_id = lesson['tutor_telegram_id']
            lesson_date = datetime.strptime(lesson['lesson_date'], '%Y-%m-%d %H:%M:%S')
            formatted_date = lesson_date.strftime('%d.%m.%Y –≤ %H:%M')
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø–µ
            group_id = lesson['group_id']
            students = db.get_students_in_group(group_id)
            students_count = len(students) if students else 0
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            group = db.get_group_by_id(group_id)
            group_name = group['name'] if group else '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'
            
            message = (
                f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –≥—Ä—É–ø–ø–æ–≤–æ–º –∑–∞–Ω—è—Ç–∏–∏!\n\n"
                f"üë• –ì—Ä—É–ø–ø–∞: {group_name}\n"
                f"üë®‚Äçüéì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤: {students_count}\n"
                f"üìÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è: {formatted_date}\n"
                f"‚è± –ü—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson['duration']} –º–∏–Ω—É—Ç\n\n"
                f"–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—é! üéØ"
            )
            
            await self.bot.send_message(
                chat_id=tutor_telegram_id,
                text=message
            )
            logger.info(f"‚úÖ –ì—Ä—É–ø–ø–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É {tutor_telegram_id} –¥–ª—è –≥—Ä—É–ø–ø—ã #{group_id}")
            
        except Exception as e:
            logger.error(f"üí• –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")

    def mark_group_lessons_as_sent(self, group_id):
        """–ü–æ–º–µ—á–∞–µ—Ç –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è –≥—Ä—É–ø–ø—ã –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ"""
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                UPDATE lessons 
                SET reminder_sent = 1 
                WHERE group_id = ? 
                AND status = 'planned'
                AND reminder_sent = 0
                ''', (group_id,))
                conn.commit()
                marked_count = cursor.rowcount
                logger.info(f"–ü–æ–º–µ—á–µ–Ω–æ {marked_count} –∑–∞–Ω—è—Ç–∏–π –≥—Ä—É–ø–ø—ã #{group_id} –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ")
                return marked_count
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ—Ç–∫–µ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π: {e}")
            return 0

    async def stop(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"""
        if not self.is_running:
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–∂–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return
            
        logger.info("–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π...")
        self.is_running = False
        
        if self.task and not self.task.done():
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∑–∞–¥–∞—á–∏: {e}")
        
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    async def send_custom_reminder(self, tutor_id: int, message: str):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–∞—Å—Ç–æ–º–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º telegram_id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
            tutor_info = db.get_tutor_by_id(tutor_id)
            if tutor_info and tutor_info.get('telegram_id'):
                await self.bot.send_message(
                    chat_id=tutor_info['telegram_id'],
                    text=f"üì¢ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {message}"
                )
                logger.info(f"–ö–∞—Å—Ç–æ–º–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É {tutor_id}")
                return True
            else:
                logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω telegram_id –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {tutor_id}")
                return False
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è: {e}")
            return False