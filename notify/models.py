"""–ú–æ–¥–µ–ª–∏ –∏ –º–µ—Ç–æ–¥—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

import sqlite3
from datetime import datetime
import logging
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton


logger = logging.getLogger(__name__)

class NotificationManager:
    def __init__(self, db):
        self.db = db
        logger.info("üìä –ú–µ–Ω–µ–¥–∂–µ—Ä —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç –∑–∞–Ω—è—Ç–∏–π –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
        #self.check_lesson_dates_format()
    
    def get_upcoming_lessons_for_notification(self):
        """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–Ω—è—Ç–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –Ω—É–∂–Ω–æ —É–≤–µ–¥–æ–º–∏—Ç—å (–Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞ 24 —á–∞—Å–∞)"""
        logger.info("üîç –ü–æ–∏—Å–∫ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å–µ–≥–æ–¥–Ω—è + –∑–∞–≤—Ç—Ä–∞)")
        
        try:
            with self.db.get_connection() as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                
                # 1. –ü—Ä–æ–≤–µ—Ä–∏–º –í–°–ï –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –°–ï–ì–û–î–ù–Ø –∏ –ó–ê–í–¢–†–ê
                debug_query = """
                SELECT l.id, l.lesson_date, l.status, 
                    s.full_name as student_name, s.student_telegram_id,
                    t.full_name as tutor_name
                FROM lessons l
                JOIN students s ON l.student_id = s.id
                JOIN tutors t ON l.tutor_id = t.id
                WHERE date(l.lesson_date) IN (date('now'), date('now', '+1 day'))
                """
                
                cursor.execute(debug_query)
                all_upcoming_lessons = [dict(row) for row in cursor.fetchall()]
                
                logger.info(f"üìä –í—Å–µ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è –∏ –∑–∞–≤—Ç—Ä–∞: {len(all_upcoming_lessons)}")
                for lesson in all_upcoming_lessons:
                    logger.info(f"   üìÖ #{lesson.get('id')}: {lesson.get('student_name')} - "
                            f"{lesson.get('lesson_date')} - —Å—Ç–∞—Ç—É—Å: {lesson.get('status')} - "
                            f"TG: {lesson.get('student_telegram_id')}")
                
                # 2. –ü—Ä–æ–≤–µ—Ä–∏–º —É—á–µ–Ω–∏–∫–æ–≤ –±–µ–∑ telegram_id
                debug_students_query = """
                SELECT s.id, s.full_name, s.student_telegram_id
                FROM students s
                JOIN lessons l ON s.id = l.student_id
                WHERE date(l.lesson_date) IN (date('now'), date('now', '+1 day'))
                AND (s.student_telegram_id IS NULL OR s.student_telegram_id = '')
                """
                
                cursor.execute(debug_students_query)
                students_without_tg = [dict(row) for row in cursor.fetchall()]
                logger.info(f"üë• –£—á–µ–Ω–∏–∫–∏ –±–µ–∑ telegram_id: {len(students_without_tg)}")
                for student in students_without_tg:
                    logger.info(f"   ‚ùå #{student.get('id')}: {student.get('full_name')} - TG: {student.get('student_telegram_id')}")
                
                # 3. –ü—Ä–æ–≤–µ—Ä–∏–º —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
                debug_sent_query = """
                SELECT lc.*, l.lesson_date, s.full_name
                FROM lesson_confirmations lc
                JOIN lessons l ON lc.lesson_id = l.id
                JOIN students s ON l.student_id = s.id
                WHERE date(l.lesson_date) IN (date('now'), date('now', '+1 day'))
                AND date(lc.notified_at) = date('now')
                """
                
                cursor.execute(debug_sent_query)
                sent_notifications = [dict(row) for row in cursor.fetchall()]
                logger.info(f"üì® –£–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(sent_notifications)}")
                for notification in sent_notifications:
                    logger.info(f"   üì§ #{notification.get('lesson_id')} - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {notification.get('notified_at')}")
                
                # 4. –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—Ä–æ—Å - —Ç–æ–ª—å–∫–æ —É—á–µ–Ω–∏–∫–∏ —Å telegram_id
                query = """
                SELECT l.*, s.full_name as student_name, s.student_telegram_id,
                    t.full_name as tutor_name, t.telegram_id as tutor_telegram_id
                FROM lessons l
                JOIN students s ON l.student_id = s.id
                JOIN tutors t ON l.tutor_id = t.id
                WHERE date(l.lesson_date) IN (date('now'), date('now', '+1 day'))
                AND l.status = 'planned'
                AND s.student_telegram_id IS NOT NULL 
                AND s.student_telegram_id != ''
                AND NOT EXISTS (
                    SELECT 1 FROM lesson_confirmations lc 
                    WHERE lc.lesson_id = l.id 
                    AND date(lc.notified_at) = date('now')
                )
                """
                
                cursor.execute(query)
                lessons = [dict(row) for row in cursor.fetchall()]
                
                logger.info(f"üéØ –ù–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {len(lessons)}")
                
                for lesson in lessons:
                    logger.info(f"   ‚úÖ –î–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: #{lesson.get('id')} - {lesson.get('student_name')}")
                
                return lessons
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return []
            
    def check_lesson_dates_format(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç –∑–∞–Ω—è—Ç–∏–π")
        try:
            with self.db.get_connection() as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                
                cursor.execute('''
                SELECT id, lesson_date, status 
                FROM lessons 
                WHERE lesson_date > datetime('now')
                ORDER BY lesson_date 
                LIMIT 10
                ''')
                
                lessons = cursor.fetchall()
                logger.info(f"üìä –ü—Ä–∏–º–µ—Ä—ã –¥–∞—Ç –∏–∑ –±–∞–∑—ã:")
                
                for lesson in lessons:
                    logger.info(f"   –ó–∞–Ω—è—Ç–∏–µ #{lesson['id']}: '{lesson['lesson_date']}' - {lesson['status']}")
                    
                return True
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç: {e}")
            return False

    def create_notification_record(self, lesson_id, student_tg_id, notification_time):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–ø–∏—Å—å –æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                
                # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∏–º student_id –ø–æ telegram_id
                cursor.execute('SELECT id FROM students WHERE student_telegram_id = ?', (student_tg_id,))
                student_result = cursor.fetchone()
                
                if not student_result:
                    logger.error(f"‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω student_id –¥–ª—è telegram_id: {student_tg_id}")
                    return None
                    
                student_id = student_result[0]
                
                # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ lesson_confirmations —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º student_id
                cursor.execute('''
                    INSERT INTO lesson_confirmations 
                    (lesson_id, student_id, notified_at)
                    VALUES (?, ?, datetime('now'))
                ''', (lesson_id, student_id))
                
                conn.commit()
                
                # –ü–æ–ª—É—á–∞–µ–º ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π –∑–∞–ø–∏—Å–∏
                confirmation_id = cursor.lastrowid
                
                logger.info(f"üìù –°–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è #{lesson_id}, student_id: {student_id}, ID –∑–∞–ø–∏—Å–∏: {confirmation_id}")
                return confirmation_id
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–ø–∏—Å–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return None

    def update_confirmation(self, lesson_id, student_id, confirmed):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è"""
        logger.debug(f"üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: —É—Ä–æ–∫ {lesson_id}, —É—á–µ–Ω–∏–∫ {student_id}, —Å—Ç–∞—Ç—É—Å {confirmed}")
        try:
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                UPDATE lesson_confirmations 
                SET confirmed = ?, confirmed_at = CURRENT_TIMESTAMP
                WHERE lesson_id = ? AND student_id = ?
                ''', (confirmed, lesson_id, student_id))
                conn.commit()
                success = cursor.rowcount > 0
                if success:
                    logger.info(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
                else:
                    logger.warning(f"‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω–∞ –∑–∞–ø–∏—Å—å –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è")
                return success
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            return False
        
    async def send_notification_to_student(self, bot, lesson, student_telegram_id):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫—É —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞–º–∏"""
        try:
            lesson_id = lesson['id']
            lesson_date = lesson['lesson_date']
            tutor_name = lesson.get('tutor_name', '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å')
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
            try:
                lesson_datetime = datetime.strptime(lesson_date, '%Y-%m-%d %H:%M:%S')
                formatted_date = lesson_datetime.strftime('%d.%m.%Y –≤ %H:%M')
            except:
                formatted_date = lesson_date
            
            message_text = (
                f"üìö –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–Ω—è—Ç–∏–∏\n\n"
                f"üóìÔ∏è –î–∞—Ç–∞: {formatted_date}\n"
                f"üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å: {tutor_name}\n\n"
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à–µ —É—á–∞—Å—Ç–∏–µ:"
            )
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∞–µ–º confirmation_id
            notification_time = datetime.strptime(lesson_date, '%Y-%m-%d %H:%M:%S')
            confirmation_id = self.create_notification_record(lesson_id, student_telegram_id, notification_time)
            
            if not confirmation_id:
                logger.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–ø–∏—Å—å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –∑–∞–Ω—è—Ç–∏—è #{lesson_id}")
                return False
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–¥–µ—Å—å (—É–±–∏—Ä–∞–µ–º –∏–º–ø–æ—Ä—Ç get_confirmation_keyboard)
            from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [
                        InlineKeyboardButton(
                            text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", 
                            callback_data=f"notify_confirm_{lesson_id}_{confirmation_id}"
                        ),
                        InlineKeyboardButton(
                            text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", 
                            callback_data=f"notify_cancel_{lesson_id}_{confirmation_id}"
                        )
                    ],
                    [
                        InlineKeyboardButton(
                            text="üîÑ –ü–µ—Ä–µ–Ω–µ—Å—Ç–∏", 
                            callback_data=f"notify_reschedule_{lesson_id}_{confirmation_id}"
                        )
                    ]
                ]
            )
            
            await bot.send_message(
                chat_id=student_telegram_id,
                text=message_text,
                reply_markup=keyboard
            )
            
            logger.info(f"üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É—á–µ–Ω–∏–∫—É {student_telegram_id} –¥–ª—è –∑–∞–Ω—è—Ç–∏—è #{lesson_id}")
            return True
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            import traceback
            logger.error(traceback.format_exc())
            return False
            
        
    def mark_notification_sent(self, confirmation_id):
        """–ü–æ–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ"""
        try:
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE lesson_confirmations 
                    SET notified_at = datetime('now'), status = 'sent'
                    WHERE id = ?
                ''', (confirmation_id,))
                conn.commit()
                logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ #{confirmation_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    def mark_confirmation(self, confirmation_id, confirmed):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è"""
        try:
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    UPDATE lesson_confirmations 
                    SET confirmed = ?, confirmed_at = datetime('now')
                    WHERE id = ?
                ''', (confirmed, confirmation_id))
                conn.commit()
                logger.info(f"‚úÖ –°—Ç–∞—Ç—É—Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω: ID {confirmation_id} -> {confirmed}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")

    def get_teacher_chat_id_by_confirmation(self, confirmation_id):
        """–ü–æ–ª—É—á–∞–µ—Ç chat_id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ ID –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
        try:
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT t.telegram_id 
                    FROM tutors t
                    JOIN lessons l ON l.tutor_id = t.id
                    JOIN lesson_confirmations lc ON lc.lesson_id = l.id
                    WHERE lc.id = ?
                ''', (confirmation_id,))
                
                result = cursor.fetchone()
                return result[0] if result else None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ chat_id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞: {e}")
            return None
        
    def get_lesson_info(self, lesson_id):
        """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏"""
        try:
            with self.db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                    SELECT l.id, l.lesson_date, s.full_name as student_name
                    FROM lessons l
                    JOIN students s ON l.student_id = s.id
                    WHERE l.id = ?
                ''', (lesson_id,))
                
                result = cursor.fetchone()
                if result:
                    return {
                        'lesson_id': result[0],
                        'lesson_date': result[1],
                        'student_name': result[2]
                    }
                return None
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–Ω—è—Ç–∏–∏: {e}")
            return None