"""–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""

from aiogram import F
from aiogram import types
from datetime import datetime
import logging

logger = logging.getLogger(__name__)

def setup_notification_handlers(dp, db, notification_manager):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    logger.info("üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
    
    @dp.message(F.text.startswith(("‚úÖ –ü–æ—Å–µ—â—É –∑–∞–Ω—è—Ç–∏–µ #", "‚ùå –ù–µ –ø—Ä–∏–¥—É #")))
    async def handle_lesson_confirmation(message: types.Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è"""
        logger.info(f"üì® –ü–æ–ª—É—á–µ–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}: {message.text}")
        
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–Ω—è—Ç–∏—è –∏–∑ —Ç–µ–∫—Å—Ç–∞
            if "‚úÖ –ü–æ—Å–µ—â—É –∑–∞–Ω—è—Ç–∏–µ #" in message.text:
                confirmed = True
                lesson_id = int(message.text.split("#")[1])
                logger.debug(f"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è #{lesson_id}")
            else:
                confirmed = False
                lesson_id = int(message.text.split("#")[1])
                logger.debug(f"‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–Ω—è—Ç–∏—è #{lesson_id}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ
            student = db.get_student_by_telegram_id(message.from_user.id)
            if not student:
                logger.warning(f"‚ö†Ô∏è –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ telegram_id: {message.from_user.id}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            logger.debug(f"üë§ –ù–∞–π–¥–µ–Ω —É—á–µ–Ω–∏–∫: {student.get('full_name')}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
            success = notification_manager.update_confirmation(lesson_id, student['id'], confirmed)
            
            if success:
                # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
                lesson = db.get_lesson_by_id(lesson_id)
                
                if lesson and lesson.get('tutor_telegram_id'):
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —É—á–∏—Ç–µ–ª—è
                    lesson_date = datetime.strptime(lesson['lesson_date'], '%Y-%m-%d %H:%M:%S')
                    
                    tutor_message = f"""
üìã –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è!

–£—á–µ–Ω–∏–∫: {student.get('full_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}
{"‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –∑–∞–Ω—è—Ç–∏–µ" if confirmed else "‚ùå –û—Ç–º–µ–Ω–∏–ª –∑–∞–Ω—è—Ç–∏–µ"}

üìÖ –î–∞—Ç–∞: {lesson_date.strftime('%d.%m.%Y')}
‚è∞ –í—Ä–µ–º—è: {lesson_date.strftime('%H:%M')}
‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson.get('duration', 60)} –º–∏–Ω—É—Ç
üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {lesson.get('price', 0)} —Ä—É–±.
                    """
                    
                    try:
                        await message.bot.send_message(
                            chat_id=lesson['tutor_telegram_id'],
                            text=tutor_message
                        )
                        logger.info(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É {lesson['tutor_telegram_id']}")
                    except Exception as tutor_error:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É: {tutor_error}")
                
                # –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫—É
                response_text = (
                    "‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ! –ñ–¥–µ–º –≤–∞—Å –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏!" 
                    if confirmed else 
                    "‚ùå –°–ø–∞—Å–∏–±–æ, —á—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–ª–∏! –°–æ–æ–±—â–∏–ª–∏ –≤–∞—à–µ–º—É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É."
                )
                
                await message.answer(
                    response_text,
                    reply_markup=types.ReplyKeyboardRemove()
                )
                logger.info(f"‚úÖ –û—Ç–≤–µ—Ç —É—á–µ–Ω–∏–∫—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω")
                
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è #{lesson_id}")
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
                
        except (ValueError, IndexError):
            logger.warning(f"‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {message.text}")
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ")