import logging
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .states import IndividualLessonStates

logger = logging.getLogger(__name__)

class IndividualLessonHandler:
    def __init__(self, db, parent_reports):
        self.db = db
        self.parent_reports = parent_reports

    async def start_individual_report(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –ø–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–º—É –∑–∞–Ω—è—Ç–∏—é"""
        lesson_id = int(callback.data.split(":")[1])
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –∑–∞–Ω—è—Ç–∏–∏
        lesson_data = self.db.get_lesson_by_id(lesson_id)
        if not lesson_data:
            await callback.message.answer("‚ùå –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        await state.update_data(
            report_lesson_id=lesson_id,
            report_student_id=lesson_data['student_id'],
            report_type='individual'
        )
        
        # –°–ø—Ä–∞—à–∏–≤–∞–µ–º, —Å–æ—Å—Ç–æ—è–ª–æ—Å—å –ª–∏ –∑–∞–Ω—è—Ç–∏–µ
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –î–∞", callback_data="held_yes")
        keyboard.button(text="‚ùå –ù–µ—Ç", callback_data="held_no")
        
        await callback.message.answer(
            f"üéì –ó–∞–Ω—è—Ç–∏–µ —Å {lesson_data['student_name']}\n"
            f"üìÖ {lesson_data['lesson_date']}\n\n"
            "–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –ª–∏ —É—á–µ–Ω–∏–∫ –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏?",
            reply_markup=keyboard.as_markup()
        )
        await state.set_state(IndividualLessonStates.LESSON_HELD)

    async def handle_lesson_held(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è"""
        lesson_held = callback.data == "held_yes"
        await state.update_data(lesson_held=lesson_held)
        
        # –í–°–ï–ì–î–ê —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± –æ–ø–ª–∞—Ç–µ
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data="paid_yes")
        keyboard.button(text="‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ", callback_data="paid_no")
        
        await callback.message.answer("üí≥ –ó–∞–Ω—è—Ç–∏–µ –æ–ø–ª–∞—á–µ–Ω–æ?", reply_markup=keyboard.as_markup())
        await state.set_state(IndividualLessonStates.LESSON_PAID)

    async def handle_lesson_paid(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ–± –æ–ø–ª–∞—Ç–µ"""
        await state.update_data(lesson_paid=callback.data == "paid_yes")
        
        # –í–°–ï–ì–î–ê —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –°–¥–µ–ª–∞–Ω–æ", callback_data="homework_yes")
        keyboard.button(text="‚ùå –ù–µ —Å–¥–µ–ª–∞–Ω–æ", callback_data="homework_no")
        
        await callback.message.answer("üìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ?", reply_markup=keyboard.as_markup())
        await state.set_state(IndividualLessonStates.HOMEWORK_DONE)

    async def handle_homework_done(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ –¥–æ–º–∞—à–Ω–µ–º –∑–∞–¥–∞–Ω–∏–∏"""
        await state.update_data(homework_done=callback.data == "homework_yes")
        
        # –í–°–ï–ì–î–ê —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± —É—Å–ø–µ—Ö–∞—Ö —É—á–µ–Ω–∏–∫–∞
        data = await state.get_data()
        lesson_held = data.get('lesson_held', True)
        
        if lesson_held:
            await callback.message.answer("üí¨ –≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏—Ç —É—á–µ–Ω–∏–∫. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –∏–ª–∏ –æ–ø–∏—Å–∞—Ç—å –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É. /n –ú–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å -")
        else:
            await callback.message.answer("üí¨ –≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏—Ç —É—á–µ–Ω–∏–∫. –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é —Å –∑–∞–Ω—è—Ç–∏–µ–º (–ø–æ—á–µ–º—É –Ω–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å, –¥–æ–ª–≥–∏ –ø–æ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ –∏ —Ç.–¥.):/n –ú–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å -")
        
        await state.set_state(IndividualLessonStates.STUDENT_PERFORMANCE)

    async def handle_performance(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —É—Å–ø–µ—Ö–æ–≤ —É—á–µ–Ω–∏–∫–∞"""
        student_performance = message.text
        await state.update_data(student_performance=student_performance)
        
        # –í–°–ï–ì–î–ê —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π
        data = await state.get_data()
        lesson_held = data.get('lesson_held', True)
        
        if lesson_held:
            await message.answer(
                "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ó–∞–º–µ—Ç–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π —É—á–µ–Ω–∏–∫–∞ "
                "(–æ –ø—Ä–æ–≥—Ä–µ—Å—Å–µ, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö, –≤–∞–∂–Ω—ã—Ö –º–æ–º–µ–Ω—Ç–∞—Ö):\n"
                "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å -\n"
            )
        else:
            await message.answer(
                "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ **–ó–∞–º–µ—Ç–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π:**\n"
                "–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π —É—á–µ–Ω–∏–∫–∞ "
                "(–æ –ø—Ä–∏—á–∏–Ω–∞—Ö –æ—Ç–º–µ–Ω—ã, –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø–ª–∞–Ω–∞—Ö, —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö):\n"
                "–ú–æ–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å -\n"
            )
        
        await state.set_state(IndividualLessonStates.PARENT_PERFORMANCE)

    async def handle_parent_performance(self, message: Message, state: FSMContext, bot):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –∏ –∑–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç—á–µ—Ç"""
        parent_performance = message.text
        data = await state.get_data()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª–Ω—ã–π –æ—Ç—á–µ—Ç —Å–æ –í–°–ï–ú–ò –¥–∞–Ω–Ω—ã–º–∏
        success = self.db.save_lesson_report(
            lesson_id=data['report_lesson_id'],
            student_id=data['report_student_id'],
            lesson_held=data.get('lesson_held', True),
            lesson_paid=data.get('lesson_paid'),
            homework_done=data.get('homework_done'),
            student_performance=data.get('student_performance'),
            parent_performance=parent_performance
        )
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç —Ä–æ–¥–∏—Ç–µ–ª—è–º
            await self.parent_reports.send_report_to_parent(
                bot=bot,
                lesson_id=data['report_lesson_id'],
                student_id=data['report_student_id']
            )
            
            await message.answer("‚úÖ –û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è–º!")
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞")
        
        await state.clear()
