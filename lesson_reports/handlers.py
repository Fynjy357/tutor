import logging
import sqlite3
from aiogram import F, Router
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import CallbackQuery, Message
from aiogram.utils.keyboard import InlineKeyboardBuilder
from datetime import datetime
import asyncio
from handlers.start.welcome import show_main_menu
from parent_report.handlers import ParentReportHandlers

logger = logging.getLogger(__name__)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
class IndividualLessonStates(StatesGroup):
    LESSON_HELD = State()
    LESSON_PAID = State()
    HOMEWORK_DONE = State()
    PERFORMANCE = State()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π
class GroupLessonStates(StatesGroup):
    LESSON_HELD = State()
    STUDENT_ATTENDANCE = State()
    STUDENT_PAID = State()
    STUDENT_HOMEWORK = State()
    STUDENT_PERFORMANCE = State()

class LessonReportHandlers:
    def __init__(self, db):
        self.db = db
        self.router = Router()
        self.parent_reports = ParentReportHandlers(db)
        self.setup_handlers()

    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
        self.router.callback_query(F.data.startswith("individual_report:"))(
            self.start_individual_report
        )
        self.router.callback_query(F.data.in_(["held_yes", "held_no"]))(
            self.handle_individual_lesson_held
        )
        self.router.callback_query(F.data.in_(["paid_yes", "paid_no"]))(
            self.handle_individual_lesson_paid
        )
        self.router.callback_query(F.data.in_(["homework_yes", "homework_no"]))(
            self.handle_individual_homework_done
        )
        self.router.message(IndividualLessonStates.PERFORMANCE)(
            self.handle_individual_performance
        )

        # –ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è
        self.router.callback_query(F.data.startswith("group_report:"))(
            self.start_group_report
        )
        self.router.callback_query(F.data.in_(["group_held_yes", "group_held_no"]))(
            self.handle_group_lesson_held
        )
        self.router.callback_query(F.data.startswith("attend_"))(
            self.handle_group_student_attendance
        )
        self.router.callback_query(F.data.startswith("paid_"))(
            self.handle_group_student_paid
        )
        self.router.callback_query(F.data.startswith("homework_"))(
            self.handle_group_student_homework
        )
        self.router.message(GroupLessonStates.STUDENT_PERFORMANCE)(
            self.handle_group_student_performance
        )

        # –ö–æ–º–∞–Ω–¥–∞ –æ—Ç–º–µ–Ω—ã
        self.router.message(Command("cancel"))(
            self.cancel_report
        )

    async def notify_tutor_about_lesson_end(self, bot):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π")
        while True:
            try:
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π...")
                now = datetime.now()
                now_str = now.strftime('%Y-%m-%d %H:%M:%S')
                
                with self.db.get_connection() as conn:
                    conn.row_factory = sqlite3.Row
                    cursor = conn.cursor()
                    
                    # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è callback_data
                    cursor.execute('''
                    SELECT l.group_id, l.lesson_date, l.duration, 
                        t.telegram_id as tutor_telegram_id,
                        g.name as group_name,
                        COUNT(l.id) as student_count,
                        GROUP_CONCAT(s.full_name) as student_names,
                        MIN(l.id) as first_lesson_id  -- –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π ID –¥–ª—è callback
                    FROM lessons l
                    JOIN tutors t ON l.tutor_id = t.id
                    LEFT JOIN groups g ON l.group_id = g.id
                    LEFT JOIN students s ON l.student_id = s.id
                    WHERE l.status = 'planned'
                    AND datetime(l.lesson_date, '+' || l.duration || ' minutes') 
                    BETWEEN datetime(?) AND datetime(?, '+5 minutes')
                    GROUP BY l.group_id, l.lesson_date, l.duration, t.telegram_id, g.name
                    ''', (now_str, now_str))
                    
                    lessons = cursor.fetchall()
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ): {len(lessons)}")
                    
                    for lesson in lessons:
                        lesson_dict = dict(lesson)
                        tutor_id = lesson_dict['tutor_telegram_id']
                        group_id = lesson_dict['group_id']
                        start_time = lesson_dict['lesson_date']
                        duration = lesson_dict['duration']
                        first_lesson_id = lesson_dict['first_lesson_id']
                        
                        if group_id:  # –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
                            logger.info(f"üë• –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ: –≥—Ä—É–ø–ø–∞={lesson_dict['group_name']}, "
                                    f"ID={first_lesson_id}, —É—á–µ–Ω–∏–∫–æ–≤={lesson_dict['student_count']}")
                            
                            message = f"üéì –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ '{lesson_dict['group_name']}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                            message += f"üìÖ –í—Ä–µ–º—è: {start_time}\n"
                            message += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω\n"
                            message += f"üë• –£—á–µ–Ω–∏–∫–æ–≤: {lesson_dict['student_count']}\n\n"
                            message += "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –∑–∞–Ω—è—Ç–∏—é:"
                            
                            keyboard = InlineKeyboardBuilder()
                            keyboard.button(
                                text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç", 
                                callback_data=f"group_report:{first_lesson_id}"
                            )
                            
                        else:  # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
                            logger.info(f"üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ: —É—á–µ–Ω–∏–∫={lesson_dict['student_names']}")
                            
                            message = f"üéì –ó–∞–Ω—è—Ç–∏–µ —Å {lesson_dict['student_names']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
                            message += f"üìÖ –í—Ä–µ–º—è: {start_time}\n"
                            message += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω\n\n"
                            message += "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –∑–∞–Ω—è—Ç–∏—é:"
                            
                            keyboard = InlineKeyboardBuilder()
                            keyboard.button(
                                text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç", 
                                callback_data=f"individual_report:{first_lesson_id}"
                            )
                        
                        reply_markup = keyboard.as_markup()
                        
                        try:
                            await bot.send_message(
                                chat_id=tutor_id,
                                text=message,
                                reply_markup=reply_markup
                            )
                            
                            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –í–°–ï–• –∑–∞–Ω—è—Ç–∏–π —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
                            if group_id:
                                cursor.execute('''
                                UPDATE lessons 
                                SET status = 'completed' 
                                WHERE group_id = ? AND lesson_date = ? AND status = 'planned'
                                ''', (group_id, start_time))
                            else:
                                student_name = lesson_dict['student_names']
                                cursor.execute('''
                                UPDATE lessons 
                                SET status = 'completed' 
                                WHERE student_id IN (
                                    SELECT id FROM students WHERE full_name = ?
                                ) AND lesson_date = ? AND status = 'planned'
                                ''', (student_name, start_time))
                            
                            conn.commit()
                            
                            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É {tutor_id}")
                            
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
                
                await asyncio.sleep(60)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
                await asyncio.sleep(60)
                

    async def start_individual_report(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
        lesson_id = int(callback.data.split(':')[1])
        lesson = self.db.get_lesson_by_id(lesson_id)
        
        if not lesson:
            await callback.message.edit_text("‚ùå –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        await state.update_data(
            report_lesson_id=lesson_id,
            report_student_id=lesson['student_id'],
            report_type='individual'
        )
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –î–∞", callback_data="held_yes")
        keyboard.button(text="‚ùå –ù–µ—Ç", callback_data="held_no")
        
        await callback.message.edit_text(
            f"üìù –û—Ç—á–µ—Ç –ø–æ –∑–∞–Ω—è—Ç–∏—é —Å {lesson['student_name']}\n\n"
            "1. –ó–∞–Ω—è—Ç–∏–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å?",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(IndividualLessonStates.LESSON_HELD)

    async def handle_individual_lesson_held(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è"""
        lesson_held = callback.data == "held_yes"
        data = await state.get_data()
        lesson_id = data['report_lesson_id']
        student_id = data['report_student_id']
        
        self.db.save_lesson_report(lesson_id, student_id, lesson_held=lesson_held)
        
        if not lesson_held:
            await callback.message.edit_text(
                "‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: –ó–∞–Ω—è—Ç–∏–µ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å"
            )
            await state.clear()
            return
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –î–∞", callback_data="paid_yes")
        keyboard.button(text="‚ùå –ù–µ—Ç", callback_data="paid_no")
        
        await callback.message.edit_text(
            "2. –ó–∞–Ω—è—Ç–∏–µ –æ–ø–ª–∞—á–µ–Ω–æ?",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(IndividualLessonStates.LESSON_PAID)

    async def handle_individual_lesson_paid(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ–± –æ–ø–ª–∞—Ç–µ"""
        lesson_paid = callback.data == "paid_yes"
        data = await state.get_data()
        lesson_id = data['report_lesson_id']
        student_id = data['report_student_id']
        
        self.db.save_lesson_report(lesson_id, student_id, lesson_paid=lesson_paid)
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –î–∞", callback_data="homework_yes")
        keyboard.button(text="‚ùå –ù–µ—Ç", callback_data="homework_no")
        
        await callback.message.edit_text(
            "3. –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞?",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(IndividualLessonStates.HOMEWORK_DONE)

    async def handle_individual_homework_done(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ"""
        homework_done = callback.data == "homework_yes"
        data = await state.get_data()
        lesson_id = data['report_lesson_id']
        student_id = data['report_student_id']
        
        self.db.save_lesson_report(lesson_id, student_id, homework_done=homework_done)
        
        await callback.message.edit_text(
            "4. –ö–∞–∫ —É—á–µ–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏?\n\n"
            "–û–ø–∏—à–∏—Ç–µ —Ä–∞–±–æ—Ç—É —É—á–µ–Ω–∏–∫–∞:"
        )
        
        await state.set_state(IndividualLessonStates.PERFORMANCE)

    async def handle_individual_performance(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —É—á–µ–Ω–∏–∫–∞ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        performance = message.text
        data = await state.get_data()
        lesson_id = data['report_lesson_id']
        student_id = data['report_student_id']
        
        self.db.save_lesson_report(lesson_id, student_id, student_performance=performance)
        
        lesson = self.db.get_lesson_by_id(lesson_id)
        
        await message.answer(
            f"‚úÖ –û—Ç—á–µ—Ç –ø–æ –∑–∞–Ω—è—Ç–∏—é —Å {lesson['student_name']} —Å–æ—Ö—Ä–∞–Ω–µ–Ω!\n\n"
            f"üìù –í–∞—à –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {performance}"
        )
        await self.parent_reports.send_report_to_parent(message.bot, lesson_id, student_id)
        
        # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        await state.clear()
        
        # –ó–ê–ú–ï–ù–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(
            chat_id=message.from_user.id,
            message=message
        )


    async def start_group_report(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
        lesson_id = int(callback.data.split(':')[1])
        
        logger.info(f"üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è ID: {lesson_id}")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏
        with self.db.get_connection() as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute('''
            SELECT l.*, g.name as group_name 
            FROM lessons l 
            LEFT JOIN groups g ON l.group_id = g.id 
            WHERE l.id = ?
            ''', (lesson_id,))
            lesson = cursor.fetchone()
            
            if lesson:
                lesson = dict(lesson)
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–µ: {lesson}")
        
        if not lesson or not lesson.get('group_id'):
            await callback.message.edit_text("‚ùå –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –í–°–ï —É—Ä–æ–∫–∏ —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É —Å –∏—Ö ID
        with self.db.get_connection() as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute('''
            SELECT l.id as lesson_id, s.id as student_id, s.full_name 
            FROM lessons l
            JOIN students s ON l.student_id = s.id
            WHERE l.group_id = ? AND l.lesson_date = ?
            ''', (lesson['group_id'], lesson['lesson_date']))
            student_lessons = [dict(row) for row in cursor.fetchall()]
        
        logger.info(f"üë• –£—Ä–æ–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {len(student_lessons)}")
        
        if not student_lessons:
            await callback.message.edit_text("‚ùå –í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤")
            return
        
        await state.update_data(
            report_group_id=lesson['group_id'],
            report_lesson_date=lesson['lesson_date'],
            report_type='group',
            current_student_index=0,
            group_student_lessons=student_lessons  # –¢–µ–ø–µ—Ä—å —Ö—Ä–∞–Ω–∏–º —Å–ø–∏—Å–æ–∫ —É—Ä–æ–∫–æ–≤ —Å –∏—Ö ID
        )
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –î–∞", callback_data="group_held_yes")
        keyboard.button(text="‚ùå –ù–µ—Ç", callback_data="group_held_no")
        
        await callback.message.edit_text(
            f"üìù –û—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–æ–≤–æ–º—É –∑–∞–Ω—è—Ç–∏—é '{lesson.get('group_name', '–ì—Ä—É–ø–ø–∞')}'\n\n"
            f"üë• –£—á–µ–Ω–∏–∫–æ–≤: {len(student_lessons)}\n\n"
            "1. –ó–∞–Ω—è—Ç–∏–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å?",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(GroupLessonStates.LESSON_HELD)

    async def handle_group_lesson_held(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
        lesson_held = callback.data == "group_held_yes"
        data = await state.get_data()
        student_lessons = data['group_student_lessons']
        
        if not lesson_held:
            # –î–ª—è –≤—Å–µ—Ö —É—Ä–æ–∫–æ–≤ –≥—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å
            for student_lesson in student_lessons:
                self.db.save_lesson_report(
                    student_lesson['lesson_id'],  # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π lesson_id
                    student_lesson['student_id'], 
                    lesson_held=False
                )
            
            await callback.message.edit_text(
                "‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: –ó–∞–Ω—è—Ç–∏–µ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å"
            )
            await state.clear()
            return
        
        if not student_lessons:
            await callback.message.edit_text("‚ùå –í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤")
            await state.clear()
            return
        
        await state.update_data(current_student_index=0)
        student_lesson = student_lessons[0]
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –ë—ã–ª", callback_data=f"attend_yes:{student_lesson['student_id']}:{student_lesson['lesson_id']}")
        keyboard.button(text="‚ùå –ù–µ –±—ã–ª", callback_data=f"attend_no:{student_lesson['student_id']}:{student_lesson['lesson_id']}")
        
        await callback.message.edit_text(
            f"üë§ –£—á–µ–Ω–∏–∫ 1: {student_lesson['full_name']}\n\n"
            "2. –ë—ã–ª –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏?",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(GroupLessonStates.STUDENT_ATTENDANCE)

    async def handle_group_student_attendance(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏ —É—á–µ–Ω–∏–∫–∞"""
        data_parts = callback.data.split(':')
        attended = data_parts[0] == "attend_yes"
        student_id = int(data_parts[1])
        lesson_id = int(data_parts[2])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π lesson_id
        
        self.db.save_lesson_report(lesson_id, student_id, lesson_held=attended)
        
        if not attended:
            await self.next_group_student(callback, state)
            return
        
        state_data = await state.get_data()
        student_lessons = state_data['group_student_lessons']
        student_lesson = next((s for s in student_lessons if s['student_id'] == student_id), None)
        
        if not student_lesson:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data=f"paid_yes:{student_id}:{lesson_id}")
        keyboard.button(text="‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ", callback_data=f"paid_no:{student_id}:{lesson_id}")
        
        await callback.message.edit_text(
            f"üë§ {student_lesson['full_name']}\n\n"
            "3. –ó–∞–Ω—è—Ç–∏–µ –æ–ø–ª–∞—á–µ–Ω–æ?",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(GroupLessonStates.STUDENT_PAID)

    async def handle_group_student_paid(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
        data_parts = callback.data.split(':')
        paid = data_parts[0] == "paid_yes"
        student_id = int(data_parts[1])
        lesson_id = int(data_parts[2])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π lesson_id
        
        self.db.save_lesson_report(lesson_id, student_id, lesson_paid=paid)
        
        state_data = await state.get_data()
        student_lessons = state_data['group_student_lessons']
        student_lesson = next((s for s in student_lessons if s['student_id'] == student_id), None)
        
        if not student_lesson:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"homework_yes:{student_id}:{lesson_id}")
        keyboard.button(text="‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"homework_no:{student_id}:{lesson_id}")
        
        await callback.message.edit_text(
            f"üë§ {student_lesson['full_name']}\n\n"
            "4. –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞?",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(GroupLessonStates.STUDENT_HOMEWORK)

    async def handle_group_student_homework(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ"""
        data_parts = callback.data.split(':')
        homework_done = data_parts[0] == "homework_yes"
        student_id = int(data_parts[1])
        lesson_id = int(data_parts[2])  # –ü–æ–ª—É—á–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π lesson_id
        
        self.db.save_lesson_report(lesson_id, student_id, homework_done=homework_done)
        
        await state.update_data(
            current_student_id=student_id,
            current_lesson_id=lesson_id  # –°–æ—Ö—Ä–∞–Ω—è–µ–º lesson_id –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ performance
        )
        
        state_data = await state.get_data()
        student_lessons = state_data['group_student_lessons']
        student_lesson = next((s for s in student_lessons if s['student_id'] == student_id), None)
        
        if not student_lesson:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        await callback.message.edit_text(
            f"üë§ {student_lesson['full_name']}\n\n"
            "5. –ö–∞–∫ —É—á–µ–Ω–∏–∫ —Ä–∞–±–æ—Ç–∞–ª –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏?\n\n"
            "–û–ø–∏—à–∏—Ç–µ —Ä–∞–±–æ—Ç—É —É—á–µ–Ω–∏–∫–∞:"
        )
        
        await state.set_state(GroupLessonStates.STUDENT_PERFORMANCE)

    async def handle_group_student_performance(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —É—á–µ–Ω–∏–∫–∞"""
        performance = message.text
        state_data = await state.get_data()
        student_id = state_data['current_student_id']
        lesson_id = state_data['current_lesson_id']  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π lesson_id
        
        self.db.save_lesson_report(lesson_id, student_id, student_performance=performance)
        
        await self.next_group_student(message, state)

    async def next_group_student(self, update, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–µ–Ω–∏–∫—É"""
        state_data = await state.get_data()
        student_lessons = state_data['group_student_lessons']
        current_index = state_data['current_student_index']
        
        current_index += 1
        await state.update_data(current_student_index=current_index)
        
        if current_index >= len(student_lessons):
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ –¥–ª—è –∑–∞–≤–µ—Ä—à–∞—é—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            with self.db.get_connection() as conn:
                conn.row_factory = sqlite3.Row
                cursor = conn.cursor()
                cursor.execute('''
                SELECT g.name FROM groups g WHERE g.id = ?
                ''', (state_data['report_group_id'],))
                group_info = cursor.fetchone()
            
            group_name = group_info['name'] if group_info else '–ì—Ä—É–ø–ø–∞'
            
            if isinstance(update, Message):
                await update.answer(
                    f"‚úÖ –û—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–æ–≤–æ–º—É –∑–∞–Ω—è—Ç–∏—é '{group_name}' –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                    f"–û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö {len(student_lessons)} —É—á–µ–Ω–∏–∫–æ–≤"
                )
            else:
                await update.message.edit_text(
                    f"‚úÖ –û—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–æ–≤–æ–º—É –∑–∞–Ω—è—Ç–∏—é '{group_name}' –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n"
                    f"–û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö {len(student_lessons)} —É—á–µ–Ω–∏–∫–æ–≤"
                )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã –≤—Å–µ–º —Ä–æ–¥–∏—Ç–µ–ª—è–º –ø–æ –æ–¥–Ω–æ–º—É
            for student_lesson in student_lessons:
                try:
                    await self.parent_reports.send_report_to_parent(
                        update.bot, student_lesson['lesson_id'], student_lesson['student_id']
                    )
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {student_lesson['student_id']}: {e}")
            
            await state.clear()
            return
        
        student_lesson = student_lessons[current_index]
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –ë—ã–ª", callback_data=f"attend_yes:{student_lesson['student_id']}:{student_lesson['lesson_id']}")
        keyboard.button(text="‚ùå –ù–µ –±—ã–ª", callback_data=f"attend_no:{student_lesson['student_id']}:{student_lesson['lesson_id']}")
        
        if isinstance(update, Message):
            await update.answer(
                f"üë§ –£—á–µ–Ω–∏–∫ {current_index + 1}: {student_lesson['full_name']}\n\n"
                "2. –ë—ã–ª –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏?",
                reply_markup=keyboard.as_markup()
            )
        else:
            await update.message.edit_text(
                f"üë§ –£—á–µ–Ω–∏–∫ {current_index + 1}: {student_lesson['full_name']}\n\n"
                "2. –ë—ã–ª –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏?",
                reply_markup=keyboard.as_markup()
            )
        
        await state.set_state(GroupLessonStates.STUDENT_ATTENDANCE)


    async def cancel_report(self, message: Message, state: FSMContext):
        """–û—Ç–º–µ–Ω—è–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞"""
        await message.answer("‚ùå –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ")
        
        # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
        current_data = await state.get_data()
        
        if 'report_lesson_id' in current_data:
            await state.update_data(report_lesson_id=None)
        if 'report_student_id' in current_data:
            await state.update_data(report_student_id=None)
        if 'report_group_id' in current_data:
            await state.update_data(report_group_id=None)
        if 'report_type' in current_data:
            await state.update_data(report_type=None)
        if 'group_students' in current_data:
            await state.update_data(group_students=None)
        if 'current_student_index' in current_data:
            await state.update_data(current_student_index=None)
        if 'current_student_id' in current_data:
            await state.update_data(current_student_id=None)
        
        await state.clear()

    def get_handlers(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
        return [self.router]