import logging
import sqlite3
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from .states import GroupLessonStates

logger = logging.getLogger(__name__)

class GroupLessonHandler:
    def __init__(self, db, parent_reports):
        self.db = db
        self.parent_reports = parent_reports

    async def start_group_report(self, callback: CallbackQuery, state: FSMContext):
        """–ù–∞—á–∏–Ω–∞–µ—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
        lesson_id = int(callback.data.split(':')[1])
        
        logger.info(f"üîç –ü–æ–∏—Å–∫ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è ID: {lesson_id}")
        
        with self.db.get_connection() as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute('''
            SELECT l.*, g.name as group_name FROM lessons l 
            LEFT JOIN groups g ON l.group_id = g.id WHERE l.id = ?
            ''', (lesson_id,))
            lesson = cursor.fetchone()
            
            if lesson:
                lesson = dict(lesson)
                logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–µ: {lesson}")
        
        if not lesson or not lesson.get('group_id'):
            await callback.message.edit_text("‚ùå –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        with self.db.get_connection() as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute('''
            SELECT l.id as lesson_id, s.id as student_id, s.full_name 
            FROM lessons l JOIN students s ON l.student_id = s.id
            WHERE l.group_id = ? AND l.lesson_date = ?
            ''', (lesson['group_id'], lesson['lesson_date']))
            student_lessons = [dict(row) for row in cursor.fetchall()]
        
        logger.info(f"üë• –£—Ä–æ–∫–æ–≤ –≤ –≥—Ä—É–ø–ø–µ: {len(student_lessons)}")
        
        if not student_lessons:
            await callback.message.edit_text("‚ùå –í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤")
            return
        
        await state.update_data(
            report_group_id=lesson['group_id'],
            report_lesson_date=lesson['lesson_date'],
            report_type='group',
            current_student_index=0,
            group_student_lessons=student_lessons,
            report_lesson_id=lesson_id
        )
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –î–∞", callback_data="group_held_yes")
        keyboard.button(text="‚ùå –ù–µ—Ç", callback_data="group_held_no")
        
        await callback.message.edit_text(
            f"üìù –û—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–æ–≤–æ–º—É –∑–∞–Ω—è—Ç–∏—é '{lesson.get('group_name', '–ì—Ä—É–ø–ø–∞')}'\n\n"
            f"üë• –£—á–µ–Ω–∏–∫–æ–≤: {len(student_lessons)}\n\n–ó–∞–Ω—è—Ç–∏–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å?",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(GroupLessonStates.LESSON_HELD)

    async def handle_lesson_held(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ –ø—Ä–æ–≤–µ–¥–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
        lesson_held = callback.data == "group_held_yes"
        data = await state.get_data()
        student_lessons = data['group_student_lessons']
        
        if not lesson_held:
            # –ï—Å–ª–∏ –∑–∞–Ω—è—Ç–∏–µ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ—Ç—á–µ—Ç
            for student_lesson in student_lessons:
                self.db.save_lesson_report(
                    student_lesson['lesson_id'],
                    student_lesson['student_id'], 
                    lesson_held=False
                )
            
            await callback.message.edit_text("‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: –ó–∞–Ω—è—Ç–∏–µ –Ω–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å")
            await state.clear()
            return
        
        # –ï—Å–ª–∏ –∑–∞–Ω—è—Ç–∏–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å, –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å –ø–æ –∫–∞–∂–¥–æ–º—É —É—á–µ–Ω–∏–∫—É
        if not student_lessons:
            await callback.message.edit_text("‚ùå –í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤")
            await state.clear()
            return
        
        await state.update_data(current_student_index=0)
        await self._show_student_attendance(callback, state, student_lessons[0], 0)

    async def handle_student_attendance(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏ —É—á–µ–Ω–∏–∫–∞"""
        data_parts = callback.data.split(':')
        attended = data_parts[0] == "attend_yes"
        student_id = int(data_parts[1])
        lesson_id = int(data_parts[2])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        self.db.save_lesson_report(lesson_id, student_id, lesson_held=attended)
        
        # –í–°–ï–ì–î–ê –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ–± –æ–ø–ª–∞—Ç–µ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        state_data = await state.get_data()
        student_lessons = state_data['group_student_lessons']
        student_lesson = next((s for s in student_lessons if s['student_id'] == student_id), None)
        
        if not student_lesson:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –û–ø–ª–∞—á–µ–Ω–æ", callback_data=f"paid_yes:{student_id}:{lesson_id}")
        keyboard.button(text="‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ", callback_data=f"paid_no:{student_id}:{lesson_id}")
        
        await callback.message.edit_text(
            f"üë§ {student_lesson['full_name']}\n\nüí≥ –ó–∞–Ω—è—Ç–∏–µ –æ–ø–ª–∞—á–µ–Ω–æ?",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(GroupLessonStates.STUDENT_PAID)

    async def handle_student_paid(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ–± –æ–ø–ª–∞—Ç–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
        data_parts = callback.data.split(':')
        paid = data_parts[0] == "paid_yes"
        student_id = int(data_parts[1])
        lesson_id = int(data_parts[2])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
        self.db.save_lesson_report(lesson_id, student_id, lesson_paid=paid)
        
        # –í–°–ï–ì–î–ê –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å—É –æ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        state_data = await state.get_data()
        student_lessons = state_data['group_student_lessons']
        student_lesson = next((s for s in student_lessons if s['student_id'] == student_id), None)
        
        if not student_lesson:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"homework_yes:{student_id}:{lesson_id}")
        keyboard.button(text="‚ùå –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", callback_data=f"homework_no:{student_id}:{lesson_id}")
        
        await callback.message.edit_text(
            f"üë§ {student_lesson['full_name']}\n\nüìö –î–æ–º–∞—à–Ω–µ–µ –∑–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ?",
            reply_markup=keyboard.as_markup()
        )
        
        await state.set_state(GroupLessonStates.STUDENT_HOMEWORK)

    async def handle_student_homework(self, callback: CallbackQuery, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–≤–µ—Ç –æ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ"""
        data_parts = callback.data.split(':')
        homework_done = data_parts[0] == "homework_yes"
        student_id = int(data_parts[1])
        lesson_id = int(data_parts[2])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã
        self.db.save_lesson_report(lesson_id, student_id, homework_done=homework_done)
        
        await state.update_data(current_student_id=student_id, current_lesson_id=lesson_id)
        
        state_data = await state.get_data()
        student_lessons = state_data['group_student_lessons']
        student_lesson = next((s for s in student_lessons if s['student_id'] == student_id), None)
        
        if not student_lesson:
            await callback.message.edit_text("‚ùå –û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        # –í–°–ï–ì–î–ê —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–± —É—Å–ø–µ—Ö–∞—Ö —É—á–µ–Ω–∏–∫–∞, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        attended = state_data.get('lesson_held', True)
        
        if attended:
            await callback.message.edit_text(
                f"üë§ {student_lesson['full_name']}\n\nüí¨ –≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏—Ç —É—á–µ–Ω–∏–∫. –í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∑–¥–µ—Å—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –∏–ª–∏ –æ–ø–∏—Å–∞—Ç—å –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É. /n –ú–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å -"
            )
        else:
            await callback.message.edit_text(
                f"üë§ {student_lesson['full_name']}\n\nüí¨ –≠—Ç–æ—Ç –æ—Ç–≤–µ—Ç –ø–æ–ª—É—á–∏—Ç —É—á–µ–Ω–∏–∫. –û–ø–∏—à–∏—Ç–µ —Å–∏—Ç—É–∞—Ü–∏—é —Å –∑–∞–Ω—è—Ç–∏–µ–º (–ø–æ—á–µ–º—É –Ω–µ —Å–æ—Å—Ç–æ—è–ª–æ—Å—å, –¥–æ–ª–≥–∏ –ø–æ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç–µ –∏ —Ç.–¥.):/n –ú–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å -"
            )
        
        await state.set_state(GroupLessonStates.STUDENT_PERFORMANCE)

    async def handle_student_performance(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —É—á–µ–Ω–∏–∫–∞ –∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ –∑–∞–º–µ—Ç–∫–µ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –≠–¢–û–ì–û —É—á–µ–Ω–∏–∫–∞"""
        performance_text = message.text
        state_data = await state.get_data()
        student_id = state_data['current_student_id']
        lesson_id = state_data['current_lesson_id']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Å–ø–µ—Ö–∏ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —É—á–µ–Ω–∏–∫–∞
        self.db.save_lesson_report(lesson_id, student_id, student_performance=performance_text)
        
        # –í–°–ï–ì–î–ê —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π, –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        student_lessons = state_data['group_student_lessons']
        student_lesson = next((s for s in student_lessons if s['student_id'] == student_id), None)
        
        if not student_lesson:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: —É—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await state.clear()
            return
        
        attended = state_data.get('lesson_held', True)
        
        if attended:
            await message.answer(
                f"üë§ {student_lesson['full_name']}\n\n"
                f"–ó–∞–º–µ—Ç–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞:\n"
                f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π, –∫–æ—Ç–æ—Ä—ã–π —É–≤–∏–¥—è—Ç —Ä–æ–¥–∏—Ç–µ–ª–∏ {student_lesson['full_name']}:"
            )
        else:
            await message.answer(
                f"üë§ {student_lesson['full_name']}\n\n"
                f"–ó–∞–º–µ—Ç–∫–∞ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π —ç—Ç–æ–≥–æ —É—á–µ–Ω–∏–∫–∞:\n"
                f"–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π (–æ –ø—Ä–∏—á–∏–Ω–∞—Ö –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è, –¥–∞–ª—å–Ω–µ–π—à–∏—Ö –ø–ª–∞–Ω–∞—Ö –∏ —Ç.–¥.):"
            )
        
        await state.set_state(GroupLessonStates.PARENT_PERFORMANCE)

    async def _show_student_attendance(self, update, state: FSMContext, student_lesson, index):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–∏ —É—á–µ–Ω–∏–∫–∞"""
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text="‚úÖ –ë—ã–ª", callback_data=f"attend_yes:{student_lesson['student_id']}:{student_lesson['lesson_id']}")
        keyboard.button(text="‚ùå –ù–µ –±—ã–ª", callback_data=f"attend_no:{student_lesson['student_id']}:{student_lesson['lesson_id']}")
        
        if isinstance(update, Message):
            await update.answer(
                f"üë§ –£—á–µ–Ω–∏–∫ {index + 1}: {student_lesson['full_name']}\n\n–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏?",
                reply_markup=keyboard.as_markup()
            )
        else:
            await update.message.edit_text(
                f"üë§ –£—á–µ–Ω–∏–∫ {index + 1}: {student_lesson['full_name']}\n\n–ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª –Ω–∞ –∑–∞–Ω—è—Ç–∏–∏?",
                reply_markup=keyboard.as_markup()
            )
        
        await state.set_state(GroupLessonStates.STUDENT_ATTENDANCE)

    async def _next_group_student(self, update, state: FSMContext):
        """–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–µ–Ω–∏–∫—É"""
        state_data = await state.get_data()
        student_lessons = state_data['group_student_lessons']
        current_index = state_data['current_student_index'] + 1
        
        await state.update_data(current_student_index=current_index)
        
        if current_index >= len(student_lessons):
            await self._finish_group_report(update, state, student_lessons)
            return
        
        await self._show_student_attendance(update, state, student_lessons[current_index], current_index)

    async def _finish_group_report(self, update, state: FSMContext, student_lessons):
        """–ó–∞–≤–µ—Ä—à–∞–µ—Ç –æ—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–µ"""
        state_data = await state.get_data()
        
        with self.db.get_connection() as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute('SELECT g.name FROM groups g WHERE g.id = ?', (state_data['report_group_id'],))
            group_info = cursor.fetchone()
        
        group_name = group_info['name'] if group_info else '–ì—Ä—É–ø–ø–∞'
        message_text = f"‚úÖ –û—Ç—á–µ—Ç –ø–æ –≥—Ä—É–ø–ø–æ–≤–æ–º—É –∑–∞–Ω—è—Ç–∏—é '{group_name}' –∑–∞–≤–µ—Ä—à–µ–Ω!\n\n–û—Ç—á–µ—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö {len(student_lessons)} —É—á–µ–Ω–∏–∫–æ–≤"
        
        if isinstance(update, Message):
            await update.answer(message_text)
        else:
            await update.message.edit_text(message_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã —Ä–æ–¥–∏—Ç–µ–ª—è–º
        for student_lesson in student_lessons:
            try:
                await self.parent_reports.send_report_to_parent(
                    bot=update.bot,
                    lesson_id=student_lesson['lesson_id'],
                    student_id=student_lesson['student_id']
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ—Ç—á–µ—Ç–∞ –¥–ª—è —É—á–µ–Ω–∏–∫–∞ {student_lesson['student_id']}: {e}")
        
        await state.clear()

    async def handle_parent_performance(self, message: Message, state: FSMContext):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–º–µ—Ç–∫—É –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª–µ–π –ö–û–ù–ö–†–ï–¢–ù–û–ì–û —É—á–µ–Ω–∏–∫–∞"""
        parent_performance = message.text
        state_data = await state.get_data()
        student_id = state_data['current_student_id']
        lesson_id = state_data['current_lesson_id']
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º parent_performance –¥–ª—è –ö–û–ù–ö–†–ï–¢–ù–û–ì–û —É—á–µ–Ω–∏–∫–∞
        self.db.save_lesson_report(lesson_id, student_id, parent_performance=parent_performance)
        
        # –¢–µ–ø–µ—Ä—å –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —É—á–µ–Ω–∏–∫—É
        student_lessons = state_data['group_student_lessons']
        current_index = state_data['current_student_index'] + 1
        
        await state.update_data(current_student_index=current_index)
        
        if current_index < len(student_lessons):
            # –°–ª–µ–¥—É—é—â–∏–π —É—á–µ–Ω–∏–∫
            await self._show_student_attendance(message, state, student_lessons[current_index], current_index)
        else:
            # –í—Å–µ —É—á–µ–Ω–∏–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã - –∑–∞–≤–µ—Ä—à–∞–µ–º
            await self._finish_group_report(message, state, student_lessons)
