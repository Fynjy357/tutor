import logging
import sqlite3
import asyncio
from datetime import datetime
from aiogram.utils.keyboard import InlineKeyboardBuilder

logger = logging.getLogger(__name__)

class LessonScheduler:
    def __init__(self, db):
        self.db = db

    async def notify_tutor_about_lesson_end(self, bot):
        """–£–≤–µ–¥–æ–º–ª—è–µ—Ç —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –æ–± –æ–∫–æ–Ω—á–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π")
        while True:
            try:
                logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π...")
                now = datetime.now()
                now_str = now.strftime('%Y-%m-%d %H:%M:%S')
                
                with self.db.get_connection() as conn:
                    conn.row_factory = sqlite3.Row
                    cursor = conn.cursor()
                    
                    # –ü–æ–ª—É—á–∞–µ–º ID –ø–µ—Ä–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è –≤ –≥—Ä—É–ø–ø–µ –¥–ª—è callback_data
                    cursor.execute('''
                    SELECT l.group_id, l.lesson_date, l.duration, 
                        t.telegram_id as tutor_telegram_id,
                        g.name as group_name,
                        COUNT(l.id) as student_count,
                        GROUP_CONCAT(s.full_name) as student_names,
                        MIN(l.id) as first_lesson_id
                    FROM lessons l
                    JOIN tutors t ON l.tutor_id = t.id
                    LEFT JOIN groups g ON l.group_id = g.id
                    LEFT JOIN students s ON l.student_id = s.id
                    WHERE l.status = 'planned'
                    AND datetime(l.lesson_date, '+' || l.duration || ' minutes') 
                    BETWEEN datetime(?) AND datetime(?, '+5 minutes')
                    GROUP BY l.group_id, l.lesson_date, l.duration, t.telegram_id, g.name
                    ''', (now_str, now_str))
                    
                    lessons = cursor.fetchall()
                    logger.info(f"–ù–∞–π–¥–µ–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π (–≥—Ä—É–ø–ø–∏—Ä–æ–≤–∞–Ω–æ): {len(lessons)}")
                    
                    for lesson in lessons:
                        await self._send_lesson_notification(bot, conn, cursor, dict(lesson))
                
                await asyncio.sleep(60)
                
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: {e}")
                await asyncio.sleep(60)

    async def _send_lesson_notification(self, bot, conn, cursor, lesson_dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è"""
        tutor_id = lesson_dict['tutor_telegram_id']
        group_id = lesson_dict['group_id']
        start_time = lesson_dict['lesson_date']
        duration = lesson_dict['duration']
        first_lesson_id = lesson_dict['first_lesson_id']
        
        if group_id:  # –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
            logger.info(f"üë• –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ: –≥—Ä—É–ø–ø–∞={lesson_dict['group_name']}, "
                      f"ID={first_lesson_id}, —É—á–µ–Ω–∏–∫–æ–≤={lesson_dict['student_count']}")
            
            message = f"üéì –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ '{lesson_dict['group_name']}' –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            message += f"üìÖ –í—Ä–µ–º—è: {start_time}\n"
            message += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω\n"
            message += f"üë• –£—á–µ–Ω–∏–∫–æ–≤: {lesson_dict['student_count']}\n\n"
            message += "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –∑–∞–Ω—è—Ç–∏—é:"
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(
                text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç", 
                callback_data=f"group_report:{first_lesson_id}"
            )
            
        else:  # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
            logger.info(f"üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ: —É—á–µ–Ω–∏–∫={lesson_dict['student_names']}")
            
            message = f"üéì –ó–∞–Ω—è—Ç–∏–µ —Å {lesson_dict['student_names']} –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n"
            message += f"üìÖ –í—Ä–µ–º—è: {start_time}\n"
            message += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration} –º–∏–Ω\n\n"
            message += "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –æ—Ç—á–µ—Ç –ø–æ –∑–∞–Ω—è—Ç–∏—é:"
            
            keyboard = InlineKeyboardBuilder()
            keyboard.button(
                text="üìù –ó–∞–ø–æ–ª–Ω–∏—Ç—å –æ—Ç—á–µ—Ç", 
                callback_data=f"individual_report:{first_lesson_id}"
            )
        
        reply_markup = keyboard.as_markup()
        
        try:
            await bot.send_message(
                chat_id=tutor_id,
                text=message,
                reply_markup=reply_markup
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –í–°–ï–• –∑–∞–Ω—è—Ç–∏–π —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã
            await self._update_lesson_status(conn, cursor, group_id, start_time, lesson_dict['student_names'])
            
            logger.info(f"‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É {tutor_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")

    async def _update_lesson_status(self, conn, cursor, group_id, start_time, student_names):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –∑–∞–Ω—è—Ç–∏–π"""
        if group_id:
            cursor.execute('''
            UPDATE lessons 
            SET status = 'completed' 
            WHERE group_id = ? AND lesson_date = ? AND status = 'planned'
            ''', (group_id, start_time))
        else:
            cursor.execute('''
            UPDATE lessons 
            SET status = 'completed' 
            WHERE student_id IN (
                SELECT id FROM students WHERE full_name = ?
            ) AND lesson_date = ? AND status = 'planned'
            ''', (student_names, start_time))
        
        conn.commit()
