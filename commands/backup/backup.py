from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message, FSInputFile
from commands.config import SUPER_ADMIN_ID
import shutil
import os
from pathlib import Path
from datetime import datetime
import sqlite3
import zipfile
import asyncio
import subprocess
import tempfile

router = Router()

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∞ —Å –∏–º–µ–Ω–µ–º —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DATABASE_FILE = "tutor_bot.db"

def find_database_file():
    """–ü–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ –ø—Ä–æ–µ–∫—Ç–µ"""
    possible_db_files = [
        DATABASE_FILE,
        "database.db",
        "bot.db",
        "db/tutor_bot.db",
        "data/tutor_bot.db",
        "src/tutor_bot.db",
    ]
    
    for db_file in possible_db_files:
        db_path = Path(db_file)
        if db_path.exists():
            return db_path
    
    db_files = list(Path('.').rglob('*.db'))
    if db_files:
        return db_files[0]
    
    return None

@router.message(Command("backup"))
async def admin_create_backup(message: Message):
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    args = message.text.split()[1:] if message.text and len(message.text.split()) > 1 else []
    backup_type = "full"
    if args:
        backup_type = args[0].lower()
    
    await create_backup(message, backup_type)

async def create_backup(message: Message, backup_type: str = "full"):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏"""
    try:
        backup_dir = Path("backups")
        backup_dir.mkdir(exist_ok=True)
        
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        backup_filename = f"backup_{timestamp}_{backup_type}.zip"
        backup_path = backup_dir / backup_filename
        
        temp_dir = backup_dir / f"temp_{timestamp}"
        temp_dir.mkdir(exist_ok=True)
        
        status_msg = await message.answer("üîÑ –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏...")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –±—ç–∫–∞–ø
        if backup_type == "db":
            success = await backup_database_only(temp_dir, message)
        elif backup_type == "logs":
            success = await backup_logs_only(temp_dir, message)
        else:
            success = await backup_full(temp_dir, message)
        
        if not success:
            shutil.rmtree(temp_dir, ignore_errors=True)
            return
        
        # –°–æ–∑–¥–∞–µ–º ZIP –∞—Ä—Ö–∏–≤
        await create_zip_archive(temp_dir, backup_path, message)
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É
        shutil.rmtree(temp_dir, ignore_errors=True)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await send_backup_file(message, backup_path, backup_type)
        
        await status_msg.edit_text("‚úÖ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞ –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞!")
        await cleanup_old_backups(backup_dir)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏: {e}")
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –±—ç–∫–∞–ø–∞: {e}")

async def backup_database_only(temp_dir: Path, message: Message) -> bool:
    """–ë—ç–∫–∞–ø —Ç–æ–ª—å–∫–æ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SQLite backup API"""
    db_path = find_database_file()
    if not db_path or not db_path.exists():
        await message.answer(f"‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{DATABASE_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    try:
        # –ú–µ—Ç–æ–¥ 1: –ò—Å–ø–æ–ª—å–∑—É–µ–º SQLite backup API (—Å–∞–º—ã–π –Ω–∞–¥–µ–∂–Ω—ã–π)
        await message.answer("üîí –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
        
        # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –±—ç–∫–∞–ø–∞
        backup_db_path = temp_dir / f"backup_{db_path.name}"
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –∏—Å—Ö–æ–¥–Ω–æ–π –∏ —Ü–µ–ª–µ–≤–æ–π –±–∞–∑–∞–º
        source_conn = sqlite3.connect(db_path)
        backup_conn = sqlite3.connect(backup_db_path)
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º backup API –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
        source_conn.backup(backup_conn)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        backup_conn.close()
        source_conn.close()
        
        # –°–æ–∑–¥–∞–µ–º SQL –¥–∞–º–ø –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        await create_sql_dump(backup_db_path, temp_dir)
        
        await message.answer(f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞: {db_path.name}")
        return True
        
    except sqlite3.Error as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ SQLite –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞: {e}")
        return False
    except Exception as e:
        await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –±—ç–∫–∞–ø–∞ –ë–î: {e}")
        return False

async def backup_logs_only(temp_dir: Path, message: Message) -> bool:
    """–ë—ç–∫–∞–ø —Ç–æ–ª—å–∫–æ –ª–æ–≥–æ–≤"""
    logs_dir = Path("logs")
    if not logs_dir.exists():
        await message.answer("‚ùå –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    try:
        backup_logs_dir = temp_dir / "logs"
        shutil.copytree(logs_dir, backup_logs_dir)
        await message.answer("‚úÖ –õ–æ–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã")
        return True
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
        return False

async def backup_full(temp_dir: Path, message: Message) -> bool:
    """–ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø"""
    # –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_success = await backup_database_only(temp_dir, message)
    if not db_success:
        return False
    
    # –ë—ç–∫–∞–ø –ª–æ–≥–æ–≤
    logs_success = await backup_logs_only(temp_dir, message)
    
    # –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    config_files = [
        "commands/config.py",
        ".env",
        "requirements.txt",
        "bot.py",
        "admin_backup.py"
    ]
    
    try:
        copied_files = []
        for config_file in config_files:
            config_path = Path(config_file)
            if config_path.exists():
                backup_config_path = temp_dir / config_file
                backup_config_path.parent.mkdir(parents=True, exist_ok=True)
                shutil.copy2(config_path, backup_config_path)
                copied_files.append(config_file)
        
        if copied_files:
            await message.answer(f"‚úÖ –ö–æ–Ω—Ñ–∏–≥–∏ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω—ã: {', '.join(copied_files)}")
            
        return True
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥–æ–≤: {e}")
        return False

async def create_sql_dump(db_path: Path, temp_dir: Path):
    """–°–æ–∑–¥–∞–µ—Ç SQL –¥–∞–º–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    try:
        dump_path = temp_dir / "database_dump.sql"
        
        with sqlite3.connect(db_path) as conn:
            with open(dump_path, 'w', encoding='utf-8') as f:
                for line in conn.iterdump():
                    f.write(f'{line}\n')
                    
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è SQL –¥–∞–º–ø–∞: {e}")

async def create_zip_archive(source_dir: Path, zip_path: Path, message: Message):
    """–°–æ–∑–¥–∞–µ—Ç ZIP –∞—Ä—Ö–∏–≤ –∏–∑ –ø–∞–ø–∫–∏"""
    try:
        with zipfile.ZipFile(zip_path, 'w', zipfile.ZIP_DEFLATED) as zipf:
            for file_path in source_dir.rglob('*'):
                if file_path.is_file():
                    arcname = file_path.relative_to(source_dir)
                    zipf.write(file_path, arcname)
        
        file_size = zip_path.stat().st_size
        if file_size == 0:
            await message.answer("‚ö†Ô∏è –°–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π –∞—Ä—Ö–∏–≤. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–≥–æ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è.")
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ZIP –∞—Ä—Ö–∏–≤–∞: {e}")
        raise

async def send_backup_file(message: Message, backup_path: Path, backup_type: str):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–∞–π–ª –±—ç–∫–∞–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é"""
    try:
        file_size = backup_path.stat().st_size
        
        if file_size > 45 * 1024 * 1024:
            await message.answer(
                f"‚ö†Ô∏è –§–∞–π–ª –±—ç–∫–∞–ø–∞ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π ({file_size/1024/1024:.1f} MB). "
                f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram - 50MB.\n\n"
                f"üìÅ –§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –ª–æ–∫–∞–ª—å–Ω–æ: {backup_path}"
            )
            return
        
        backup_file = FSInputFile(backup_path)
        caption = (
            f"üíæ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞\n"
            f"üìÖ {datetime.now().strftime('%d.%m.%Y %H:%M:%S')}\n"
            f"üì¶ –¢–∏–ø: {backup_type}\n"
            f"üìè –†–∞–∑–º–µ—Ä: {file_size/1024/1024:.2f} MB"
        )
        
        await message.answer_document(
            document=backup_file,
            caption=caption,
            filename=backup_path.name
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–∞–π–ª–∞: {e}")

async def cleanup_old_backups(backup_dir: Path, keep_last: int = 10):
    """–û—á–∏—â–∞–µ—Ç —Å—Ç–∞—Ä—ã–µ –±—ç–∫–∞–ø—ã"""
    try:
        backup_files = list(backup_dir.glob("backup_*.zip"))
        
        if len(backup_files) > keep_last:
            backup_files.sort(key=lambda x: x.stat().st_mtime, reverse=True)
            
            for old_file in backup_files[keep_last:]:
                old_file.unlink()
                print(f"–£–¥–∞–ª–µ–Ω —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø: {old_file.name}")
                
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ —Å—Ç–∞—Ä—ã—Ö –±—ç–∫–∞–ø–æ–≤: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
@router.message(Command("db_status"))
async def admin_db_status(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    db_path = find_database_file()
    if not db_path or not db_path.exists():
        await message.answer(f"‚ùå –§–∞–π–ª –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö '{DATABASE_FILE}' –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ –±–∞–∑–µ
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∞–±–ª–∏—Ü–∞—Ö
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –±–∞–∑—ã
        file_size = db_path.stat().st_size
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
        main_tables = ['tutors', 'students', 'lessons']
        missing_tables = [table for table in main_tables if table not in [t[0] for t in tables]]
        
        conn.close()
        
        status_message = (
            f"üìä –°—Ç–∞—Ç—É—Å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n"
            f"üìÅ –§–∞–π–ª: {db_path.name}\n"
            f"üìè –†–∞–∑–º–µ—Ä: {file_size/1024/1024:.2f} MB\n"
            f"üìä –¢–∞–±–ª–∏—Ü: {len(tables)}\n"
        )
        
        if missing_tables:
            status_message += f"‚ö†Ô∏è –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ç–∞–±–ª–∏—Ü—ã: {', '.join(missing_tables)}\n"
        else:
            status_message += "‚úÖ –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç\n"
            
        status_message += f"‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è —á—Ç–µ–Ω–∏—è/–∑–∞–ø–∏—Å–∏"
        
        await message.answer(status_message)
        
    except sqlite3.Error as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
    except Exception as e:
        await message.answer(f"‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏—è –±–∞–∑—ã (–æ–ø–∞—Å–Ω–æ!)
@router.message(Command("db_unlock"))
async def admin_db_unlock(message: Message):
    """–ü–æ–ø—ã—Ç–∫–∞ –æ—Å–≤–æ–±–æ–¥–∏—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—É—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    await message.answer(
        "‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–æ—Ç–µ—Ä–µ –¥–∞–Ω–Ω—ã—Ö!\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è:\n"
        "1. –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±–æ—Ç–∞\n"
        "2. –°–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø\n"
        "3. –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /backup –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–µ–∑–µ—Ä–≤–Ω–æ–π –∫–æ–ø–∏–∏."
    )