from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message
from database import db
from datetime import datetime
from commands.config import SUPER_ADMIN_ID

router = Router()

@router.message(Command("payments"))
async def admin_payments_info(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if message.text and len(message.text.split()) > 1 else []
    
    if len(args) < 1:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –º–µ—Å—è—Ü –∏ –≥–æ–¥: /payments <–º–µ—Å—è—Ü><–≥–æ–¥>")
        await message.answer("üìù –ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ /payments 0925 (—Å–µ–Ω—Ç—è–±—Ä—å 2025)\n‚Ä¢ /payments 925 (—Å–µ–Ω—Ç—è–±—Ä—å 2025)")
        return
    
    month_year = args[0]
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞ (MMYY –∏–ª–∏ MYY)
    if len(month_year) not in [3, 4]:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <–º–µ—Å—è—Ü><–≥–æ–¥> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0925 –∏–ª–∏ 925)")
        await message.answer("üìù –ì–æ–¥ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–≤—É–º—è –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏: 25 = 2025")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥
    if len(month_year) == 3:  # –§–æ—Ä–º–∞—Ç MYY (–Ω–∞–ø—Ä–∏–º–µ—Ä: 925)
        month = month_year[0].zfill(2)  # '9' ‚Üí '09'
        year_short = month_year[1:3]    # '25'
    else:  # –§–æ—Ä–º–∞—Ç MMYY (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0925)
        month = month_year[0:2]         # '09'
        year_short = month_year[2:4]    # '25'
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≥–æ–¥ –≤ –ø–æ–ª–Ω—ã–π (25 ‚Üí 2025)
    try:
        year = f"20{year_short}"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 21 –≤–µ–∫
        if not (23 <= int(year_short) <= 99):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 2023-2099
            year = f"19{year_short}"  # –î–ª—è –≥–æ–¥–æ–≤ –¥–æ 2000
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–µ—Å—è—Ü–∞
    if not month.isdigit() or not (1 <= int(month) <= 12):
        await message.answer("‚ùå –ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 01 –¥–æ 12")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≥–æ–¥–∞
    if not year.isdigit() or not (1900 <= int(year) <= 2100):
        await message.answer("‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1900 –¥–æ 2100")
        return
    
    await show_all_payments(message, month, year)

async def show_all_payments(message: Message, month: str, year: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
            month_names = {
                '01': '–Ø–Ω–≤–∞—Ä—å', '02': '–§–µ–≤—Ä–∞–ª—å', '03': '–ú–∞—Ä—Ç', '04': '–ê–ø—Ä–µ–ª—å',
                '05': '–ú–∞–π', '06': '–ò—é–Ω—å', '07': '–ò—é–ª—å', '08': '–ê–≤–≥—É—Å—Ç',
                '09': '–°–µ–Ω—Ç—è–±—Ä—å', '10': '–û–∫—Ç—è–±—Ä—å', '11': '–ù–æ—è–±—Ä—å', '12': '–î–µ–∫–∞–±—Ä—å'
            }
            month_name = month_names.get(month, f"–ú–µ—Å—è—Ü {month}")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É—Å–ø–µ—à–Ω—ã–µ –ø–ª–∞—Ç–µ–∂–∏ –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
            cursor.execute("""
                SELECT p.id, p.user_id, t.full_name, p.payment_id, 
                       p.tariff_name, p.amount, p.created_at, p.valid_until
                FROM payments p
                LEFT JOIN tutors t ON t.telegram_id = p.user_id
                WHERE p.status = 'succeeded'
                AND strftime('%m', p.created_at) = ?
                AND strftime('%Y', p.created_at) = ?
                ORDER BY p.created_at DESC
            """, (month.zfill(2), year))
            
            payments = cursor.fetchall()
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_payments,
                    SUM(p.amount) as total_amount,
                    COUNT(DISTINCT p.user_id) as unique_users
                FROM payments p
                WHERE p.status = 'succeeded'
                AND strftime('%m', p.created_at) = ?
                AND strftime('%Y', p.created_at) = ?
            """, (month.zfill(2), year))
            
            stats = cursor.fetchone()
            total_payments, total_amount, unique_users = stats if stats else (0, 0, 0)
            
            if not payments:
                response = (
                    f"üí≥ –û—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º –∑–∞ {month_name} {year} –≥–æ–¥–∞\n\n"
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: 0\n"
                    f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: 0\n"
                    f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: 0 —Ä—É–±.\n\n"
                    f"‚ùå –ü–ª–∞—Ç–µ–∂–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ"
                )
            else:
                response = (
                    f"üí≥ –û—Ç—á–µ—Ç –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º –∑–∞ {month_name} {year} –≥–æ–¥–∞\n\n"
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments}\n"
                    f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users}\n"
                    f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount:.2f} —Ä—É–±.\n\n"
                    f"üìã –°–ø–∏—Å–æ–∫ –ø–ª–∞—Ç–µ–∂–µ–π:\n\n"
                )
                
                for i, payment in enumerate(payments, 1):
                    payment_id, user_id, full_name, payment_system_id, tariff_name, amount, created_at, valid_until = payment
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—ã
                    try:
                        payment_date = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
                    except:
                        payment_date = str(created_at)
                    
                    try:
                        if valid_until:
                            valid_date = datetime.strptime(valid_until, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
                        else:
                            valid_date = "–ù–µ —É–∫–∞–∑–∞–Ω–æ"
                    except:
                        valid_date = str(valid_until)
                    
                    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ None –∑–Ω–∞—á–µ–Ω–∏—è
                    full_name = full_name or "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
                    user_id = user_id or "–ù–µ–∏–∑–≤–µ—Å—Ç–µ–Ω"
                    
                    response += (
                        f"{i}. üí∞ {amount:.2f} —Ä—É–±. - {tariff_name}\n"
                        f"   üë§ {full_name} (ID: {user_id})\n"
                        f"   üìÖ –û–ø–ª–∞—Ç–∞: {payment_date}\n"
                        f"   üé´ ID –ø–ª–∞—Ç–µ–∂–∞: {payment_system_id}\n"
                        f"   üìÜ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {valid_date}\n"
                        f"   {'‚îÄ' * 30}\n"
                    )
                
                # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂–µ–π –º–Ω–æ–≥–æ, —Ä–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
                if len(response) > 4000:
                    parts = [response[i:i+4000] for i in range(0, len(response), 4000)]
                    for part in parts:
                        await message.answer(part)
                        # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
                        import asyncio
                        await asyncio.sleep(0.5)
                else:
                    await message.answer(response)
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –ø–ª–∞—Ç–µ–∂–µ–π: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
@router.message(Command("payments_stats"))
async def payments_stats(message: Message):
    """–ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –ø–ª–∞—Ç–µ–∂–∞–º –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        current_month = datetime.now().strftime('%m')
        current_year = datetime.now().strftime('%Y')
        
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute("""
                SELECT 
                    COUNT(*) as total_payments,
                    SUM(amount) as total_amount,
                    COUNT(DISTINCT user_id) as unique_users
                FROM payments 
                WHERE status = 'succeeded'
                AND strftime('%m', created_at) = ?
                AND strftime('%Y', created_at) = ?
            """, (current_month, current_year))
            
            stats = cursor.fetchone()
            
            if stats:
                total_payments, total_amount, unique_users = stats
                month_names = {
                    '01': '–Ø–Ω–≤–∞—Ä—å', '02': '–§–µ–≤—Ä–∞–ª—å', '03': '–ú–∞—Ä—Ç', '04': '–ê–ø—Ä–µ–ª—å',
                    '05': '–ú–∞–π', '06': '–ò—é–Ω—å', '07': '–ò—é–ª—å', '08': '–ê–≤–≥—É—Å—Ç',
                    '09': '–°–µ–Ω—Ç—è–±—Ä—å', '10': '–û–∫—Ç—è–±—Ä—å', '11': '–ù–æ—è–±—Ä—å', '12': '–î–µ–∫–∞–±—Ä—å'
                }
                month_name = month_names.get(current_month, f"–ú–µ—Å—è—Ü {current_month}")
                
                await message.answer(
                    f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ {month_name} {current_year}:\n\n"
                    f"‚Ä¢ –í—Å–µ–≥–æ –ø–ª–∞—Ç–µ–∂–µ–π: {total_payments or 0}\n"
                    f"‚Ä¢ –£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {unique_users or 0}\n"
                    f"‚Ä¢ –û–±—â–∞—è —Å—É–º–º–∞: {total_amount or 0:.2f} —Ä—É–±."
                )
            else:
                await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü")
                
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")