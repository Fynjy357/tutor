from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message
from commands.config import SUPER_ADMIN_ID
import platform
import socket
import datetime
import os
from pathlib import Path
import subprocess
import sys
from typing import Dict, List, Tuple
import asyncio

router = Router()

def get_disk_usage(path: str = '.') -> Dict[str, float]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –¥–∏—Å–∫–∞"""
    try:
        if os.name == 'nt':  # Windows
            import ctypes
            free_bytes = ctypes.c_ulonglong(0)
            total_bytes = ctypes.c_ulonglong(0)
            ctypes.windll.kernel32.GetDiskFreeSpaceExW(
                ctypes.c_wchar_p(path), None, ctypes.pointer(total_bytes), ctypes.pointer(free_bytes)
            )
            total = total_bytes.value
            free = free_bytes.value
            used = total - free
        else:  # Linux/Mac
            stat = os.statvfs(path)
            total = stat.f_blocks * stat.f_frsize
            free = stat.f_bfree * stat.f_frsize
            used = total - free
            
        return {
            'total': total,
            'used': used,
            'free': free,
            'percent': (used / total) * 100 if total > 0 else 0
        }
    except:
        return {'total': 0, 'used': 0, 'free': 0, 'percent': 0}

def get_memory_info() -> Dict[str, float]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–º—è—Ç–∏"""
    try:
        if os.name == 'nt':  # Windows
            import ctypes
            class MEMORYSTATUSEX(ctypes.Structure):
                _fields_ = [
                    ("dwLength", ctypes.c_ulong),
                    ("dwMemoryLoad", ctypes.c_ulong),
                    ("ullTotalPhys", ctypes.c_ulonglong),
                    ("ullAvailPhys", ctypes.c_ulonglong),
                    ("ullTotalPageFile", ctypes.c_ulonglong),
                    ("ullAvailPageFile", ctypes.c_ulonglong),
                    ("ullTotalVirtual", ctypes.c_ulonglong),
                    ("ullAvailVirtual", ctypes.c_ulonglong),
                    ("ullExtendedVirtual", ctypes.c_ulonglong),
                ]

            memory_status = MEMORYSTATUSEX()
            memory_status.dwLength = ctypes.sizeof(MEMORYSTATUSEX)
            ctypes.windll.kernel32.GlobalMemoryStatusEx(ctypes.byref(memory_status))
            
            return {
                'total': memory_status.ullTotalPhys,
                'available': memory_status.ullAvailPhys,
                'used': memory_status.ullTotalPhys - memory_status.ullAvailPhys,
                'percent': memory_status.dwMemoryLoad
            }
        else:  # Linux/Mac
            with open('/proc/meminfo', 'r') as mem:
                lines = mem.readlines()
                total = int(lines[0].split()[1]) * 1024
                available = int(lines[2].split()[1]) * 1024
                
            return {
                'total': total,
                'available': available,
                'used': total - available,
                'percent': ((total - available) / total) * 100 if total > 0 else 0
            }
    except:
        return {'total': 0, 'available': 0, 'used': 0, 'percent': 0}

def get_cpu_info() -> Dict[str, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ CPU"""
    info = {}
    
    try:
        if os.name == 'nt':  # Windows
            import winreg
            key = winreg.OpenKey(winreg.HKEY_LOCAL_MACHINE, r"HARDWARE\DESCRIPTION\System\CentralProcessor\0")
            info['name'] = winreg.QueryValueEx(key, "ProcessorNameString")[0]
            info['cores'] = str(os.cpu_count())
        else:  # Linux/Mac
            with open('/proc/cpuinfo', 'r') as cpuinfo:
                for line in cpuinfo:
                    if line.strip() and ':' in line:
                        key, value = line.split(':', 1)
                        key = key.strip()
                        value = value.strip()
                        if key == 'model name':
                            info['name'] = value
                        elif key == 'cpu cores':
                            info['cores'] = value
            if 'cores' not in info:
                info['cores'] = str(os.cpu_count() or 1)
    except:
        info['name'] = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä"
        info['cores'] = str(os.cpu_count() or 1)
    
    return info

def get_system_uptime() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    try:
        if os.name == 'nt':  # Windows
            import ctypes
            lib = ctypes.windll.kernel32
            tick_count = lib.GetTickCount64()
            uptime_seconds = tick_count // 1000
        else:  # Linux/Mac
            with open('/proc/uptime', 'r') as f:
                uptime_seconds = float(f.readline().split()[0])
        
        hours, remainder = divmod(uptime_seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        days, hours = divmod(hours, 24)
        
        uptime_parts = []
        if days > 0:
            uptime_parts.append(f"{int(days)}–¥")
        if hours > 0:
            uptime_parts.append(f"{int(hours)}—á")
        if minutes > 0:
            uptime_parts.append(f"{int(minutes)}–º")
        if seconds > 0 and len(uptime_parts) < 2:
            uptime_parts.append(f"{int(seconds)}—Å")
            
        return ' '.join(uptime_parts) if uptime_parts else "0—Å"
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def get_bot_uptime() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞"""
    try:
        # –ü—Ä–æ—Å—Ç–æ–π —Å–ø–æ—Å–æ–± - –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞ –º–æ–¥—É–ª—è
        start_time = datetime.datetime.fromtimestamp(Path(__file__).stat().st_mtime)
        uptime = datetime.datetime.now() - start_time
        
        days = uptime.days
        hours, remainder = divmod(uptime.seconds, 3600)
        minutes, seconds = divmod(remainder, 60)
        
        uptime_parts = []
        if days > 0:
            uptime_parts.append(f"{days}–¥")
        if hours > 0:
            uptime_parts.append(f"{hours}—á")
        if minutes > 0:
            uptime_parts.append(f"{minutes}–º")
        if seconds > 0:
            uptime_parts.append(f"{seconds}—Å")
            
        return ' '.join(uptime_parts) if uptime_parts else "0—Å"
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def get_system_info() -> Dict[str, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    info = {}
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–µ
    info['platform'] = platform.platform()
    info['system'] = platform.system()
    info['release'] = platform.release()
    info['version'] = platform.version()
    info['architecture'] = platform.architecture()[0]
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Python
    info['python_version'] = platform.python_version()
    info['python_implementation'] = platform.python_implementation()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ CPU
    cpu_info = get_cpu_info()
    info['processor'] = cpu_info.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä')
    info['cpu_cores'] = cpu_info.get('cores', '1')
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–º—è—Ç–∏
    memory = get_memory_info()
    info['memory_total'] = f"{memory['total'] / (1024**3):.1f} GB"
    info['memory_available'] = f"{memory['available'] / (1024**3):.1f} GB"
    info['memory_used'] = f"{memory['used'] / (1024**3):.1f} GB"
    info['memory_percent'] = f"{memory['percent']:.1f}%"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ
    disk = get_disk_usage()
    info['disk_total'] = f"{disk['total'] / (1024**3):.1f} GB"
    info['disk_used'] = f"{disk['used'] / (1024**3):.1f} GB"
    info['disk_free'] = f"{disk['free'] / (1024**3):.1f} GB"
    info['disk_percent'] = f"{disk['percent']:.1f}%"
    
    # –°–µ—Ç–µ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    hostname = socket.gethostname()
    info['hostname'] = hostname
    try:
        info['ip_address'] = socket.gethostbyname(hostname)
    except:
        info['ip_address'] = "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å"
    
    # –í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã
    info['system_uptime'] = get_system_uptime()
    info['bot_uptime'] = get_bot_uptime()
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ—Å—Å–µ
    info['pid'] = str(os.getpid())
    info['working_dir'] = os.getcwd()
    
    return info

def get_bot_info() -> Dict[str, str]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    info = {}
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–∞—Ö –±–æ—Ç–∞
    bot_files = [
        'bot.py', 'commands/', 'handlers/', 'tutor_bot.db', 
        'logs/', 'backups/', '.env', 'requirements.txt'
    ]
    
    file_info = []
    total_size = 0
    
    for file_path in bot_files:
        path = Path(file_path)
        if path.exists():
            if path.is_file():
                size = path.stat().st_size
                total_size += size
                file_info.append(f"üìÑ {file_path} ({size/1024:.1f} KB)")
            else:
                # –î–ª—è –ø–∞–ø–æ–∫ —Å—á–∏—Ç–∞–µ–º –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä
                folder_size = 0
                for f in path.rglob('*'):
                    if f.is_file():
                        folder_size += f.stat().st_size
                total_size += folder_size
                file_info.append(f"üìÅ {file_path}/ ({folder_size/1024:.1f} KB)")
        else:
            file_info.append(f"‚ùå {file_path} (–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)")
    
    info['files'] = file_info
    info['total_size'] = f"{total_size / (1024**2):.2f} MB"
    
    # –†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_path = Path("tutor_bot.db")
    if db_path.exists():
        db_size = db_path.stat().st_size
        info['db_size'] = f"{db_size / (1024**2):.2f} MB"
        info['db_tables'] = get_database_tables_count(db_path)
    else:
        info['db_size'] = "–ù–µ –Ω–∞–π–¥–µ–Ω–∞"
        info['db_tables'] = "0"
    
    # –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ª–æ–≥ —Ñ–∞–π–ª–æ–≤
    logs_dir = Path("logs")
    if logs_dir.exists():
        log_files = list(logs_dir.glob("*.log"))
        info['log_files'] = str(len(log_files))
    else:
        info['log_files'] = "0"
    
    return info

def get_database_tables_count(db_path: Path) -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    try:
        import sqlite3
        conn = sqlite3.connect(db_path)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM sqlite_master WHERE type='table'")
        count = cursor.fetchone()[0]
        conn.close()
        return str(count)
    except:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"

def format_system_info(info: Dict[str, str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ –≤ —á–∏—Ç–∞–µ–º—ã–π –≤–∏–¥"""
    message = "üñ•Ô∏è *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –°–ò–°–¢–ï–ú–ï*\n\n"
    
    message += "üíª *–°–∏—Å—Ç–µ–º–∞:*\n"
    message += f"‚Ä¢ –û–°: {info['platform']}\n"
    message += f"‚Ä¢ –ê—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞: {info['architecture']}\n"
    message += f"‚Ä¢ –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {info['processor'][:50]}...\n"
    message += f"‚Ä¢ –Ø–¥–µ—Ä: {info['cpu_cores']}\n\n"
    
    message += "üß† *–ü–∞–º—è—Ç—å:*\n"
    message += f"‚Ä¢ –í—Å–µ–≥–æ: {info['memory_total']}\n"
    message += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {info['memory_used']} ({info['memory_percent']})\n"
    message += f"‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ: {info['memory_available']}\n\n"
    
    message += "üíæ *–î–∏—Å–∫:*\n"
    message += f"‚Ä¢ –í—Å–µ–≥–æ: {info['disk_total']}\n"
    message += f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {info['disk_used']} ({info['disk_percent']})\n"
    message += f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {info['disk_free']}\n\n"
    
    message += "üåê *–°–µ—Ç—å:*\n"
    message += f"‚Ä¢ –•–æ—Å—Ç: {info['hostname']}\n"
    message += f"‚Ä¢ IP: {info['ip_address']}\n\n"
    
    message += "‚è∞ *–í—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã:*\n"
    message += f"‚Ä¢ –°–∏—Å—Ç–µ–º–∞: {info['system_uptime']}\n"
    message += f"‚Ä¢ –ë–æ—Ç: {info['bot_uptime']}\n\n"
    
    message += "üêç *Python:*\n"
    message += f"‚Ä¢ –í–µ—Ä—Å–∏—è: {info['python_version']}\n"
    message += f"‚Ä¢ PID: {info['pid']}\n"
    message += f"‚Ä¢ –†–∞–±–æ—á–∞—è –ø–∞–ø–∫–∞: {info['working_dir']}\n"
    
    return message

def format_bot_info(info: Dict[str, str]) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ"""
    message = "ü§ñ *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–û–¢–ï*\n\n"
    
    message += f"üìä *–û–±—â–∏–π —Ä–∞–∑–º–µ—Ä:* {info['total_size']}\n"
    message += f"üóÑÔ∏è *–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö:* {info['db_size']} ({info['db_tables']} —Ç–∞–±–ª–∏—Ü)\n"
    message += f"üìã *–õ–æ–≥ —Ñ–∞–π–ª–æ–≤:* {info['log_files']}\n\n"
    
    message += "üìÅ *–§–∞–π–ª—ã –ø—Ä–æ–µ–∫—Ç–∞:*\n"
    for file_info in info['files'][:8]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 8 —Ñ–∞–π–ª–æ–≤
        message += f"‚Ä¢ {file_info}\n"
    
    if len(info['files']) > 8:
        message += f"‚Ä¢ ... –∏ –µ—â–µ {len(info['files']) - 8} —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫\n"
    
    return message

@router.message(Command("system_info"))
async def admin_system_info(message: Message):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        status_msg = await message.answer("üîÑ –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ...")
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        system_info = get_system_info()
        bot_info = get_bot_info()
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        system_message = format_system_info(system_info)
        bot_message = format_bot_info(bot_info)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç—è–º–∏
        await status_msg.edit_text(system_message, parse_mode='Markdown')
        await asyncio.sleep(1)
        await message.answer(bot_message, parse_mode='Markdown')
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏—Å—Ç–µ–º–µ: {e}")

@router.message(Command("disk_info"))
async def admin_disk_info(message: Message):
    """–î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        disk_info = get_disk_usage()
        project_size = 0
        
        # –°—á–∏—Ç–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞
        for path in Path('.').rglob('*'):
            if path.is_file():
                project_size += path.stat().st_size
        
        message_text = (
            "üíæ *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –î–ò–°–ö–ï*\n\n"
            f"üì¶ *–í–µ—Å—å –¥–∏—Å–∫:*\n"
            f"‚Ä¢ –í—Å–µ–≥–æ: {disk_info['total'] / (1024**3):.1f} GB\n"
            f"‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {disk_info['used'] / (1024**3):.1f} GB\n"
            f"‚Ä¢ –°–≤–æ–±–æ–¥–Ω–æ: {disk_info['free'] / (1024**3):.1f} GB\n"
            f"‚Ä¢ –ó–∞–ø–æ–ª–Ω–µ–Ω–æ: {disk_info['percent']:.1f}%\n\n"
            f"üìÅ *–ü—Ä–æ–µ–∫—Ç –±–æ—Ç–∞:*\n"
            f"‚Ä¢ –†–∞–∑–º–µ—Ä: {project_size / (1024**3):.2f} GB\n"
            f"‚Ä¢ –ü–∞–ø–∫–∞: {os.getcwd()}\n"
        )
        
        await message.answer(message_text, parse_mode='Markdown')
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –¥–∏—Å–∫–µ: {e}")

async def admin_bot_files(message: Message):
    """–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –±–æ—Ç–∞ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        status_msg = await message.answer("üìÅ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Ñ–∞–π–ª–æ–≤ –∏ –ø–∞–ø–æ–∫ –≤ –ø—Ä–æ–µ–∫—Ç–µ
        files_info = []
        total_size = 0
        file_count = 0
        folder_count = 0
        
        for item in Path('.').iterdir():
            if item.is_file():
                size = item.stat().st_size
                total_size += size
                file_count += 1
                files_info.append(f"üìÑ {item.name} ({size/1024:.1f} KB)")
            elif item.is_dir() and not item.name.startswith('.'):  # –ò—Å–∫–ª—é—á–∞–µ–º —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–ø–∫–∏
                folder_size = 0
                folder_files = 0
                for f in item.rglob('*'):
                    if f.is_file():
                        folder_size += f.stat().st_size
                        folder_files += 1
                
                total_size += folder_size
                file_count += folder_files
                folder_count += 1
                files_info.append(f"üìÅ {item.name}/ ({folder_size/1024:.1f} KB, {folder_files} —Ñ–∞–π–ª–æ–≤)")
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É (–ø–æ —É–±—ã–≤–∞–Ω–∏—é)
        files_info.sort(key=lambda x: float(x.split('(')[1].split()[0]), reverse=True)
        
        message_text = (
            f"üìä *–§–ê–ô–õ–´ –ü–†–û–ï–ö–¢–ê*\n\n"
            f"üì¶ *–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {file_count}\n"
            f"‚Ä¢ –ü–∞–ø–æ–∫: {folder_count}\n"
            f"‚Ä¢ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {total_size / (1024**2):.2f} MB\n\n"
            f"üìã *–°–∞–º—ã–µ –∫—Ä—É–ø–Ω—ã–µ —Ñ–∞–π–ª—ã/–ø–∞–ø–∫–∏:*\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-10 —Å–∞–º—ã—Ö –∫—Ä—É–ø–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤/–ø–∞–ø–æ–∫
        for i, file_info in enumerate(files_info[:10], 1):
            message_text += f"{i}. {file_info}\n"
        
        if len(files_info) > 10:
            message_text += f"\n... –∏ –µ—â–µ {len(files_info) - 10} —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
        
        await status_msg.edit_text(message_text, parse_mode='Markdown')
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: {e}")
async def admin_python_info(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Python –æ–∫—Ä—É–∂–µ–Ω–∏–∏"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Python
        python_info = {
            'version': platform.python_version(),
            'implementation': platform.python_implementation(),
            'compiler': platform.python_compiler(),
            'build': platform.python_build(),
            'executable': sys.executable,
            'path': sys.path[:3] + ['...'] + sys.path[-2:] if len(sys.path) > 5 else sys.path
        }
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤
        try:
            import pkg_resources
            installed_packages = []
            for dist in pkg_resources.working_set:
                installed_packages.append(f"{dist.project_name}=={dist.version}")
            
            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –±–µ—Ä–µ–º —Ç–æ–ø-15 —Å–∞–º—ã—Ö –≤–∞–∂–Ω—ã—Ö
            important_packages = [
                'aiogram', 'aiohttp', 'sqlite3', 'python-dotenv', 
                'pytz', 'requests', 'pillow', 'numpy', 'pandas'
            ]
            
            top_packages = []
            for pkg in important_packages:
                for installed in installed_packages:
                    if pkg in installed.lower():
                        top_packages.append(installed)
                        break
            
            # –î–æ–±–∞–≤–ª—è–µ–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–∞–∫–µ—Ç–æ–≤ –¥–æ 15
            other_packages = [p for p in installed_packages if p not in top_packages]
            top_packages.extend(other_packages[:15 - len(top_packages)])
            
        except ImportError:
            top_packages = ["–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–∫–µ—Ç–æ–≤ (pkg_resources)"]
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        message_text = (
            "üêç *–ò–ù–§–û–†–ú–ê–¶–ò–Ø –û PYTHON*\n\n"
            f"üîß *–í–µ—Ä—Å–∏—è:* {python_info['version']}\n"
            f"üèóÔ∏è *–†–µ–∞–ª–∏–∑–∞—Ü–∏—è:* {python_info['implementation']}\n"
            f"‚öôÔ∏è *–ö–æ–º–ø–∏–ª—è—Ç–æ—Ä:* {python_info['compiler']}\n"
            f"üì¶ *–°–±–æ—Ä–∫–∞:* {python_info['build'][0]} ({python_info['build'][1]})\n"
            f"üöÄ *–ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª:* {python_info['executable']}\n\n"
            "üìÅ *–ü—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞:*\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞
        for i, path in enumerate(python_info['path']):
            if i < 3 or i >= len(python_info['path']) - 2:
                message_text += f"‚Ä¢ {path}\n"
            elif i == 3:
                message_text += "‚Ä¢ ...\n"
        
        message_text += f"\nüìã *–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –ø–∞–∫–µ—Ç—ã ({len(top_packages)} –∏–∑ {len(installed_packages) if 'installed_packages' in locals() else '?'}):*\n"
        
        for i, pkg in enumerate(top_packages[:15], 1):
            message_text += f"{i}. {pkg}\n"
        
        if len(top_packages) > 15:
            message_text += f"... –∏ –µ—â–µ {len(top_packages) - 15} –ø–∞–∫–µ—Ç–æ–≤"
        
        await message.answer(message_text, parse_mode='Markdown')
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ Python: {e}")

@router.message(Command("system_health"))
async def admin_system_health(message: Message):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        status_msg = await message.answer("ü©∫ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã...")
        
        checks = []
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–∏—Å–∫–∞
        disk = get_disk_usage()
        disk_status = "‚úÖ" if disk['percent'] < 90 else "‚ö†Ô∏è" if disk['percent'] < 95 else "‚ùå"
        checks.append(f"{disk_status} –î–∏—Å–∫: {disk['percent']:.1f}% –∑–∞–ø–æ–ª–Ω–µ–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞–º—è—Ç–∏
        memory = get_memory_info()
        memory_status = "‚úÖ" if memory['percent'] < 80 else "‚ö†Ô∏è" if memory['percent'] < 90 else "‚ùå"
        checks.append(f"{memory_status} –ü–∞–º—è—Ç—å: {memory['percent']:.1f}% –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        db_path = Path("tutor_bot.db")
        db_status = "‚úÖ" if db_path.exists() else "‚ùå"
        db_size = db_path.stat().st_size if db_path.exists() else 0
        checks.append(f"{db_status} –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {db_size / (1024**2):.2f} MB")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–≥–æ–≤
        logs_dir = Path("logs")
        log_status = "‚úÖ" if logs_dir.exists() and list(logs_dir.glob("*.log")) else "‚ö†Ô∏è"
        log_count = len(list(logs_dir.glob("*.log"))) if logs_dir.exists() else 0
        checks.append(f"{log_status} –õ–æ–≥ —Ñ–∞–π–ª—ã: {log_count} —à—Ç")
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–∞
        env_path = Path(".env")
        env_status = "‚úÖ" if env_path.exists() else "‚ùå"
        checks.append(f"{env_status} –§–∞–π–ª .env: {'–Ω–∞–π–¥–µ–Ω' if env_status == '‚úÖ' else '–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}")
        
        # –û–±—â–∞—è –æ—Ü–µ–Ω–∫–∞
        error_count = sum(1 for check in checks if '‚ùå' in check)
        warning_count = sum(1 for check in checks if '‚ö†Ô∏è' in check)
        
        if error_count > 0:
            overall_status = "‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
        elif warning_count > 0:
            overall_status = "‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è"
        else:
            overall_status = "‚úÖ –û—Ç–ª–∏—á–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ"
        
        message_text = (
            f"ü©∫ *–ü–†–û–í–ï–†–ö–ê –ó–î–û–†–û–í–¨–Ø –°–ò–°–¢–ï–ú–´*\n\n"
            f"üìä *–û–±—â–∏–π —Å—Ç–∞—Ç—É—Å:* {overall_status}\n"
            f"‚ùå –û—à–∏–±–∫–∏: {error_count}, ‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {warning_count}\n\n"
            "üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–æ–∫:*\n"
        )
        
        for check in checks:
            message_text += f"‚Ä¢ {check}\n"
        
        message_text += (
            f"\nüí° *–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:*\n"
            f"{'‚Ä¢ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ª–∏—á–∏–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫' if error_count > 0 else ''}"
            f"{'‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è' if warning_count > 0 else '‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –≤ –æ—Ç–ª–∏—á–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏!'}"
        )
        
        await status_msg.edit_text(message_text, parse_mode='Markdown')
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã: {e}")

# –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –ø–æ–º–æ—â–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
@router.message(Command("system_help"))
async def admin_system_help(message: Message):
    """–ü–æ–º–æ—â—å –ø–æ —Å–∏—Å—Ç–µ–º–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    help_text = (
        "ü§ñ *–°–ò–°–¢–ï–ú–ù–´–ï –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê*\n\n"
        "üìä *–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥:*\n"
        "‚Ä¢ `/system_info` - –ø–æ–ª–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–∏—Å—Ç–µ–º–µ\n"
        "‚Ä¢ `/disk_info` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–∏—Å–∫–µ\n"
        "‚Ä¢ `/bot_files` - —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞\n"
        "‚Ä¢ `/python_info` - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Python\n"
        "‚Ä¢ `/system_health` - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã\n\n"
        "üõ†Ô∏è *–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:*\n"
        "‚Ä¢ `/restart` - –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ –±–æ—Ç–∞\n"
        "‚Ä¢ `/shutdown` - –≤—ã–∫–ª—é—á–µ–Ω–∏–µ –±–æ—Ç–∞\n"
        "‚Ä¢ `/logs` - –ø—Ä–æ—Å–º–æ—Ç—Ä –ª–æ–≥–æ–≤\n\n"
        "üìã *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:*\n"
        "‚Ä¢ `/stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞\n"
        "‚Ä¢ `/users` - —Å–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "‚Ä¢ `/db_stats` - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö\n\n"
        "‚ùì *–ü–æ–º–æ—â—å:*\n"
        "‚Ä¢ `/system_help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\n"
        "‚ö†Ô∏è *–¢–æ–ª—å–∫–æ –¥–ª—è —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞*"
    )
    
    await message.answer(help_text, parse_mode='Markdown')