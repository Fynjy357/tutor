from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message
from database import db

from datetime import datetime
from commands.config import SUPER_ADMIN_ID

router = Router()

@router.message(Command("ref_pay"))
async def admin_paid_referrals_info(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if message.text and len(message.text.split()) > 1 else []
    
    if len(args) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ Telegram ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞, –º–µ—Å—è—Ü –∏ –≥–æ–¥: /ref_pay <telegram_id> <–º–µ—Å—è—Ü><–≥–æ–¥>")
        await message.answer("üìù –ü—Ä–∏–º–µ—Ä—ã:\n‚Ä¢ /ref_pay 123456789 0925 (—Å–µ–Ω—Ç—è–±—Ä—å 2025)\n‚Ä¢ /ref_pay 123456789 925 (—Å–µ–Ω—Ç—è–±—Ä—å 2025)")
        return
    
    telegram_id = args[0]
    month_year = args[1]
    
    if not telegram_id.isdigit():
        await message.answer("‚ùå Telegram ID –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –º–µ—Å—è—Ü–∞ –∏ –≥–æ–¥–∞ (MMYY –∏–ª–∏ MYY)
    if len(month_year) not in [3, 4]:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: <–º–µ—Å—è—Ü><–≥–æ–¥> (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0925 –∏–ª–∏ 925)")
        await message.answer("üìù –ì–æ–¥ —É–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –¥–≤—É–º—è –ø–æ—Å–ª–µ–¥–Ω–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏: 25 = 2025")
        return
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—Ü –∏ –≥–æ–¥
    if len(month_year) == 3:  # –§–æ—Ä–º–∞—Ç MYY (–Ω–∞–ø—Ä–∏–º–µ—Ä: 925)
        month = month_year[0].zfill(2)  # '9' ‚Üí '09'
        year_short = month_year[1:3]    # '25'
    else:  # –§–æ—Ä–º–∞—Ç MMYY (–Ω–∞–ø—Ä–∏–º–µ—Ä: 0925)
        month = month_year[0:2]         # '09'
        year_short = month_year[2:4]    # '25'
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–π –≥–æ–¥ –≤ –ø–æ–ª–Ω—ã–π (25 ‚Üí 2025)
    try:
        year = f"20{year_short}"  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º 21 –≤–µ–∫
        if not (23 <= int(year_short) <= 99):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω 2023-2099
            year = f"19{year_short}"  # –î–ª—è –≥–æ–¥–æ–≤ –¥–æ 2000
    except:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≥–æ–¥–∞")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –º–µ—Å—è—Ü–∞
    if not month.isdigit() or not (1 <= int(month) <= 12):
        await message.answer("‚ùå –ú–µ—Å—è—Ü –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 01 –¥–æ 12")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≥–æ–¥–∞
    if not year.isdigit() or not (1900 <= int(year) <= 2100):
        await message.answer("‚ùå –ì–æ–¥ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 1900 –¥–æ 2100")
        return
    
    await show_paid_referrals(message, telegram_id, month, year)

async def show_paid_referrals(message: Message, telegram_id: str, month: str, year: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø–æ telegram_id
            cursor.execute(
                "SELECT id, full_name, phone FROM tutors WHERE telegram_id = ?", 
                (int(telegram_id),)
            )
            tutor_data = cursor.fetchone()
            
            if not tutor_data:
                await message.answer("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä —Å —Ç–∞–∫–∏–º Telegram ID –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return
            
            tutor_id, tutor_name, tutor_phone = tutor_data
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞
            month_names = {
                '01': '–Ø–Ω–≤–∞—Ä—å', '02': '–§–µ–≤—Ä–∞–ª—å', '03': '–ú–∞—Ä—Ç', '04': '–ê–ø—Ä–µ–ª—å',
                '05': '–ú–∞–π', '06': '–ò—é–Ω—å', '07': '–ò—é–ª—å', '08': '–ê–≤–≥—É—Å—Ç',
                '09': '–°–µ–Ω—Ç—è–±—Ä—å', '10': '–û–∫—Ç—è–±—Ä—å', '11': '–ù–æ—è–±—Ä—å', '12': '–î–µ–∫–∞–±—Ä—å'
            }
            month_name = month_names.get(month, f"–ú–µ—Å—è—Ü {month}")
            
            # –ò—â–µ–º –æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ —Ä–µ—Ñ–µ—Ä–∞–ª—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü –∏ –≥–æ–¥
            cursor.execute("""
                SELECT t.full_name, p.created_at, p.tariff_name, p.amount, 
                       r.visitor_telegram_id
                FROM referrals r
                JOIN tutors t ON t.telegram_id = r.visitor_telegram_id
                JOIN payments p ON p.user_id = r.visitor_telegram_id
                WHERE r.referrer_id = ? 
                AND r.status = 'active'
                AND p.status = 'succeeded'
                AND strftime('%m', p.created_at) = ?
                AND strftime('%Y', p.created_at) = ?
                ORDER BY p.created_at DESC
            """, (tutor_id, month.zfill(2), year))
            
            paid_referrals = cursor.fetchall()
            
            if not paid_referrals:
                response = (
                    f"üìä –û—Ç—á–µ—Ç –∑–∞ {month_name} {year} –≥–æ–¥–∞\n"
                    f"üë§ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor_name}\n"
                    f"üÜî Telegram ID: {telegram_id}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {tutor_phone}\n"
                    f"üè∑Ô∏è ID –≤ —Å–∏—Å—Ç–µ–º–µ: {tutor_id}\n\n"
                    f"‚ùå –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ–ø–ª–∞—Ç–∏–ª–æ –ø–æ–¥–ø–∏—Å–∫—É: 0"
                )
            else:
                total_amount = 0
                response = (
                    f"üìä –û—Ç—á–µ—Ç –∑–∞ {month_name} {year} –≥–æ–¥–∞\n"
                    f"üë§ –†–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor_name}\n"
                    f"üÜî Telegram ID: {telegram_id}\n"
                    f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {tutor_phone}\n"
                    f"üè∑Ô∏è ID –≤ —Å–∏—Å—Ç–µ–º–µ: {tutor_id}\n\n"
                    f"‚úÖ –†–µ—Ñ–µ—Ä–∞–ª–æ–≤ –æ–ø–ª–∞—Ç–∏–ª–æ –ø–æ–¥–ø–∏—Å–∫—É: {len(paid_referrals)}\n\n"
                )
                
                for i, referral in enumerate(paid_referrals, 1):
                    full_name, created_at, tariff_name, amount, visitor_tg_id = referral
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∫ –æ–±—â–µ–π —Å—É–º–º–µ
                    total_amount += amount
                    
                    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –≤ —Ä—É—Å—Å–∫–∏–π —Ñ–æ—Ä–º–∞—Ç
                    try:
                        payment_date = datetime.strptime(created_at, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y %H:%M')
                    except:
                        payment_date = str(created_at)
                    
                    response += (
                        f"{i}. üë§ {full_name}\n"
                        f"   üìÖ –û–ø–ª–∞—Ç–∞: {payment_date}\n"
                        f"   üì¶ –¢–∞—Ä–∏—Ñ: {tariff_name}\n"
                        f"   üí∞ –°—É–º–º–∞: {amount} —Ä—É–±.\n"
                        f"   üÜî TG ID: {visitor_tg_id}\n"
                        f"   {'‚îÄ' * 25}\n"
                    )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç—Ä–æ–∫—É
                response += f"\nüí∞ –ò–¢–û–ì–û: {total_amount} —Ä—É–±."
            
            await message.answer(response)
            
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {e}")
        print(f"–û—à–∏–±–∫–∞: {e}")