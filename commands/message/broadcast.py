import logging
import html
import re
from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from database import db

from commands.config import SUPER_ADMIN_ID

logger = logging.getLogger(__name__)

class BroadcastStates(StatesGroup):
    waiting_for_message = State()
    waiting_for_button = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –∫–Ω–æ–ø–∫–∏
    waiting_for_confirmation = State()

router = Router()

def sanitize_html(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ HTML —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö —Ç–µ–≥–æ–≤"""
    # –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ HTML —Ç–µ–≥–∏
    allowed_tags = ['b', 'strong', 'i', 'em', 'u', 'ins', 's', 'strike', 'del', 'code', 'pre']
    
    # –®–∞–±–ª–æ–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ HTML —Ç–µ–≥–æ–≤
    tag_pattern = re.compile(r'</?([a-zA-Z]+)[^>]*>')
    
    def replace_tag(match):
        tag_name = match.group(1).lower()
        if tag_name in allowed_tags:
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–≥ –¥–ª—è —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã—Ö —Ç–µ–≥–æ–≤
            return match.group(0)
        else:
            # –£–¥–∞–ª—è–µ–º –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏
            return ''
    
    # –£–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω–µ—Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Ç–µ–≥–∏, —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ –æ—Å—Ç–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
    cleaned = tag_pattern.sub(replace_tag, text)
    
    # –£–±–∏—Ä–∞–µ–º –≤–∞—Ä–∏–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏–∑ —ç–º–æ–¥–∑–∏
    cleaned = cleaned.replace('\ufe0f', '')
    
    return cleaned


@router.message(Command("broadcast"))
async def broadcast_command(message: Message, state: FSMContext):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º"""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–æ–º
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.")
        return
    
    await message.answer(
        "üì¢ <b>–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤—Å–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º</b>\n\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç—É—é HTML-—Ä–∞–∑–º–µ—Ç–∫—É: <b>–∂–∏—Ä–Ω—ã–π</b>, <i>–∫—É—Ä—Å–∏–≤</i>, <u>–ø–æ–¥—á–µ—Ä–∫–∏–≤–∞–Ω–∏–µ</u>\n\n"
        "<i>–î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel</i>",
        parse_mode="HTML"
    )
    await state.set_state(BroadcastStates.waiting_for_message)

@router.message(BroadcastStates.waiting_for_message, F.text)
async def process_broadcast_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –û–†–ò–ì–ò–ù–ê–õ–¨–ù–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ
    await state.update_data(broadcast_message=message.text)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–Ω–æ–ø–∫–∏
    await message.answer(
        "üîò <b>–î–æ–±–∞–≤–∏—Ç—å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫—É (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)</b>\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É —Å –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π –∫–æ–º–∞–Ω–¥–æ–π –±–æ—Ç–∞.\n"
        "–§–æ—Ä–º–∞—Ç: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | callback_data\n\n"
        "–ü—Ä–∏–º–µ—Ä—ã:\n"
        "‚Ä¢ üí≥ –û–ø–ª–∞—Ç–∞ —Å–µ—Ä–≤–∏—Å–∞ | payment_menu\n"
        "‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ | show_stats\n"
        "‚Ä¢ üë§ –ü—Ä–æ—Ñ–∏–ª—å | user_profile\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–Ω–µ—Ç' —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –±–µ–∑ –∫–Ω–æ–ø–∫–∏.",
        parse_mode="HTML"
    )
    await state.set_state(BroadcastStates.waiting_for_button)

@router.message(BroadcastStates.waiting_for_button)
async def process_broadcast_button(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –∫–Ω–æ–ø–∫–∏ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    
    user_input = message.text.strip()
    
    if user_input.lower() == '–Ω–µ—Ç':
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –∫–Ω–æ–ø–∫–∏
        await state.update_data(button_text=None, button_callback=None)
    else:
        # –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞–∑–æ–±—Ä–∞—Ç—å –≤–≤–æ–¥ –∫–Ω–æ–ø–∫–∏
        if '|' in user_input:
            try:
                button_text, button_callback = map(str.strip, user_input.split('|', 1))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ callback_data –Ω–µ –ø—É—Å—Ç–æ–π
                if not button_callback:
                    await message.answer("‚ùå Callback_data –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
                    return
                
                await state.update_data(
                    button_text=button_text, 
                    button_callback=button_callback
                )
                await message.answer(f"‚úÖ –ö–Ω–æ–ø–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {button_text}")
                
            except Exception as e:
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | callback_data")
                return
        else:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ | callback_data")
            return
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM tutors WHERE status = 'active'")
        tutors_count = cursor.fetchone()[0]
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
    data = await state.get_data()
    original_message = data.get('broadcast_message', '')
    preview_message = sanitize_html(original_message)
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –±–∞–ª–∞–Ω—Å–∞ —Ç–µ–≥–æ–≤
    def check_html_balance(text):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –±–∞–ª–∞–Ω—Å –æ—Ç–∫—Ä—ã–≤–∞—é—â–∏—Ö –∏ –∑–∞–∫—Ä—ã–≤–∞—é—â–∏—Ö —Ç–µ–≥–æ–≤"""
        stack = []
        tag_pattern = re.compile(r'</?([a-zA-Z]+)[^>]*>')
        
        for match in tag_pattern.finditer(text):
            tag_name = match.group(1).lower()
            if match.group(0).startswith('</'):
                if not stack or stack[-1] != tag_name:
                    return False
                stack.pop()
            else:
                stack.append(tag_name)
        
        return len(stack) == 0
    
    is_html_valid = check_html_balance(preview_message)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∫–Ω–æ–ø–∫–µ
    button_info = ""
    if data.get('button_text'):
        button_info = f"\nüîò <b>–ö–Ω–æ–ø–∫–∞:</b> {data['button_text']} -> {data['button_callback']}"
    
    if is_html_valid:
        try:
            # –ü—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å HTML —Ä–∞–∑–º–µ—Ç–∫–æ–π
            await message.answer(
                f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
                f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ:</b>\n{preview_message}\n"
                f"{button_info}\n\n"
                f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b> {tutors_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤\n\n"
                f"‚úÖ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?</b>\n\n"
                f"<i>–û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã</i>",
                parse_mode="HTML"
            )
        except Exception as e:
            logger.warning(f"HTML parsing error in preview: {e}")
            is_html_valid = False
    
    if not is_html_valid:
        # –ï—Å–ª–∏ HTML –Ω–µ–≤–∞–ª–∏–¥–µ–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ä–∞–∑–º–µ—Ç–∫–∏
        safe_preview = html.escape(preview_message)
        
        await message.answer(
            f"üìã <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏</b>\n\n"
            f"‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b> –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ HTML —Ä–∞–∑–º–µ—Ç–∫–µ\n\n"
            f"üìù <b>–°–æ–æ–±—â–µ–Ω–∏–µ (–±–µ–∑ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è):</b>\n<code>{safe_preview}</code>\n"
            f"{button_info}\n\n"
            f"üë• <b>–ü–æ–ª—É—á–∞—Ç–µ–ª–∏:</b> {tutors_count} –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤\n\n"
            f"‚úÖ <b>–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ?</b>\n\n"
            f"<i>–û—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã</i>",
            parse_mode="HTML"
        )
    
    await state.set_state(BroadcastStates.waiting_for_confirmation)

@router.message(BroadcastStates.waiting_for_confirmation, F.text.lower() == '–¥–∞')
async def confirm_broadcast(message: Message, state: FSMContext, bot: Bot):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    
    data = await state.get_data()
    original_message = data.get('broadcast_message', '')
    button_text = data.get('button_text')
    button_callback = data.get('button_callback')
    
    if not original_message:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
    
    # –û—á–∏—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã—Ö HTML-—Ç–µ–≥–æ–≤
    broadcast_message = sanitize_html(original_message)
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –µ—Å–ª–∏ –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞
    reply_markup = None
    if button_text and button_callback:
        reply_markup = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text=button_text, callback_data=button_callback)]
            ]
        )
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute("SELECT telegram_id, full_name FROM tutors WHERE status = 'active'")
        tutors = cursor.fetchall()
    
    total_tutors = len(tutors)
    successful_sends = 0
    failed_sends = 0
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
    progress_message = await message.answer(f"üîÑ –ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É –¥–ª—è {total_tutors} —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤...")
    
    for i, tutor in enumerate(tutors, 1):
        telegram_id, full_name = tutor
        
        try:
            await bot.send_message(
                chat_id=telegram_id,
                text=f"üì¢ <b>–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{broadcast_message}",
                parse_mode="HTML",
                reply_markup=reply_markup
            )
            successful_sends += 1
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –æ—Ç–ø—Ä–∞–≤–æ–∫
            if i % 10 == 0:
                await progress_message.edit_text(
                    f"üîÑ –†–∞—Å—Å—ã–ª–∫–∞ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...\n"
                    f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {i}/{total_tutors}"
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É {full_name} (ID: {telegram_id}): {e}")
            failed_sends += 1
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ
    button_report = ""
    if button_text:
        button_report = f"\nüîò –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {button_text}"
    
    report_message = (
        f"üìä <b>–û—Ç—á–µ—Ç –æ —Ä–∞—Å—Å—ã–ª–∫–µ</b>\n\n"
        f"‚úÖ –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {successful_sends}\n"
        f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å: {failed_sends}\n"
        f"üë• –í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π: {total_tutors}"
        f"{button_report}"
    )
    
    await message.answer(report_message, parse_mode="HTML")
    await state.clear()


@router.message(BroadcastStates.waiting_for_confirmation, F.text.lower() == '–Ω–µ—Ç')
async def cancel_broadcast(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ä–∞—Å—Å—ã–ª–∫—É"""
    
    await message.answer("‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    await state.clear()

@router.message(BroadcastStates.waiting_for_confirmation)
async def invalid_confirmation(message: Message):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ '–¥–∞' –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–ª–∏ '–Ω–µ—Ç' –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@router.message(Command("cancel"))
@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞")
async def cancel_handler(message: Message, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ª—é–±–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è"""
    
    current_state = await state.get_state()
    if current_state is None:
        return
    
    await state.clear()
    await message.answer(
        "‚ùå –î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.",
        reply_markup=ReplyKeyboardRemove()
    )
from aiogram.types import CallbackQuery
from aiogram import F
from payment.config import TARIF
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

@router.callback_query(F.data.in_(["payment_menu", "show_stats", "user_profile"]))
async def handle_broadcast_buttons(callback_query: CallbackQuery, bot: Bot):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ –∏–∑ —Ä–∞—Å—Å—ã–ª–∫–∏ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    try:
        # –£–±–∏—Ä–∞–µ–º "—á–∞—Å–∏–∫–∏" –Ω–∞ –∫–Ω–æ–ø–∫–µ
        await callback_query.answer()
         
        # –ï—Å–ª–∏ —ç—Ç–æ –∫–Ω–æ–ø–∫–∞ –æ–ø–ª–∞—Ç—ã - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ–Ω—é –æ–ø–ª–∞—Ç—ã
        if callback_query.data == "payment_menu":
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫–∞–∫ –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üìÖ 1 –º–µ—Å—è—Ü - 120 —Ä—É–±", callback_data="payment_1month")],
                [InlineKeyboardButton(text="üìÖ 6 –º–µ—Å—è—Ü–µ–≤ - 650 —Ä—É–±", callback_data="payment_6months")],
                [InlineKeyboardButton(text="üìÖ 1 –≥–æ–¥ - 1000 —Ä—É–±", callback_data="payment_1year")],
                [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")]
            ])
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ù–û–í–û–ï —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–º–µ—Å—Ç–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ä–æ–≥–æ
            await bot.send_message(
                chat_id=callback_query.from_user.id,
                text=TARIF,
                reply_markup=keyboard,
                parse_mode='Markdown'
            )
            
        # –î–ª—è –¥—Ä—É–≥–∏—Ö –∫–Ω–æ–ø–æ–∫ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω—É—é –ª–æ–≥–∏–∫—É
        elif callback_query.data == "show_stats":
            await bot.send_message(
                chat_id=callback_query.from_user.id,
                text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ"
            )
        elif callback_query.data == "user_profile":
            await bot.send_message(
                chat_id=callback_query.from_user.id,
                text="üë§ –ü—Ä–æ—Ñ–∏–ª—å –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ"
            )
            
    except Exception as e:
        logger.error(f"Error handling broadcast button: {e}")
        await callback_query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞", show_alert=True)

