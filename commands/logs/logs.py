from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message
from commands.config import SUPER_ADMIN_ID
import os
from pathlib import Path

router = Router()

@router.message(Command("logs"))
async def admin_view_logs(message: Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É–ø–µ—Ä–∞–¥–º–∏–Ω–æ–º
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()[1:] if message.text and len(message.text.split()) > 1 else []
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    lines_count = 50
    
    if len(args) >= 1:
        try:
            lines_count = int(args[0])
            if lines_count <= 0:
                await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
                return
            if lines_count > 1000:
                await message.answer("‚ö†Ô∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ - 1000. –ë—É–¥—É—Ç –ø–æ–∫–∞–∑–∞–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ 1000 —Å—Ç—Ä–æ–∫")
                lines_count = 1000
        except ValueError:
            await message.answer("‚ùå –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º")
            return
    
    await send_logs(message, lines_count)

async def send_logs(message: Message, lines_count: int):
    """–û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤"""
    try:
        log_file_path = Path("logs/bot.log")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –ª–æ–≥–æ–≤
        if not log_file_path.exists():
            await message.answer("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: logs/bot.log")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        file_size = log_file_path.stat().st_size
        if file_size == 0:
            await message.answer("üìù –§–∞–π–ª –ª–æ–≥–æ–≤ –ø—É—Å—Ç")
            return
        
        # –ß–∏—Ç–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞
        logs_content = read_last_lines(log_file_path, lines_count)
        
        if not logs_content:
            await message.answer("üìù –õ–æ–≥–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –∏–ª–∏ —Ñ–∞–π–ª –ø—É—Å—Ç")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–≥–∏ —á–∞—Å—Ç—è–º–∏ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ Telegram - 4096 —Å–∏–º–≤–æ–ª–æ–≤)
        await send_logs_in_parts(message, logs_content, lines_count)
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ –ª–æ–≥–æ–≤: {e}")
        print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")

def read_last_lines(file_path: Path, n: int) -> str:
    """–ß–∏—Ç–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ N —Å—Ç—Ä–æ–∫ –∏–∑ —Ñ–∞–π–ª–∞"""
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            # –ß–∏—Ç–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –∏ –±–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ N
            lines = file.readlines()
            last_lines = lines[-n:] if len(lines) > n else lines
            return ''.join(last_lines)
    except UnicodeDecodeError:
        # –ü—Ä–æ–±—É–µ–º —á–∏—Ç–∞—Ç—å –≤ –±–∏–Ω–∞—Ä–Ω–æ–º —Ä–µ–∂–∏–º–µ –¥–ª—è —Ñ–∞–π–ª–æ–≤ —Å –¥—Ä—É–≥–æ–π –∫–æ–¥–∏—Ä–æ–≤–∫–æ–π
        with open(file_path, 'rb') as file:
            lines = file.readlines()
            last_lines = lines[-n:] if len(lines) > n else lines
            # –ü—Ä–æ–±—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Å —Ä–∞–∑–Ω—ã–º–∏ –∫–æ–¥–∏—Ä–æ–≤–∫–∞–º–∏
            for encoding in ['utf-8', 'cp1251', 'latin-1']:
                try:
                    decoded_lines = [line.decode(encoding) for line in last_lines]
                    return ''.join(decoded_lines)
                except UnicodeDecodeError:
                    continue
            return "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª –ª–æ–≥–æ–≤"

async def send_logs_in_parts(message: Message, logs_content: str, total_lines: int):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ª–æ–≥–∏ —á–∞—Å—Ç—è–º–∏ —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π Telegram"""
    max_message_length = 4000  # –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–ø–∞—Å –æ—Ç 4096
    
    if len(logs_content) <= max_message_length:
        # –ï—Å–ª–∏ –≤—Å–µ –ø–æ–º–µ—â–∞–µ—Ç—Å—è –≤ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
        header = f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {total_lines} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤:\n\n"
        await message.answer(header + f"```\n{logs_content}\n```", parse_mode='Markdown')
    else:
        # –†–∞–∑–±–∏–≤–∞–µ–º –Ω–∞ —á–∞—Å—Ç–∏
        header = f"üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ {total_lines} —Å—Ç—Ä–æ–∫ –ª–æ–≥–æ–≤ (—á–∞—Å—Ç—å {{part}}):\n\n"
        
        parts = []
        current_part = ""
        lines = logs_content.split('\n')
        
        for line in lines:
            if len(current_part) + len(line) + 10 > max_message_length:
                parts.append(current_part)
                current_part = line + '\n'
            else:
                current_part += line + '\n'
        
        if current_part:
            parts.append(current_part)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∞—Å—Ç–∏ —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        import asyncio
        for i, part in enumerate(parts, 1):
            part_header = header.format(part=f"{i}/{len(parts)}")
            await message.answer(part_header + f"```\n{part}\n```", parse_mode='Markdown')
            await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

# –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –ª–æ–≥–∞–º
@router.message(Command("logs_search"))
async def admin_search_logs(message: Message):
    """–ü–æ–∏—Å–∫ –ø–æ –ª–æ–≥–∞–º"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    args = message.text.split()[1:] if message.text and len(message.text.split()) > 1 else []
    
    if len(args) < 1:
        await message.answer("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: /logs_search <—Ç–µ–∫—Å—Ç>")
        await message.answer("üìù –ü—Ä–∏–º–µ—Ä: /logs_search error")
        return
    
    search_text = ' '.join(args)
    await search_in_logs(message, search_text)

async def search_in_logs(message: Message, search_text: str):
    """–ü–æ–∏—Å–∫ —Ç–µ–∫—Å—Ç–∞ –≤ –ª–æ–≥–∞—Ö"""
    try:
        log_file_path = Path("logs/bot.log")
        
        if not log_file_path.exists():
            await message.answer("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: logs/bot.log")
            return
        
        # –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª –∏ –∏—â–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
        found_lines = []
        with open(log_file_path, 'r', encoding='utf-8') as file:
            for line in file:
                if search_text.lower() in line.lower():
                    found_lines.append(line)
        
        if not found_lines:
            await message.answer(f"üîç –ü–æ –∑–∞–ø—Ä–æ—Å—É '{search_text}' –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return
        
        # –ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å—Ç—Ä–æ–∫
        result_lines = found_lines[-20:] if len(found_lines) > 20 else found_lines
        result_content = ''.join(result_lines)
        
        header = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{search_text}' (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(result_lines)} –∏–∑ {len(found_lines)}):\n\n"
        
        if len(header + result_content) > 4000:
            result_content = result_content[-3500:]  # –û–±—Ä–µ–∑–∞–µ–º –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ
            header = f"üîç –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ '{search_text}' (–ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏):\n\n"
        
        await message.answer(header + f"```\n{result_content}\n```", parse_mode='Markdown')
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≤ –ª–æ–≥–∞—Ö: {e}")

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–∞—Ö
@router.message(Command("logs_info"))
async def admin_logs_info(message: Message):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ñ–∞–π–ª–µ –ª–æ–≥–æ–≤"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    try:
        log_file_path = Path("logs/bot.log")
        
        if not log_file_path.exists():
            await message.answer("‚ùå –§–∞–π–ª –ª–æ–≥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω: logs/bot.log")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∞–π–ª–µ
        file_size = log_file_path.stat().st_size
        modified_time = log_file_path.stat().st_mtime
        from datetime import datetime
        modified_date = datetime.fromtimestamp(modified_time).strftime('%d.%m.%Y %H:%M:%S')
        
        # –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫
        line_count = 0
        with open(log_file_path, 'r', encoding='utf-8') as file:
            line_count = sum(1 for _ in file)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
        size_kb = file_size / 1024
        size_mb = size_kb / 1024
        
        size_str = f"{file_size} –±–∞–π—Ç"
        if size_mb >= 1:
            size_str = f"{size_mb:.2f} MB"
        elif size_kb >= 1:
            size_str = f"{size_kb:.2f} KB"
        
        await message.answer(
            f"üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ª–æ–≥–∞—Ö:\n\n"
            f"üìÅ –§–∞–π–ª: logs/bot.log\n"
            f"üìè –†–∞–∑–º–µ—Ä: {size_str}\n"
            f"üìà –°—Ç—Ä–æ–∫: {line_count}\n"
            f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: {modified_date}"
        )
        
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ª–æ–≥–∞—Ö: {e}")