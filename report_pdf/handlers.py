from aiogram import F
from aiogram.types import Message, CallbackQuery, BufferedInputFile
from datetime import datetime
import io
from aiogram import Router

from handlers.start.welcome import show_main_menu

from .pdf_generator import PDFReportGenerator
from .schedule_generator import SchedulePDFGenerator
from .report_service import ReportService
from .schedule_service import ScheduleService
from .keyboards import (
    get_statistics_keyboard, 
    get_reports_months_keyboard, 
    get_schedule_months_keyboard,
    get_back_to_statistics_keyboard
)

router = Router()

@router.callback_query(F.data == "statistics_menu")
async def statistics_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await callback.message.edit_text(
        "üìà <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–¥–µ–ª:",
        reply_markup=get_statistics_keyboard(),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "reports_menu")
async def reports_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é –æ—Ç—á–µ—Ç–æ–≤ - –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞"""
    from database import Database
    
    db = Database()
    tutor = db.get_tutor_by_telegram_id(callback.from_user.id)
    
    if not tutor:
        await callback.answer("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    report_service = ReportService()
    available_months = report_service.get_available_months(tutor[0])
    
    if not available_months:
        await callback.message.edit_text(
            "üìä <b>–û—Ç—á–µ—Ç—ã</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤",
            reply_markup=get_back_to_statistics_keyboard(),
            parse_mode="HTML"
        )
        return
    
    await callback.message.edit_text(
        "üìä <b>–û—Ç—á–µ—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
        reply_markup=get_reports_months_keyboard(available_months),
        parse_mode="HTML"
    )

@router.callback_query(F.data == "schedule_menu")
async def schedule_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è - –≤—ã–±–æ—Ä –º–µ—Å—è—Ü–∞"""
    from database import Database
    
    db = Database()
    tutor = db.get_tutor_by_telegram_id(callback.from_user.id)
    
    if not tutor:
        await callback.answer("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    schedule_service = ScheduleService()
    available_months = schedule_service.get_available_months(tutor[0])
    
    if not available_months:
        await callback.message.edit_text(
            "üóìÔ∏è <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n\n–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è",
            reply_markup=get_back_to_statistics_keyboard(),
            parse_mode="HTML"
        )
        return
    
    await callback.message.edit_text(
        "üóìÔ∏è <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –º–µ—Å—è—Ü:",
        reply_markup=get_schedule_months_keyboard(available_months),
        parse_mode="HTML"
    )

@router.callback_query(F.data.startswith("report_month_"))
async def generate_monthly_report(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞ –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü"""
    from database import Database
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: report_month_2024_12
    parts = callback.data.split("_")
    year = int(parts[2])
    month = int(parts[3])
    
    db = Database()
    tutor = db.get_tutor_by_telegram_id(callback.from_user.id)
    
    if not tutor:
        await callback.answer("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await callback.answer("üìä –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç...")
    
    try:
        report_service = ReportService()
        pdf_generator = PDFReportGenerator()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç–∞
        report_data = report_service.get_monthly_report_data(tutor[0], month, year)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        pdf_buffer = pdf_generator.create_monthly_report(
            report_data['tutor'],
            report_data['lessons'],
            report_data['month'],
            report_data['year']
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        month_name = report_service._get_month_name(month)
        filename = f"–æ—Ç—á–µ—Ç_{month_name}_{year}.pdf"
        
        await callback.message.answer_document(
            document=BufferedInputFile(
                pdf_buffer.getvalue(),
                filename=filename
            ),
            caption=f"üìä –û—Ç—á–µ—Ç –∑–∞ {month_name} {year} –≥–æ–¥–∞"
        )
        
    except Exception as e:
        print(f"Error generating report: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞")

@router.callback_query(F.data.startswith("schedule_month_"))
async def generate_monthly_schedule(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü"""
    from database import Database
    
    # –†–∞–∑–±–∏—Ä–∞–µ–º callback_data: schedule_month_2024_12
    parts = callback.data.split("_")
    year = int(parts[2])
    month = int(parts[3])
    
    db = Database()
    tutor = db.get_tutor_by_telegram_id(callback.from_user.id)
    
    if not tutor:
        await callback.answer("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    await callback.answer("üóìÔ∏è –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ...")
    
    try:
        schedule_service = ScheduleService()
        schedule_generator = SchedulePDFGenerator()
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        schedule_data = schedule_service.get_monthly_schedule_data(tutor[0], month, year)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º PDF
        pdf_buffer = schedule_generator.create_monthly_schedule(
            schedule_data['tutor'],
            schedule_data
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
        month_name = schedule_service._get_month_name(month)
        filename = f"—Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ_{month_name}_{year}.pdf"
        
        await callback.message.answer_document(
            document=BufferedInputFile(
                pdf_buffer.getvalue(),
                filename=filename
            ),
            caption=f"üóìÔ∏è –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ {month_name} {year} –≥–æ–¥–∞"
        )
        
    except Exception as e:
        print(f"Error generating schedule: {e}")
        await callback.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")

@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await callback.answer()
    
    # –í—ã–∑—ã–≤–∞–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await show_main_menu(callback.from_user.id, callback_query=callback)

