# handlers/schedule/planner/timer/planner_manager.py
import logging
from datetime import datetime
from .planner_engine import planner_engine
from payment.models import PaymentManager  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

logger = logging.getLogger(__name__)

class PlannerManager:
    async def start_planner(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–µ—Ä"""
        try:
            await planner_engine.start_planner()
            logger.info("–ü–ª–∞–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–µ—Ä–∞: {e}")
            return False
    
    async def stop_planner(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–µ—Ä"""
        try:
            await planner_engine.stop_planner()
            logger.info("–ü–ª–∞–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞–Ω–µ—Ä–∞: {e}")
            return False
    
    async def force_check(self):
        """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π (–∏–≥–Ω–æ—Ä–∏—Ä—É—è last_created)"""
        try:
            # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É last_created –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
            original_method = planner_engine._should_create_lessons
            planner_engine._should_create_lessons = lambda task: True
            
            await planner_engine._check_and_create_lessons()
            
            # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –º–µ—Ç–æ–¥
            planner_engine._should_create_lessons = original_method
            
            logger.info("–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
            return False
    
    def get_planner_status(self) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–µ—Ä–∞"""
        return {
            'is_running': planner_engine.is_running,
            'last_check': datetime.now().isoformat() if planner_engine.is_running else None
        }
    
    # üî• –ù–û–í–´–ô –ú–ï–¢–û–î: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è/–¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    async def update_tutor_planner_status(self, telegram_id: int, has_subscription: bool):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–µ—Ä–∞ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
        try:
            from database import db

            
            tutor_id = db.get_tutor_id_by_telegram_id(telegram_id)
            if not tutor_id:
                logger.error(f"–†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –¥–ª—è telegram_id {telegram_id}")
                return False
            
            with db.get_connection() as conn:
                cursor = conn.cursor()
                
                if has_subscription:
                    # –í–∫–ª—é—á–∞–µ–º –ø–ª–∞–Ω–µ—Ä
                    cursor.execute('''
                    UPDATE planner_actions SET is_active = 1 WHERE tutor_id = ?
                    ''', (tutor_id,))
                    logger.info(f"–ü–ª–∞–Ω–µ—Ä –≤–∫–ª—é—á–µ–Ω –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {tutor_id}")
                else:
                    # –û—Ç–∫–ª—é—á–∞–µ–º –ø–ª–∞–Ω–µ—Ä
                    cursor.execute('''
                    UPDATE planner_actions SET is_active = 0 WHERE tutor_id = ?
                    ''', (tutor_id,))
                    logger.info(f"–ü–ª–∞–Ω–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {tutor_id}")
                
                conn.commit()
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –ø–ª–∞–Ω–µ—Ä–∞ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {telegram_id}: {e}")
            return False

planner_manager = PlannerManager()
