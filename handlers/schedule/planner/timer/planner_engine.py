# handlers/schedule/planner/timer/planner_engine.py
import asyncio
import logging
from datetime import datetime, timedelta
from typing import List, Dict, Any
from database import db

from payment.models import PaymentManager  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

logger = logging.getLogger(__name__)

class PlannerEngine:
    def __init__(self):
        self.is_running = False
        self.task = None
    
    async def start_planner(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–µ—Ä –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ"""
        if self.is_running:
            logger.info("–ü–ª–∞–Ω–µ—Ä —É–∂–µ –∑–∞–ø—É—â–µ–Ω")
            return
        
        self.is_running = True
        self.task = asyncio.create_task(self._planner_loop())
        logger.info("–ü–ª–∞–Ω–µ—Ä –∑–∞–ø—É—â–µ–Ω")
    
    async def stop_planner(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–µ—Ä"""
        if not self.is_running:
            return
        
        self.is_running = False
        if self.task:
            self.task.cancel()
            try:
                await self.task
            except asyncio.CancelledError:
                pass
        logger.info("–ü–ª–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    
    async def _planner_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–ª–∞–Ω–µ—Ä–∞"""
        while self.is_running:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 6 —á–∞—Å–æ–≤
                await self._check_and_create_lessons()
                await asyncio.sleep(7 * 24 * 60 * 60)  # 6 —á–∞—Å–æ–≤ (–±—ã–ª–æ 7 –¥–Ω–µ–π)
            except asyncio.CancelledError:
                break
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –ø–ª–∞–Ω–µ—Ä–∞: {e}")
                await asyncio.sleep(60)
    
    async def _check_and_create_lessons(self):
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞–µ—Ç –∑–∞–Ω—è—Ç–∏—è –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
        logger.info("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–µ—Ä–∞: –Ω–∞—á–∞–ª–æ")
        
        try:
            planner_tasks = self._get_all_planner_tasks()
            
            if not planner_tasks:
                logger.info("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –ø–ª–∞–Ω–µ—Ä–∞")
                return
            
            # üî• –ì–†–£–ü–ü–ò–†–£–ï–ú –ó–ê–î–ê–ß–ò –ü–û –†–ï–ü–ï–¢–ò–¢–û–†–ê–ú –ò –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–î–ü–ò–°–ö–£
            tutors_tasks = {}
            for task in planner_tasks:
                tutor_id = task['tutor_id']
                if tutor_id not in tutors_tasks:
                    tutors_tasks[tutor_id] = []
                tutors_tasks[tutor_id].append(task)
            
            for tutor_id, tasks in tutors_tasks.items():
                # –ü–æ–ª—É—á–∞–µ–º telegram_id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                telegram_id = self._get_tutor_telegram_id(tutor_id)
                if not telegram_id:
                    logger.warning(f"–ù–µ –Ω–∞–π–¥–µ–Ω telegram_id –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {tutor_id}")
                    continue
                
                # üî• –ü–†–û–í–ï–†–Ø–ï–ú –ü–û–î–ü–ò–°–ö–£
                has_active_subscription = await PaymentManager.check_subscription(telegram_id)
                
                if not has_active_subscription:
                    # –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
                    self._deactivate_tutor_tasks(tutor_id)
                    logger.info(f"–ü–ª–∞–Ω–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {tutor_id} (–Ω–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏)")
                    continue
                
                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ - —Å–æ–∑–¥–∞–µ–º –∑–∞–Ω—è—Ç–∏—è
                for task in tasks:
                    await self._create_lessons_for_task(task)
            
            logger.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–µ—Ä–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤: {len(tutors_tasks)}")
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–ª–∞–Ω–µ—Ä–∞: {e}")
    
    def _get_tutor_telegram_id(self, tutor_id: int) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç telegram_id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('SELECT telegram_id FROM tutors WHERE id = ?', (tutor_id,))
                result = cursor.fetchone()
                return result[0] if result else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ telegram_id —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {tutor_id}: {e}")
            return None
    
    def _deactivate_tutor_tasks(self, tutor_id: int):
        """–û—Ç–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–µ—Ä–∞ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                UPDATE planner_actions SET is_active = 0 WHERE tutor_id = ?
                ''', (tutor_id,))
                conn.commit()
                logger.info(f"–û—Ç–∫–ª—é—á–µ–Ω–æ –∑–∞–¥–∞—á –ø–ª–∞–Ω–µ—Ä–∞ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {tutor_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {tutor_id}: {e}")
    
    def _get_all_planner_tasks(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–µ—Ä–∞"""
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                SELECT pa.*, 
                    s.full_name as student_name,
                    g.name as group_name,
                    (SELECT COUNT(*) FROM lessons l WHERE l.planner_action_id = pa.id) as lessons_count
                FROM planner_actions pa
                LEFT JOIN students s ON pa.student_id = s.id
                LEFT JOIN groups g ON pa.group_id = g.id
                WHERE pa.is_active = TRUE
                ORDER BY pa.tutor_id, pa.weekday, pa.time
                ''')
                rows = cursor.fetchall()
                return [dict(row) for row in rows]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–¥–∞—á –ø–ª–∞–Ω–µ—Ä–∞: {e}")
            return []
    
    async def _create_lessons_for_task(self, task: Dict[str, Any]):
        """–°–æ–∑–¥–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–Ω—è—Ç–∏—è, –Ω–µ —Ç—Ä–æ–≥–∞—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
            if not self._should_create_lessons(task):
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É {task['id']} - –∑–∞–Ω—è—Ç–∏—è —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã")
                return
            
            target_dates = self._get_target_dates_for_weekday(task['weekday'])
            created_count = 0
            
            for target_date in target_dates:
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∑–∞–Ω—è—Ç–∏—è –ù–ï–¢ –∏–ª–∏ –æ–Ω–æ –±—ã–ª–æ —É–¥–∞–ª–µ–Ω–æ
                if not self._lesson_exists(task, target_date):
                    self._create_lesson(task, target_date)
                    created_count += 1
                    logger.info(f"–°–æ–∑–¥–∞–Ω–æ –∑–∞–Ω—è—Ç–∏–µ: {task.get('student_name') or task.get('group_name')} –Ω–∞ {target_date}")
                else:
                    logger.debug(f"–ó–∞–Ω—è—Ç–∏–µ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {target_date} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –¢–û–õ–¨–ö–û –µ—Å–ª–∏ —Å–æ–∑–¥–∞–ª–∏ –Ω–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è
            if created_count > 0:
                self._update_last_created(task['id'])
                logger.info(f"–î–ª—è –∑–∞–¥–∞—á–∏ {task['id']} —Å–æ–∑–¥–∞–Ω–æ {created_count} –Ω–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π")
            else:
                logger.info(f"–î–ª—è –∑–∞–¥–∞—á–∏ {task['id']} –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç - –Ω–∏—á–µ–≥–æ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ")
        
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ {task['id']}: {e}")
    
    def _should_create_lessons(self, task: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–æ–±—â–µ –±—É–¥—É—â–∏–µ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
            SELECT COUNT(*) FROM lessons 
            WHERE planner_action_id = ? 
            AND lesson_date > datetime('now')
            ''', (task['id'],))
            
            has_future_lessons = cursor.fetchone()[0] > 0
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å –±—É–¥—É—â–∏–µ –∑–∞–Ω—è—Ç–∏—è - –Ω–µ —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ
        if has_future_lessons:
            logger.debug(f"–ó–∞–¥–∞—á–∞ {task['id']} –∏–º–µ–µ—Ç –±—É–¥—É—â–∏–µ –∑–∞–Ω—è—Ç–∏—è - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
            return False
        
        # –ï—Å–ª–∏ –±—É–¥—É—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º
        logger.debug(f"–ó–∞–¥–∞—á–∞ {task['id']} –Ω–µ –∏–º–µ–µ—Ç –±—É–¥—É—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π - —Å–æ–∑–¥–∞–µ–º")
        return True

    def _get_target_dates_for_weekday(self, weekday: str) -> List[datetime]:
        """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞—Ç—ã –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥ –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
        weekday_map = {
            'monday': 0, 'tuesday': 1, 'wednesday': 2, 'thursday': 3,
            'friday': 4, 'saturday': 5, 'sunday': 6
        }
        
        target_weekday = weekday_map[weekday.lower()]
        today = datetime.now().date()
        dates = []
        
        # –°–º–æ—Ç—Ä–∏–º –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥ (14 –¥–Ω–µ–π)
        for days_ahead in range(21):
            future_date = today + timedelta(days=days_ahead)
            if future_date.weekday() == target_weekday:
                dates.append(future_date)
        
        return dates
    
    def _lesson_exists(self, task: Dict[str, Any], planned_date: datetime) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞ –≠–¢–û–ô –Ω–µ–¥–µ–ª–µ"""
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                
                # –ù–∞—Ö–æ–¥–∏–º –Ω–∞—á–∞–ª–æ –∏ –∫–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏ –¥–ª—è planned_date
                week_start = planned_date - timedelta(days=planned_date.weekday())
                week_end = week_start + timedelta(days=6)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –õ–Æ–ë–û–ï –∑–∞–Ω—è—Ç–∏–µ —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –Ω–∞ —ç—Ç–æ–π –Ω–µ–¥–µ–ª–µ
                cursor.execute('''
                SELECT COUNT(*) FROM lessons 
                WHERE planner_action_id = ? 
                AND DATE(lesson_date) BETWEEN DATE(?) AND DATE(?)
                ''', (task['id'], week_start, week_end))
                
                exists = cursor.fetchone()[0] > 0
                
                if exists:
                    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
                    cursor.execute('''
                    SELECT lesson_date FROM lessons 
                    WHERE planner_action_id = ? 
                    AND DATE(lesson_date) BETWEEN DATE(?) AND DATE(?)
                    LIMIT 1
                    ''', (task['id'], week_start, week_end))
                    
                    existing_lesson_date = cursor.fetchone()
                    if existing_lesson_date:
                        logger.debug(f"–ó–∞–Ω—è—Ç–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª–µ {week_start.strftime('%Y-%m-%d')} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_lesson_date[0]}")
                
                return exists
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è: {e}")
            return True

    def delete_lessons_by_planner_action(self, planner_action_id: int):
        """–£–¥–∞–ª—è–µ—Ç –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å –∑–∞–¥–∞—á–µ–π –ø–ª–∞–Ω–µ—Ä–∞"""
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                DELETE FROM lessons WHERE planner_action_id = ?
                ''', (planner_action_id,))
                conn.commit()
                logger.info(f"–£–¥–∞–ª–µ–Ω—ã –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ –ø–ª–∞–Ω–µ—Ä–∞ {planner_action_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ {planner_action_id}: {e}")

    def get_lessons_by_planner_action(self, planner_action_id: int) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ –ø–æ –∑–∞–¥–∞—á–µ –ø–ª–∞–Ω–µ—Ä–∞"""
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                SELECT * FROM lessons WHERE planner_action_id = ? ORDER BY lesson_date
                ''', (planner_action_id,))
                rows = cursor.fetchall()
                return [dict(row) for row in rows]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏ {planner_action_id}: {e}")
            return []

    def _create_lesson(self, task: Dict[str, Any], lesson_date: datetime):
        """–°–æ–∑–¥–∞–µ—Ç –∑–∞–Ω—è—Ç–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                
                lesson_time = datetime.strptime(task['time'], '%H:%M').time()
                lesson_datetime = datetime.combine(lesson_date, lesson_time)
                
                if task.get('student_id'):
                    # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
                    cursor.execute('''
                    INSERT INTO lessons (tutor_id, student_id, lesson_date, duration, price, status, planner_action_id)
                    VALUES (?, ?, ?, ?, ?, 'planned', ?)
                    ''', (task['tutor_id'], task['student_id'], lesson_datetime, 
                        task['duration'], task['price'], task['id']))
                else:
                    # –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
                    cursor.execute('''
                    SELECT student_id FROM student_groups WHERE group_id = ?
                    ''', (task['group_id'],))
                    
                    students = cursor.fetchall()
                    
                    for student in students:
                        cursor.execute('''
                        INSERT INTO lessons (tutor_id, student_id, group_id, lesson_date, duration, price, status, planner_action_id)
                        VALUES (?, ?, ?, ?, ?, ?, 'planned', ?)
                        ''', (task['tutor_id'], student[0], task['group_id'], lesson_datetime,
                            task['duration'], task['price'], task['id']))
                
                conn.commit()
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è: {e}")
            raise

    def _update_last_created(self, task_id: int):
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –∑–∞–¥–∞—á–∏"""
        try:
            with db.get_connection() as conn:
                cursor = conn.cursor()
                cursor.execute('''
                UPDATE planner_actions SET last_created = ? WHERE id = ?
                ''', (datetime.now(), task_id))
                conn.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ last_created –¥–ª—è –∑–∞–¥–∞—á–∏ {task_id}: {e}")

planner_engine = PlannerEngine()
