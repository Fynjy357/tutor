# handlers/schedule/planner/timer/planner_commands.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
import logging
from datetime import datetime

from commands.config import SUPER_ADMIN_ID
from .planner_manager import planner_manager
from database import db
from payment.models import PaymentManager  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

router = Router()
logger = logging.getLogger(__name__)

@router.message(Command("planner_status"))
async def planner_status(message: Message):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–µ—Ä–∞ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –∑–∞–¥–∞—á–∞—Ö –∏ –ø–æ–¥–ø–∏—Å–∫–∞—Ö"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    status = planner_manager.get_planner_status()
    tasks_info = await _get_planner_tasks_info()
    subscription_info = await _get_subscription_info()
    
    status_text = "üü¢ <b>–ü–ª–∞–Ω–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω</b>" if status['is_running'] else "üî¥ <b>–ü–ª–∞–Ω–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω</b>"
    status_text += f"\n\nüìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–¥–∞—á:</b>"
    status_text += f"\n‚Ä¢ –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö: <b>{tasks_info['active_count']}</b>"
    status_text += f"\n‚Ä¢ –° –ø–æ–¥–ø–∏—Å–∫–æ–π: <b>{subscription_info['with_subscription']}</b>"
    status_text += f"\n‚Ä¢ –ë–µ–∑ –ø–æ–¥–ø–∏—Å–∫–∏: <b>{subscription_info['without_subscription']}</b>"
    status_text += f"\nüîÑ –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–∑–¥–∞–Ω–∏–µ: <b>{tasks_info['last_created_info']}</b>"
    
    if status['last_check']:
        status_text += f"\nüìÖ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø—Ä–æ–≤–µ—Ä–∫–∞: {status['last_check']}"
    
    await message.answer(status_text)

@router.message(Command("start_planner"))
async def start_planner_command(message: Message):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–ª–∞–Ω–µ—Ä"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    success = await planner_manager.start_planner()
    if success:
        await message.answer("‚úÖ –ü–ª–∞–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –ø–ª–∞–Ω–µ—Ä–∞")

@router.message(Command("stop_planner"))
async def stop_planner_command(message: Message):
    """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –ø–ª–∞–Ω–µ—Ä"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    success = await planner_manager.stop_planner()
    if success:
        await message.answer("‚úÖ –ü–ª–∞–Ω–µ—Ä —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –ø–ª–∞–Ω–µ—Ä–∞")

@router.message(Command("force_planner_check"))
async def force_planner_check(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–µ—Ä–∞"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    success = await planner_manager.force_check()
    if success:
        await message.answer("‚úÖ –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞–Ω–µ—Ä–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ")

@router.message(Command("update_tutor_planner"))
async def update_tutor_planner_command(message: Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–ª–∞–Ω–µ—Ä–∞ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"""
    if message.from_user.id != SUPER_ADMIN_ID:
        await message.answer("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
        return
    
    try:
        # –ü–∞—Ä—Å–∏–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã: /update_tutor_planner <telegram_id> <1/0>
        args = message.text.split()
        if len(args) != 3:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /update_tutor_planner <telegram_id> <1/0>")
            return
        
        telegram_id = int(args[1])
        has_subscription = bool(int(args[2]))
        
        success = await planner_manager.update_tutor_planner_status(telegram_id, has_subscription)
        
        if success:
            status = "–≤–∫–ª—é—á–µ–Ω" if has_subscription else "–æ—Ç–∫–ª—é—á–µ–Ω"
            await message.answer(f"‚úÖ –ü–ª–∞–Ω–µ—Ä {status} –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {telegram_id}")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ {telegram_id}")
            
    except (ValueError, IndexError) as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –∫–æ–º–∞–Ω–¥—ã. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /update_tutor_planner <telegram_id> <1/0>")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ update_tutor_planner: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã")

async def _get_planner_tasks_info() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö –ø–ª–∞–Ω–µ—Ä–∞"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
            SELECT COUNT(*) as active_count,
                   MAX(last_created) as latest_creation
            FROM planner_actions 
            WHERE is_active = TRUE
            ''')
            result = cursor.fetchone()
            
            last_created = result[0] if isinstance(result, tuple) else result['latest_creation']
            if last_created:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –¥–ª—è —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
                last_created_dt = datetime.fromisoformat(last_created.replace('Z', '+00:00'))
                last_created_info = last_created_dt.strftime('%d.%m.%Y %H:%M')
            else:
                last_created_info = "–Ω–∏–∫–æ–≥–¥–∞"
            
            active_count = result[0] if isinstance(result, tuple) else result['active_count']
            
            return {
                'active_count': active_count,
                'last_created_info': last_created_info
            }
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∑–∞–¥–∞—á–∞—Ö: {e}")
        return {'active_count': 0, 'last_created_info': '–æ—à–∏–±–∫–∞'}

async def _get_subscription_info() -> dict:
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏"""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ —Å –∞–∫—Ç–∏–≤–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏ –ø–ª–∞–Ω–µ—Ä–∞
            cursor.execute('''
            SELECT DISTINCT t.telegram_id 
            FROM tutors t 
            JOIN planner_actions pa ON pa.tutor_id = t.id 
            WHERE pa.is_active = TRUE
            ''')
            tutors = cursor.fetchall()
            
            with_subscription = 0
            without_subscription = 0
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
            for tutor in tutors:
                telegram_id = tutor[0] if isinstance(tutor, tuple) else tutor['telegram_id']
                
                has_subscription = await PaymentManager.check_subscription(telegram_id)
                
                if has_subscription:
                    with_subscription += 1
                else:
                    without_subscription += 1
            
            return {
                'with_subscription': with_subscription,
                'without_subscription': without_subscription
            }
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–∞—Ö: {e}")
        return {'with_subscription': 0, 'without_subscription': 0}
