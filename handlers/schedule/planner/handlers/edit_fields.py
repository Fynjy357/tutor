# handlers/schedule/planner/handlers/edit_fields.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, Message, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
import re
import logging

from handlers.schedule.planner.utils.task_helpers import get_task_by_id, show_task_edit_menu_after_edit
from database import db

router = Router()
logger = logging.getLogger(__name__)

class EditTaskState(StatesGroup):
    waiting_for_time = State()
    waiting_for_duration = State()
    waiting_for_price = State()

@router.callback_query(F.data.startswith("planner_time_"))
async def planner_edit_time(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        task_id = int(callback.data.split("_")[2])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –∑–∞–¥–∞—á–∏ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.update_data(task_id=task_id)
        await state.set_state(EditTaskState.waiting_for_time)
        
        # –ü—Ä–æ—Å–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è
        await callback.message.edit_text(
            f"üïí <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b>\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>14:30</code> –∏–ª–∏ <code>09:00</code>\n\n"
            f"<i>–¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –±—É–¥–µ—Ç –∑–∞–º–µ–Ω–µ–Ω–æ.</i>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"planner_menu_{task_id}")
            ]])
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏", show_alert=True)

@router.callback_query(F.data.startswith("planner_duration_"))
async def planner_edit_duration(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        task_id = int(callback.data.split("_")[2])
        
        await state.update_data(task_id=task_id)
        await state.set_state(EditTaskState.waiting_for_duration)
        
        await callback.message.edit_text(
            f"‚è±Ô∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ <b>–º–∏–Ω—É—Ç–∞—Ö</b>\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>60</code> –∏–ª–∏ <code>90</code>\n\n"
            f"<i>–û–±—ã—á–Ω–æ –∑–∞–Ω—è—Ç–∏—è –¥–ª—è—Ç—Å—è 60 –∏–ª–∏ 90 –º–∏–Ω—É—Ç.</i>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"planner_menu_{task_id}")
            ]])
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", show_alert=True)

@router.callback_query(F.data.startswith("planner_price_"))
async def planner_edit_price(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    try:
        task_id = int(callback.data.split("_")[2])
        
        await state.update_data(task_id=task_id)
        await state.set_state(EditTaskState.waiting_for_price)
        
        await callback.message.edit_text(
            f"üí∞ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏</b>\n\n"
            f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –≤ <b>—Ä—É–±–ª—è—Ö</b>\n"
            f"–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1500</code> –∏–ª–∏ <code>2000</code>\n\n"
            f"<i>–£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤.</i>",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"planner_menu_{task_id}")
            ]])
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏", show_alert=True)

@router.message(EditTaskState.waiting_for_time)
async def process_time_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    time_input = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú)
    if not re.match(r'^([0-1]?[0-9]|2[0-3]):[0-5][0-9]$', time_input):
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!\n\n"
                           "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>–ß–ß:–ú–ú</b>\n"
                           "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>14:30</code> –∏–ª–∏ <code>09:00</code>")
        return
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    task_id = data.get('task_id')
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE planner_actions SET time = ? WHERE id = ?",
                (time_input, task_id)
            )
            conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É
        task = get_task_by_id(task_id)
        
        await message.answer(f"‚úÖ –í—Ä–µ–º—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ –Ω–∞ <b>{time_input}</b>")
        await show_task_edit_menu_after_edit(message, task)
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")
    
    await state.clear()

@router.message(EditTaskState.waiting_for_duration)
async def process_duration_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    duration_input = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not duration_input.isdigit() or int(duration_input) <= 0:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!\n\n"
                           "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã)\n"
                           "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>60</code> –∏–ª–∏ <code>90</code>")
        return
    
    duration = int(duration_input)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    task_id = data.get('task_id')
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE planner_actions SET duration = ? WHERE id = ?",
                (duration, task_id)
            )
            conn.commit()
        
        task = get_task_by_id(task_id)
        await message.answer(f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{duration}</b> –º–∏–Ω—É—Ç")
        await show_task_edit_menu_after_edit(message, task)
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏: {e}")
    
    await state.clear()

@router.message(EditTaskState.waiting_for_price)
async def process_price_input(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    price_input = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤–≤–µ–¥–µ–Ω–æ —á–∏—Å–ª–æ
    if not price_input.isdigit() or int(price_input) <= 0:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏!\n\n"
                           "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (—Ä—É–±–ª–∏)\n"
                           "–ù–∞–ø—Ä–∏–º–µ—Ä: <code>1500</code> –∏–ª–∏ <code>2000</code>")
        return
    
    price = int(price_input)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    task_id = data.get('task_id')
    
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "UPDATE planner_actions SET price = ? WHERE id = ?",
                (price, task_id)
            )
            conn.commit()
        
        task = get_task_by_id(task_id)
        await message.answer(f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ <b>{price}</b> —Ä—É–±–ª–µ–π")
        await show_task_edit_menu_after_edit(message, task)
        
    except Exception as e:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")
    
    await state.clear()
