# handlers/schedule/planner/handlers/delete_tasks.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

from handlers.schedule.planner.utils.task_helpers import get_planner_tasks, get_task_by_id
from database import db


router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data.startswith("planner_delete_confirm_"))
async def planner_delete_confirm(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏"""
    task_id = int(callback.data.split("_")[3])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    task = get_task_by_id(task_id)
    if not task:
        await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
        return
    
    task_type = "–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ" if task['lesson_type'] == 'individual' else "–ì—Ä—É–ø–ø–æ–≤–æ–µ"
    target = task['student_name'] if task['student_name'] else task['group_name']
    
    await callback.message.edit_text(
        f"üóëÔ∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è</b>\n\n"
        f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É?\n\n"
        f"<b>–¢–∏–ø:</b> {task_type}\n"
        f"<b>–£—á–µ–Ω–∏–∫/–ì—Ä—É–ø–ø–∞:</b> {target}\n"
        f"<b>–í—Ä–µ–º—è:</b> {task['time']}\n"
        f"<b>–î–µ–Ω—å:</b> {task['weekday']}\n\n"
        f"<i>–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!</i>",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data=f"planner_delete_{task_id}"),
                InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data=f"planner_menu_{task_id}")
            ]
        ])
    )
    await callback.answer()

@router.callback_query(F.data.startswith("planner_delete_"))
async def planner_delete_task(callback: CallbackQuery):
    """–£–¥–∞–ª—è–µ—Ç –∑–∞–¥–∞—á—É –∏ –≤—Å–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á"""
    try:
        task_id = int(callback.data.split("_")[2])
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
        task = get_task_by_id(task_id)
        if not task:
            await callback.answer("‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)
            return
        
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è, —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —ç—Ç–∏–º –ø–ª–∞–Ω–µ—Ä–æ–º
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –£–ù–ò–ö–ê–õ–¨–ù–´–• –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞–º –∑–∞–Ω—è—Ç–∏–π (group_id –∏–ª–∏ student_id)
            cursor.execute('''
                SELECT COUNT(DISTINCT 
                    CASE 
                        WHEN group_id IS NOT NULL THEN 'group_' || group_id || '_' || lesson_date
                        ELSE 'individual_' || student_id || '_' || lesson_date
                    END
                ) 
                FROM lessons 
                WHERE planner_action_id = ? AND status != 'completed'
            ''', (task_id,))
            unique_lessons_count = cursor.fetchone()[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–∏–ø–∞—Ö —É–¥–∞–ª—è–µ–º—ã—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞
            cursor.execute('''
                SELECT 
                    COUNT(DISTINCT group_id) as group_lessons_count,
                    COUNT(DISTINCT CASE WHEN group_id IS NULL THEN student_id END) as individual_lessons_count
                FROM lessons 
                WHERE planner_action_id = ? AND status != 'completed'
            ''', (task_id,))
            stats = cursor.fetchone()
            group_lessons_count = stats[0] if stats[0] else 0
            individual_lessons_count = stats[1] if stats[1] else 0
            
            # –£–¥–∞–ª—è–µ–º –∑–∞–Ω—è—Ç–∏—è
            cursor.execute('''
                DELETE FROM lessons 
                WHERE planner_action_id = ? AND status != 'completed'
            ''', (task_id,))
            
            # –£–¥–∞–ª—è–µ–º —Å–∞–º—É –∑–∞–¥–∞—á—É –ø–ª–∞–Ω–µ—Ä–∞
            cursor.execute("DELETE FROM planner_actions WHERE id = ?", (task_id,))
            
            conn.commit()
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–¥–∞—á
        tutor_id = db.get_tutor_id_by_telegram_id(callback.from_user.id)
        if not tutor_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        tasks = get_planner_tasks(tutor_id)
        
        if not tasks:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ë–ï–ó –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏"
            keyboard_without_tasks = InlineKeyboardBuilder()
            keyboard_without_tasks.row(
                InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="planner_add_task")
            )
            keyboard_without_tasks.row(
                InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
            )
            
            delete_message = (
                "üîÑ <b>–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è</b>\n\n"
                "‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞\n"
            )
            
            if unique_lessons_count > 0:
                delete_message += f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: <b>{unique_lessons_count}</b>\n"
                if group_lessons_count > 0:
                    delete_message += f"üë• –ì—Ä—É–ø–ø–æ–≤—ã—Ö: <b>{group_lessons_count}</b>\n"
                if individual_lessons_count > 0:
                    delete_message += f"üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö: <b>{individual_lessons_count}</b>\n"
                delete_message += "\n"
            else:
                delete_message += "\n"
                
            delete_message += (
                "–£ –≤–∞—Å –±–æ–ª—å—à–µ –Ω–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.\n\n"
                "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é."
            )
            
            await callback.message.edit_text(
                delete_message,
                reply_markup=keyboard_without_tasks.as_markup()
            )
            await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
        builder = InlineKeyboardBuilder()
        
        weekdays_ru = {
            'monday': '–ü–Ω', 'tuesday': '–í—Ç', 'wednesday': '–°—Ä',
            'thursday': '–ß—Ç', 'friday': '–ü—Ç', 'saturday': '–°–±', 'sunday': '–í—Å'
        }
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        tasks_by_day = {}
        for task in tasks:
            day = task['weekday']
            if day not in tasks_by_day:
                tasks_by_day[day] = []
            tasks_by_day[day].append(task)
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
        weekdays_order = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        
        active_count = 0
        inactive_count = 0
        
        for day in weekdays_order:
            if day in tasks_by_day:
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è
                builder.row(
                    InlineKeyboardButton(
                        text=f"üìÖ {weekdays_ru[day].upper()}",
                        callback_data=f"planner_day_header_{day}"
                    )
                )
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ –¥–Ω—è
                day_tasks = sorted(tasks_by_day[day], key=lambda x: x['time'])
                for task in day_tasks:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                    status_icon = "üü¢" if task['is_active'] else "üî¥"
                    task_type = "üë§" if task['lesson_type'] == 'individual' else "üë•"
                    target = task['student_name'] if task['student_name'] else task['group_name']
                    time_display = task['time']
                    
                    # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
                    if task['is_active']:
                        active_count += 1
                    else:
                        inactive_count += 1
                    
                    builder.row(
                        InlineKeyboardButton(
                            text=f"{status_icon} {time_display} | {task_type} {target}",
                            callback_data=f"planner_menu_{task['id']}"
                        )
                    )
        
        builder.row(
            InlineKeyboardButton(
                text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
                callback_data="back_to_planner"
            )
        )
        
        success_message = (
            f"üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
            f"‚úÖ –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞\n"
        )
        
        if unique_lessons_count > 0:
            success_message += f"üóëÔ∏è –£–¥–∞–ª–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: <b>{unique_lessons_count}</b>\n"
            if group_lessons_count > 0:
                success_message += f"üë• –ì—Ä—É–ø–ø–æ–≤—ã—Ö: <b>{group_lessons_count}</b>\n"
            if individual_lessons_count > 0:
                success_message += f"üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö: <b>{individual_lessons_count}</b>\n"
            success_message += "\n"
        else:
            success_message += "\n"
            
        success_message += (
            f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{active_count}</b>\n"
            f"üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: <b>{inactive_count}</b>\n"
            f"üìä –í—Å–µ–≥–æ: <b>{len(tasks)}</b>\n\n"
        )
        
        await callback.message.edit_text(
            success_message,
            reply_markup=builder.as_markup()
        )
        await callback.answer("‚úÖ –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", show_alert=True)


