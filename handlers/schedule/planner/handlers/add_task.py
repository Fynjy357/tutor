# handlers/schedule/planner/handlers/add_task.py
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram import types
import logging

from handlers.schedule.planner.states import PlannerStates
from ...planner.keyboards_planner import get_planner_keyboard
from handlers.schedule.planner.utils.helpers import (
    get_lesson_info_text, validate_time_format, validate_duration, validate_price
)
from database import db
from handlers.schedule.planner.timer.planner_manager import planner_manager  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç

router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "planner_add_task")
async def planner_add_task_start(callback: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∏–Ω–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–µ—Ä"""
    tutor_id = db.get_tutor_id_by_telegram_id(callback.from_user.id)
    if not tutor_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    # –£–±—Ä–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ - —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
    await show_lesson_type_selection(callback, state)

async def show_lesson_type_selection(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è"""
    builder = InlineKeyboardBuilder()
    builder.row(
        types.InlineKeyboardButton(
            text="üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ",
            callback_data="planner_type_individual"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="üë• –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ",
            callback_data="planner_type_group"
        )
    )
    builder.row(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_planner"
        )
    )
    
    await callback.message.edit_text(
        "üìù <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(PlannerStates.waiting_for_lesson_type)

@router.callback_query(F.data.startswith("planner_type_"))
async def planner_choose_type(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è"""
    lesson_type = "individual" if "individual" in callback.data else "group"
    await state.update_data(lesson_type=lesson_type)
    
    tutor_id = db.get_tutor_id_by_telegram_id(callback.from_user.id)
    await state.update_data(tutor_id=tutor_id)
    
    if lesson_type == "individual":
        await show_student_selection(callback, state, tutor_id)
    else:
        await show_group_selection(callback, state, tutor_id)

async def show_student_selection(callback: CallbackQuery, state: FSMContext, tutor_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞ (—Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö)"""
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤
    students = db.get_students_by_tutor(tutor_id)
    active_students = [student for student in students if student.get('status') == 'active']
    
    if not active_students:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤</b>\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è —Å–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —É—á–µ–Ω–∏–∫–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '–∞–∫—Ç–∏–≤–Ω—ã–π'.",
            reply_markup=get_planner_keyboard()
        )
        await state.clear()
        await callback.answer()
        return
    
    builder = InlineKeyboardBuilder()
    for student in active_students:
        builder.row(
            types.InlineKeyboardButton(
                text=f"üë§ {student['full_name']}",
                callback_data=f"planner_student_{student['id']}"
            )
        )
    builder.row(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="planner_add_task"
        )
    )
    
    await callback.message.edit_text("üë§ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:</b>", reply_markup=builder.as_markup())
    await state.set_state(PlannerStates.waiting_for_student_or_group)

async def show_group_selection(callback: CallbackQuery, state: FSMContext, tutor_id: int):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã"""
    groups = db.get_groups_by_tutor(tutor_id)
    if not groups:
        await callback.message.edit_text(
            "‚ùå <b>–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≥—Ä—É–ø–ø</b>\n\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è —Å–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É.",
            reply_markup=get_planner_keyboard()
        )
        await state.clear()
        await callback.answer()
        return
    
    builder = InlineKeyboardBuilder()
    for group in groups:
        builder.row(
            types.InlineKeyboardButton(
                text=f"üë• {group['name']} ({group['student_count']} —É—á.)",
                callback_data=f"planner_group_{group['id']}"
            )
        )
    builder.row(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="planner_add_task"
        )
    )
    
    await callback.message.edit_text("üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:</b>", reply_markup=builder.as_markup())
    await state.set_state(PlannerStates.waiting_for_student_or_group)

# –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –£–±–∏—Ä–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ waiting_for_target, –∏—Å–ø–æ–ª—å–∑—É–µ–º waiting_for_student_or_group
@router.callback_query(F.data.startswith("planner_student_"), PlannerStates.waiting_for_student_or_group)
async def planner_choose_student(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä —É—á–µ–Ω–∏–∫–∞"""
    student_id = int(callback.data.split("_")[2])
    await state.update_data(student_id=student_id, group_id=None)
    await show_weekday_selection(callback, state)

@router.callback_query(F.data.startswith("planner_group_"), PlannerStates.waiting_for_student_or_group)
async def planner_choose_group(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã"""
    group_id = int(callback.data.split("_")[2])
    await state.update_data(group_id=group_id, student_id=None)
    await show_weekday_selection(callback, state)

async def show_weekday_selection(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    weekdays = [
        ("–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "monday"), ("–í—Ç–æ—Ä–Ω–∏–∫", "tuesday"), ("–°—Ä–µ–¥–∞", "wednesday"),
        ("–ß–µ—Ç–≤–µ—Ä–≥", "thursday"), ("–ü—è—Ç–Ω–∏—Ü–∞", "friday"), ("–°—É–±–±–æ—Ç–∞", "saturday"), 
        ("–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", "sunday")
    ]
    
    builder = InlineKeyboardBuilder()
    for day_name, day_value in weekdays:
        builder.row(
            types.InlineKeyboardButton(
                text=day_name,
                callback_data=f"planner_weekday_{day_value}"
            )
        )
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º callback_data –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    builder.row(
        types.InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="planner_back_to_target"
        )
    )
    
    await callback.message.edit_text("üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏:</b>", reply_markup=builder.as_markup())
    await state.set_state(PlannerStates.waiting_for_weekday)

# –î–û–ë–ê–í–õ–Ø–ï–ú –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É —É—á–µ–Ω–∏–∫–∞/–≥—Ä—É–ø–ø—ã
@router.callback_query(F.data == "planner_back_to_target", PlannerStates.waiting_for_weekday)
async def planner_back_to_target(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —É—á–µ–Ω–∏–∫–∞/–≥—Ä—É–ø–ø—ã"""
    data = await state.get_data()
    tutor_id = data.get('tutor_id')
    lesson_type = data.get('lesson_type')
    
    if lesson_type == "individual":
        await show_student_selection(callback, state, tutor_id)
    else:
        await show_group_selection(callback, state, tutor_id)

@router.callback_query(F.data.startswith("planner_weekday_"), PlannerStates.waiting_for_weekday)
async def planner_choose_weekday(callback: CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    weekday = callback.data.split("_")[2]
    await state.update_data(weekday=weekday)
    await show_time_input(callback, state)

async def show_time_input(callback: CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="planner_back_to_weekday"))
    
    await callback.message.edit_text(
        "‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
        "–§–æ—Ä–º–∞—Ç: <code>–ß–ß:MM</code>\n"
        "–ü—Ä–∏–º–µ—Ä: <code>14:30</code>",
        reply_markup=builder.as_markup()
    )
    await state.set_state(PlannerStates.waiting_for_time)

@router.callback_query(F.data == "planner_back_to_weekday", PlannerStates.waiting_for_time)
async def planner_back_to_weekday(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    await show_weekday_selection(callback, state)

@router.message(PlannerStates.waiting_for_time)
async def planner_enter_time(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –≤—Ä–µ–º–µ–Ω–∏"""
    time_text = message.text.strip()
    
    if not validate_time_format(time_text):
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="planner_back_to_weekday"))
        
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ <code>–ß–ß:MM</code>\n"
            "–ü—Ä–∏–º–µ—Ä: <code>14:30</code>",
            reply_markup=builder.as_markup()
        )
        return
    
    await state.update_data(time=time_text)
    await show_duration_input(message, state)

async def show_duration_input(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="planner_back_to_time"))
    
    await message.answer(
        "‚è±Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö):</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>60</code> (1 —á–∞—Å)",
        reply_markup=builder.as_markup()
    )
    await state.set_state(PlannerStates.waiting_for_duration)

@router.callback_query(F.data == "planner_back_to_time", PlannerStates.waiting_for_duration)
async def planner_back_to_time(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏"""
    await show_time_input(callback, state)

@router.message(PlannerStates.waiting_for_duration)
async def planner_enter_duration(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    duration_text = message.text.strip()
    
    if not validate_duration(duration_text):
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="planner_back_to_time"))
        
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã)\n"
            "–ü—Ä–∏–º–µ—Ä: <code>60</code>",
            reply_markup=builder.as_markup()
        )
        return
    
    duration = int(duration_text)
    await state.update_data(duration=duration)
    await show_price_input(message, state)

async def show_price_input(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="planner_back_to_duration"))
    
    await message.answer(
        "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ (—Ä—É–±.):</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>1000</code>"
        "<i>–£–∫–∞–∂–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã, –±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤ –∏ —Å–∏–º–≤–æ–ª–æ–≤.</i>",
        reply_markup=builder.as_markup()
    )
    await state.set_state(PlannerStates.waiting_for_price)

@router.callback_query(F.data == "planner_back_to_duration", PlannerStates.waiting_for_price)
async def planner_back_to_duration(callback: CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    await callback.message.edit_text(
        "‚è±Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö):</b>\n\n"
        "–ü—Ä–∏–º–µ—Ä: <code>60</code> (1 —á–∞—Å)",
        reply_markup=InlineKeyboardBuilder().add(
            types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="planner_back_to_time")
        ).as_markup()
    )
    await state.set_state(PlannerStates.waiting_for_duration)
    await callback.answer()

@router.message(PlannerStates.waiting_for_price)
async def planner_enter_price(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á—É"""
    price_text = message.text.strip()
    
    if not validate_price(price_text):
        builder = InlineKeyboardBuilder()
        builder.add(types.InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥", callback_data="planner_back_to_duration"))
        
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ\n"
            "–ü—Ä–∏–º–µ—Ä: <code>1000</code>",
            reply_markup=builder.as_markup()
        )
        return
    
    price = float(price_text)
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–µ—Ä
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
            INSERT INTO planner_actions 
            (tutor_id, lesson_type, student_id, group_id, weekday, time, duration, price)
            VALUES (?, ?, ?, ?, ?, ?, ?, ?)
            ''', (
                data['tutor_id'],
                data['lesson_type'],
                data.get('student_id'),
                data.get('group_id'),
                data['weekday'],
                data['time'],
                data['duration'],
                price
            ))
            conn.commit()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–Ω—è—Ç–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            lesson_info = await get_lesson_info_text(data, price)
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–µ—Ä –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            await planner_manager.start_planner()
            
            # –°—Ä–∞–∑—É –≤—ã–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π
            await planner_manager.force_check()
            
            # –ù–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï –° –û–ë–ù–û–í–õ–ï–ù–ù–´–ú –§–û–†–ú–ê–¢–û–ú
            await message.answer(
                f"‚úÖ <b>–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ!</b>\n\n"
                f"{lesson_info}\n\n"
                f"üîÑ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ</b> ‚Äî –∑–∞–Ω—è—Ç–∏—è –±—É–¥—É—Ç –¥–æ–±–∞–≤–ª—è—Ç—å—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.",
                reply_markup=get_planner_keyboard()
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–µ—Ä: {e}")
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏!</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –ø–æ–∑–∂–µ.",
            reply_markup=get_planner_keyboard()
        )
    
    await state.clear()
