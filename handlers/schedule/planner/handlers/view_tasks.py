# handlers/schedule/planner/handlers/view_tasks.py
from aiogram import Router, F
from aiogram.types import CallbackQuery, InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
import logging

from handlers.schedule.planner.keyboards_planner import get_planner_keyboard
from handlers.schedule.planner.utils.task_helpers import get_planner_tasks
from database import db


router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "back_to_planner")
async def back_to_planner_handler(callback: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø–ª–∞–Ω–µ—Ä–∞"""
    try:
        await callback.message.edit_text(
            "üìÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–Ω—è—Ç–∏–π</b>\n\n"
            "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞–π—Ç–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=get_planner_keyboard()
        )
        await callback.answer()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –ø–ª–∞–Ω–µ—Ä: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@router.callback_query(F.data == "planner_view_tasks")
async def planner_view_tasks(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –≤ –ø–ª–∞–Ω–µ—Ä–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    tutor_id = db.get_tutor_id_by_telegram_id(callback.from_user.id)
    if not tutor_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    tasks = get_planner_tasks(tutor_id)
    
    if not tasks:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ë–ï–ó –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–¥–∞—á–∏"
        keyboard_without_tasks = InlineKeyboardBuilder()
        keyboard_without_tasks.row(
            InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É", callback_data="planner_add_task")
        )
        keyboard_without_tasks.row(
            InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="back_to_main_menu")
        )
        
        await callback.message.edit_text(
            "üîÑ <b>–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.\n\n"
            "–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ, —á—Ç–æ–±—ã –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é.",
            reply_markup=keyboard_without_tasks.as_markup()
        )
        await callback.answer()
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∑–∞–¥–∞—á–∞–º–∏
    builder = InlineKeyboardBuilder()
    
    weekdays_ru = {
        'monday': '–ü–Ω', 'tuesday': '–í—Ç', 'wednesday': '–°—Ä',
        'thursday': '–ß—Ç', 'friday': '–ü—Ç', 'saturday': '–°–±', 'sunday': '–í—Å'
    }
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–¥–∞—á–∏ –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    tasks_by_day = {}
    for task in tasks:
        day = task['weekday']
        if day not in tasks_by_day:
            tasks_by_day[day] = []
        tasks_by_day[day].append(task)
    
    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –¥–Ω–∏ –ø–æ –ø–æ—Ä—è–¥–∫—É
    weekdays_order = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
    
    active_count = 0
    inactive_count = 0
    
    for day in weekdays_order:
        if day in tasks_by_day:
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –¥–Ω—è
            builder.row(
                InlineKeyboardButton(
                    text=f"üìÖ {weekdays_ru[day].upper()}",
                    callback_data=f"planner_day_header_{day}"
                )
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏ —ç—Ç–æ–≥–æ –¥–Ω—è
            day_tasks = sorted(tasks_by_day[day], key=lambda x: x['time'])
            for task in day_tasks:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
                status_icon = "üü¢" if task['is_active'] else "üî¥"
                task_type = "üë§" if task['lesson_type'] == 'individual' else "üë•"
                target = task['student_name'] if task['student_name'] else task['group_name']
                time_display = task['time']
                
                # –°—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ/–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
                if task['is_active']:
                    active_count += 1
                else:
                    inactive_count += 1
                
                builder.row(
                    InlineKeyboardButton(
                        text=f"{status_icon} {time_display} | {task_type} {target}",
                        callback_data=f"planner_menu_{task['id']}"
                    )
                )
    
    builder.row(
        InlineKeyboardButton(
            text="‚óÄÔ∏è –ù–∞–∑–∞–¥",
            callback_data="back_to_planner"
        )
    )
    
    await callback.message.edit_text(
        f"üìã <b>–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –¥–∞–ª—å–Ω–µ–π—à–µ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</b>\n\n"
        f"üü¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö: <b>{active_count}</b>\n"
        f"üî¥ –ù–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö: <b>{inactive_count}</b>\n"
        f"üìä –í—Å–µ–≥–æ: <b>{len(tasks)}</b>\n\n",
        reply_markup=builder.as_markup()
    )
    await callback.answer()
