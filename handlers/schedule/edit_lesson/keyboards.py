from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime

def get_date_selection_keyboard(lessons_by_date):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã"""
    keyboard_buttons = []
    
    for date_str in sorted(lessons_by_date.keys()):
        date_obj = datetime.strptime(date_str, "%Y-%m-%d")
        display_date = date_obj.strftime("%d.%m.%Y")
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ —Å—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ó–ê–ù–Ø–¢–ò–ô (–Ω–µ —É—Ä–æ–∫–æ–≤)
        lessons = lessons_by_date[date_str]
        unique_lessons = {}
        
        for lesson in lessons:
            # –ö–ª—é—á –¥–ª—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è: –≤—Ä–µ–º—è + –≥—Ä—É–ø–ø–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å)
            lesson_time = lesson['lesson_date']
            group_id = lesson.get('group_id')
            
            if group_id:
                # –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ - —É–Ω–∏–∫–∞–ª—å–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥—Ä—É–ø–ø–µ
                lesson_key = f"{lesson_time}_{group_id}"
            else:
                # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ - —É–Ω–∏–∫–∞–ª—å–Ω–æ –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ —É—á–µ–Ω–∏–∫—É
                lesson_key = f"{lesson_time}_{lesson['student_id']}"
            
            if lesson_key not in unique_lessons:
                unique_lessons[lesson_key] = True
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π
        lessons_count = len(unique_lessons)
        
        # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–∫–ª–æ–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞ "–∑–∞–Ω—è—Ç–∏–µ"
        if lessons_count == 1:
            count_text = "1 –∑–∞–Ω—è—Ç–∏–µ"
        elif 2 <= lessons_count <= 4:
            count_text = f"{lessons_count} –∑–∞–Ω—è—Ç–∏—è"
        else:
            count_text = f"{lessons_count} –∑–∞–Ω—è—Ç–∏–π"
        
        keyboard_buttons.append([InlineKeyboardButton(
            text=f"üìÖ {display_date} ({count_text})",
            callback_data=f"edit_date_{date_str}"
        )])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="schedule")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

def get_lesson_selection_keyboard(grouped_lessons, selected_date):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –∑–∞–Ω—è—Ç–∏—è"""
    keyboard_buttons = []
    for key, lesson_info in sorted(grouped_lessons.items(), key=lambda x: x[1]['time']):
        if lesson_info.get('is_group', True):  # –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
            display_text = f"{lesson_info['time']} - üë• {lesson_info['group_name']} ({lesson_info['count']} —á–µ–ª.)"
            callback_data = f"select_group_{lesson_info['group_id']}_{selected_date}_{lesson_info['time']}"
        else:  # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
            display_text = f"{lesson_info['time']} - üë§ {lesson_info['student_name']}"
            callback_data = f"select_lesson_{lesson_info['lesson_id']}"
        
        keyboard_buttons.append([InlineKeyboardButton(
            text=display_text,
            callback_data=callback_data
        )])
    
    keyboard_buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="edit_lesson")])
    return InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)

def get_individual_edit_keyboard(lesson_date, is_group=False):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è", callback_data="edit_datetime")],
        [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="edit_price")],
        [InlineKeyboardButton(text="‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="edit_duration")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data="delete_lesson")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_date_{lesson_date}")]
    ])

def get_group_edit_keyboard(selected_date):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è", callback_data="edit_group_datetime")],
        [InlineKeyboardButton(text="üí∞ –ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å", callback_data="edit_group_price")],
        [InlineKeyboardButton(text="‚è±Ô∏è –ò–∑–º–µ–Ω–∏—Ç—å –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å", callback_data="edit_group_duration")],
        [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å –∑–∞–Ω—è—Ç–∏–µ", callback_data="delete_group_lessons")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"edit_date_{selected_date}")]
    ])

def get_back_keyboard(callback_data):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫–Ω–æ–ø–∫–æ–π –Ω–∞–∑–∞–¥"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=callback_data)]
    ])

def get_confirmation_keyboard(confirm_callback, cancel_callback):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –î–∞", callback_data=confirm_callback)],
        [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data=cancel_callback)]
    ])