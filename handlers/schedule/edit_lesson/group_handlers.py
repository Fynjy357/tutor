from aiogram import Router
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from database import db

from .keyboards import *
from .utils import *
from handlers.schedule.states import EditLessonStates

router = Router()

async def show_group_edit_options(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –æ–ø—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
    await callback_query.answer()
    
    parts = callback_query.data.split('_')
    group_id = int(parts[2])
    selected_date = parts[3]
    selected_time = parts[4]
    
    group = db.get_group_by_id(group_id)
    if not group:
        await callback_query.message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
        await state.clear()
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç–∏—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã –Ω–∞ —ç—Ç—É –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
    lessons = db.get_lessons_by_date(group['tutor_id'], selected_date)
    group_lessons = [lesson for lesson in lessons if lesson['group_id'] == group_id and 
                     lesson['lesson_date'].split()[1][:5] == selected_time]
    
    if not group_lessons:
        await callback_query.message.answer("‚ùå –ó–∞–Ω—è—Ç–∏—è –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        await state.clear()
        return
    
    # –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –∫–∞–∫ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª—å –≥—Ä—É–ø–ø—ã
    representative_lesson = group_lessons[0]
    
    await state.update_data(
        group_id=group_id,
        group_lessons=group_lessons,
        selected_date=selected_date,
        selected_time=selected_time,
        representative_lesson=representative_lesson
    )
    
    keyboard = get_group_edit_keyboard(selected_date)
    
    await callback_query.message.edit_text(
        f"üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {group['name']}\n"
        f"üìÖ –î–∞—Ç–∞: {selected_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {selected_time}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤: {len(group_lessons)}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {representative_lesson['price']} —Ä—É–±.\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {representative_lesson['duration']} –º–∏–Ω.\n\n",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.choosing_group_action)

@router.callback_query(F.data.startswith("edit_date_"))
async def handle_group_back_button(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ –ù–∞–∑–∞–¥ –≤ –≥—Ä—É–ø–ø–æ–≤–æ–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏"""
    try:
        await callback_query.answer()
        selected_date = callback_query.data.split("_")[2]
        
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ —Ç–æ–≥–æ –∂–µ –ø–∞–∫–µ—Ç–∞
        from .utils import show_lessons_for_editing
        await show_lessons_for_editing(callback_query, state, selected_date)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –≤ handle_group_back_button: {e}")
        await callback_query.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∑–∞–Ω—è—Ç–∏–π", show_alert=True)

async def edit_group_datetime_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2024",
        reply_markup=get_back_keyboard("back_to_group_options"),
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.editing_group_date)

async def process_new_group_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    is_valid, error_msg = validate_date(message.text)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    await state.update_data(new_date=message.text)
    
    await message.answer(
        "‚è∞ <b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30",
        reply_markup=get_back_keyboard("back_to_group_date_input"),
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.editing_group_time)

async def process_new_group_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    is_valid, error_msg = validate_time(message.text)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    data = await state.get_data()
    new_date = data.get('new_date')
    group_id = data.get('group_id')
    
    db_datetime = format_datetime_for_db(new_date, message.text)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    success = db.update_group_lesson_datetime(group_id, db_datetime)
    
    if success:
        await message.answer("‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –í–°–ï–• –∑–∞–Ω—è—Ç–∏–π –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!")
        await show_group_edit_options_after_update(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏.")

async def edit_group_price_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1500",
        reply_markup=get_back_keyboard("back_to_group_options"),
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.editing_group_price)

async def process_new_group_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    is_valid, result = validate_price(message.text)
    if not is_valid:
        await message.answer(result)
        return
    
    price = result
    data = await state.get_data()
    group_id = data.get('group_id')
    
    success = db.update_group_lesson_price(group_id, price)
    
    if success:
        await message.answer(f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –í–°–ï–• –∑–∞–Ω—è—Ç–∏–π –≥—Ä—É–ø–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {price} —Ä—É–±.!")
        await show_group_edit_options_after_update(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.")

async def edit_group_duration_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "‚è±Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è –¥–ª—è –≥—Ä—É–ø–ø—ã (–≤ –º–∏–Ω—É—Ç–∞—Ö):</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 90 (–¥–ª—è 1.5 —á–∞—Å–∞)",
        reply_markup=get_back_keyboard("back_to_group_options"),
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.editing_group_duration)

async def process_new_group_duration(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    is_valid, result = validate_duration(message.text)
    if not is_valid:
        await message.answer(result)
        return
    
    duration = result
    data = await state.get_data()
    group_id = data.get('group_id')
    
    success = db.update_group_lesson_duration(group_id, duration)
    
    if success:
        await message.answer(f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –í–°–ï–• –∑–∞–Ω—è—Ç–∏–π –≥—Ä—É–ø–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {duration} –º–∏–Ω—É—Ç!")
        await show_group_edit_options_after_update(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")

async def delete_group_lessons_confirm(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–Ω—è—Ç–∏–π –≥—Ä—É–ø–ø—ã"""
    await callback_query.answer()
    
    data = await state.get_data()
    group_lessons = data.get('group_lessons', [])
    group = db.get_group_by_id(data.get('group_id'))
    
    keyboard = get_confirmation_keyboard("confirm_group_delete", "back_to_group_options")
    
    await callback_query.message.edit_text(
        f"‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –í–°–ï –∑–∞–Ω—è—Ç–∏—è –≥—Ä—É–ø–ø—ã?</b>\n\n"
        f"üë• –ì—Ä—É–ø–ø–∞: {group['name'] if group else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≥—Ä—É–ø–ø–∞'}\n"
        f"üìÖ –î–∞—Ç–∞: {data.get('selected_date')}\n"
        f"‚è∞ –í—Ä–µ–º—è: {data.get('selected_time')}\n"
        f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç–∏–π: {len(group_lessons)}\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.confirming_group_delete)

async def confirm_delete_group_lessons(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–Ω—è—Ç–∏–π –≥—Ä—É–ø–ø—ã —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    await callback_query.answer()
    
    data = await state.get_data()
    group_lessons = data.get('group_lessons', [])
    
    success_count = 0
    for lesson in group_lessons:
        if db.delete_lesson(lesson['id']):
            success_count += 1
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    
    if success_count == len(group_lessons):
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        await callback_query.answer(f"‚úÖ –í—Å–µ {success_count} –∑–∞–Ω—è—Ç–∏–π –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω—ã!", show_alert=True)
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —á–∞—Å—Ç–∏—á–Ω–æ–º —É–¥–∞–ª–µ–Ω–∏–∏
        await callback_query.answer(f"‚ö†Ô∏è –£–¥–∞–ª–µ–Ω–æ {success_count} –∏–∑ {len(group_lessons)} –∑–∞–Ω—è—Ç–∏–π –≥—Ä—É–ø–ø—ã!", show_alert=True)
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    from handlers.schedule.schedule_utils import get_upcoming_lessons_text
    from handlers.schedule.keyboards_schedule import get_schedule_keyboard
    
    schedule_text = await get_upcoming_lessons_text(tutor_id)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    await callback_query.message.edit_text(
        schedule_text,
        reply_markup=get_schedule_keyboard(),
        parse_mode="HTML"
    )
    
    await state.clear()

async def back_to_group_options(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    data = await state.get_data()
    selected_date = data.get('selected_date')
    if selected_date:
        await show_lessons_for_editing(callback_query, state, selected_date)

async def show_group_edit_options_after_update(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    group_id = data.get('group_id')
    selected_date = data.get('selected_date')
    
    group = db.get_group_by_id(group_id)
    lessons = db.get_lessons_by_date(group['tutor_id'], selected_date)
    group_lessons = [lesson for lesson in lessons if lesson['group_id'] == group_id]
    
    if group_lessons:
        representative_lesson = group_lessons[0]
        await state.update_data(
            group_lessons=group_lessons,
            representative_lesson=representative_lesson
        )
        
        keyboard = get_group_edit_keyboard(selected_date)
        
        lesson_date = representative_lesson['lesson_date'].split()[0]
        lesson_time = representative_lesson['lesson_date'].split()[1][:5]
        
        await message.answer(
            f"üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
            f"üë• –ì—Ä—É–ø–ø–∞: {group['name']}\n"
            f"üìÖ –î–∞—Ç–∞: {lesson_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {lesson_time}\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤: {len(group_lessons)}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {representative_lesson['price']} —Ä—É–±.\n"
            f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {representative_lesson['duration']} –º–∏–Ω.\n\n",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(EditLessonStates.choosing_group_action)

__all__ = ['router']