from aiogram import Router
from aiogram import types, F
from aiogram.fsm.context import FSMContext
from database import db
from .keyboards import *
from .utils import *
from handlers.schedule.states import EditLessonStates

router = Router()

async def show_edit_options(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ –æ–ø—Ü–∏–π —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
    await callback_query.answer()
    
    lesson_id = int(callback_query.data.split("_")[2])
    lesson = db.get_lesson_by_id(lesson_id)
    
    if not lesson:
        await callback_query.message.answer("‚ùå –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.clear()
        return
    
    await state.update_data(lesson_id=lesson_id, original_lesson=lesson)
    
    lesson_date = lesson['lesson_date'].split()[0]
    lesson_time = lesson['lesson_date'].split()[1][:5]
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è
    if lesson['group_id']:
        student_name = f"üë• {lesson['group_name'] or '–ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ'}"
        is_group = True
    else:
        student_name = f"üë§ {lesson['student_name'] or '–£—á–µ–Ω–∏–∫'}"
        is_group = False
    
    keyboard = get_individual_edit_keyboard(lesson_date, is_group)
    
    await callback_query.message.edit_text(
        f"üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: {lesson_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {lesson_time}\n"
        f"üë§ –£—á–µ–Ω–∏–∫/–ì—Ä—É–ø–ø–∞: {student_name}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {lesson['price']} —Ä—É–±.\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson['duration']} –º–∏–Ω.\n\n"
        f"{'‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∫–æ –í–°–ï–ú –∑–∞–Ω—è—Ç–∏—è–º –≥—Ä—É–ø–ø—ã' if is_group else ''}",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.choosing_action)

async def edit_datetime_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏"""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.12.2024",
        reply_markup=get_back_keyboard("back_to_edit_options"),
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.editing_date)

async def process_new_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–∞—Ç—ã"""
    is_valid, error_msg = validate_date(message.text)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    await state.update_data(new_date=message.text)
    
    await message.answer(
        "‚è∞ <b>–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30",
        reply_markup=get_back_keyboard("back_to_date_input"),
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.editing_time)

async def process_new_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏"""
    is_valid, error_msg = validate_time(message.text)
    if not is_valid:
        await message.answer(error_msg)
        return
    
    data = await state.get_data()
    new_date = data.get('new_date')
    lesson_id = data.get('lesson_id')
    lesson = data.get('original_lesson')
    
    db_datetime = format_datetime_for_db(new_date, message.text)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –ë–î
    success = False
    if lesson['group_id']:
        success = db.update_group_lesson_datetime(lesson['group_id'], db_datetime)
        if success:
            await message.answer("‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –í–°–ï–• –∑–∞–Ω—è—Ç–∏–π –≥—Ä—É–ø–ø—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!")
    else:
        success = db.update_lesson_datetime(lesson_id, db_datetime)
        if success:
            await message.answer("‚úÖ –î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω—ã!")
    
    if success:
        updated_lesson = db.get_lesson_by_id(lesson_id)
        await state.update_data(original_lesson=updated_lesson)
        await show_edit_options_after_update(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏.")

async def edit_price_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "üí∞ <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 1500",
        reply_markup=get_back_keyboard("back_to_edit_options"),
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.editing_price)

async def process_new_price(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏"""
    is_valid, result = validate_price(message.text)
    if not is_valid:
        await message.answer(result)
        return
    
    price = result
    data = await state.get_data()
    lesson_id = data.get('lesson_id')
    lesson = data.get('original_lesson')
    
    success = False
    if lesson['group_id']:
        success = db.update_group_lesson_price(lesson['group_id'], price)
        if success:
            await message.answer(f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –í–°–ï–• –∑–∞–Ω—è—Ç–∏–π –≥—Ä—É–ø–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {price} —Ä—É–±.!")
    else:
        success = db.update_lesson_price(lesson_id, price)
        if success:
            await message.answer(f"‚úÖ –°—Ç–æ–∏–º–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {price} —Ä—É–±.!")
    
    if success:
        updated_lesson = db.get_lesson_by_id(lesson_id)
        await state.update_data(original_lesson=updated_lesson)
        await show_edit_options_after_update(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏.")

async def edit_duration_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "‚è±Ô∏è <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∑–∞–Ω—è—Ç–∏—è (–≤ –º–∏–Ω—É—Ç–∞—Ö):</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 90 (–¥–ª—è 1.5 —á–∞—Å–∞)",
        reply_markup=get_back_keyboard("back_to_edit_options"),
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.editing_duration)

async def process_new_duration(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–π –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    is_valid, result = validate_duration(message.text)
    if not is_valid:
        await message.answer(result)
        return
    
    duration = result
    data = await state.get_data()
    lesson_id = data.get('lesson_id')
    lesson = data.get('original_lesson')
    
    success = False
    if lesson['group_id']:
        success = db.update_group_lesson_duration(lesson['group_id'], duration)
        if success:
            await message.answer(f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –í–°–ï–• –∑–∞–Ω—è—Ç–∏–π –≥—Ä—É–ø–ø—ã –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {duration} –º–∏–Ω—É—Ç!")
    else:
        success = db.update_lesson_duration(lesson_id, duration)
        if success:
            await message.answer(f"‚úÖ –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∞ –Ω–∞ {duration} –º–∏–Ω—É—Ç!")
    
    if success:
        updated_lesson = db.get_lesson_by_id(lesson_id)
        await state.update_data(original_lesson=updated_lesson)
        await show_edit_options_after_update(message, state)
    else:
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏.")

async def delete_lesson_confirm(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è"""
    await callback_query.answer()
    
    data = await state.get_data()
    lesson = data.get('original_lesson')
    
    keyboard = get_confirmation_keyboard("confirm_delete", "back_to_edit_options")
    
    lesson_date = lesson['lesson_date'].split()[0]
    lesson_time = lesson['lesson_date'].split()[1][:5]
    student_name = lesson['student_name'] if lesson['student_name'] else "–ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ"
    
    await callback_query.message.edit_text(
        f"‚ö†Ô∏è <b>–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ –∑–∞–Ω—è—Ç–∏–µ?</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: {lesson_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {lesson_time}\n"
        f"üë§ –£—á–µ–Ω–∏–∫: {student_name}\n\n"
        f"–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.confirming_delete)

async def confirm_delete_lesson(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è"""
    await callback_query.answer()
    
    data = await state.get_data()
    lesson_id = data.get('lesson_id')
    
    if db.delete_lesson(lesson_id):
        await callback_query.message.edit_text(
            "‚úÖ –ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ!",
            parse_mode="HTML"
        )
    else:
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è!",
            parse_mode="HTML"
        )
    
    await state.clear()

async def back_to_edit_options(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –æ–ø—Ü–∏—è–º —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback_query.answer()
    
    data = await state.get_data()
    lesson_id = data.get('lesson_id')
    
    if lesson_id:
        lesson = db.get_lesson_by_id(lesson_id)
        if lesson:
            await state.update_data(original_lesson=lesson)
            
            lesson_date = lesson['lesson_date'].split()[0]
            lesson_time = lesson['lesson_date'].split()[1][:5]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è
            if lesson['group_id']:
                student_name = f"üë• {lesson['group_name'] or '–ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ'}"
            else:
                student_name = f"üë§ {lesson['student_name'] or '–£—á–µ–Ω–∏–∫'}"
            
            keyboard = get_individual_edit_keyboard(lesson_date, lesson['group_id'])
            
            await callback_query.message.edit_text(
                f"üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
                f"üìÖ –î–∞—Ç–∞: {lesson_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {lesson_time}\n"
                f"üë§ –£—á–µ–Ω–∏–∫/–ì—Ä—É–ø–ø–∞: {student_name}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {lesson['price']} —Ä—É–±.\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson['duration']} –º–∏–Ω.\n\n"
                f"{'‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∫–æ –í–°–ï–ú –∑–∞–Ω—è—Ç–∏—è–º –≥—Ä—É–ø–ø—ã' if lesson['group_id'] else ''}",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await state.set_state(EditLessonStates.choosing_action)

async def show_edit_options_after_update(message: types.Message, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –æ–ø—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è"""
    data = await state.get_data()
    lesson = data.get('original_lesson')
    
    lesson_date = lesson['lesson_date'].split()[0]
    lesson_time = lesson['lesson_date'].split()[1][:5]
    student_name = lesson['student_name'] if lesson['student_name'] else "–ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ"
    
    keyboard = get_individual_edit_keyboard(lesson_date, lesson['group_id'])
    
    await message.answer(
        f"üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
        f"üìÖ –î–∞—Ç–∞: {lesson_date}\n"
        f"‚è∞ –í—Ä–µ–º—è: {lesson_time}\n"
        f"üë§ –£—á–µ–Ω–∏–∫: {student_name}\n"
        f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {lesson['price']} —Ä—É–±.\n"
        f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson['duration']} –º–∏–Ω.",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.choosing_action)

__all__ = ['router']