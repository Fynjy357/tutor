from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from datetime import datetime
from database import db
from handlers.schedule.states import EditLessonStates
from .keyboards import *
from .utils import *
from . import individual_handlers, group_handlers
import logging
import asyncio

router = Router()
logger = logging.getLogger(__name__)

# –û—Å–Ω–æ–≤–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
@router.callback_query(F.data == "edit_lesson")
async def edit_lesson_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è - –≤—ã–±–æ—Ä –¥–∞—Ç—ã"""
    await callback_query.answer()
    
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    if not tutor_id:
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –±–ª–∏–∂–∞–π—à–∏–µ –∑–∞–Ω—è—Ç–∏—è (7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥)
    upcoming_lessons = db.get_upcoming_lessons(tutor_id, days=7)
    
    if not upcoming_lessons:
        await callback_query.message.answer("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        return
    
    lessons_by_date = group_lessons_by_date(upcoming_lessons)
    keyboard = get_date_selection_keyboard(lessons_by_date)
    
    await callback_query.message.edit_text(
        "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.choosing_date)

@router.callback_query(EditLessonStates.choosing_date, F.data.startswith("edit_date_"))
async def choose_lesson_to_edit(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    selected_date = callback_query.data.split("_")[2]
    await show_lessons_for_editing(callback_query, state, selected_date)

# –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
@router.callback_query(EditLessonStates.choosing_lesson, F.data.startswith("select_lesson_"))
async def handle_select_lesson(callback_query: types.CallbackQuery, state: FSMContext):
    await individual_handlers.show_edit_options(callback_query, state)

@router.callback_query(EditLessonStates.choosing_action, F.data == "edit_datetime")
async def handle_edit_datetime(callback_query: types.CallbackQuery, state: FSMContext):
    await individual_handlers.edit_datetime_start(callback_query, state)

@router.message(EditLessonStates.editing_date)
async def handle_process_date(message: types.Message, state: FSMContext):
    await individual_handlers.process_new_date(message, state)

@router.message(EditLessonStates.editing_time)
async def handle_process_time(message: types.Message, state: FSMContext):
    await individual_handlers.process_new_time(message, state)

@router.callback_query(EditLessonStates.choosing_action, F.data == "edit_price")
async def handle_edit_price(callback_query: types.CallbackQuery, state: FSMContext):
    await individual_handlers.edit_price_start(callback_query, state)

@router.message(EditLessonStates.editing_price)
async def handle_process_price(message: types.Message, state: FSMContext):
    await individual_handlers.process_new_price(message, state)

@router.callback_query(EditLessonStates.choosing_action, F.data == "edit_duration")
async def handle_edit_duration(callback_query: types.CallbackQuery, state: FSMContext):
    await individual_handlers.edit_duration_start(callback_query, state)

@router.message(EditLessonStates.editing_duration)
async def handle_process_duration(message: types.Message, state: FSMContext):
    await individual_handlers.process_new_duration(message, state)

@router.callback_query(EditLessonStates.choosing_action, F.data == "delete_lesson")
async def handle_delete_lesson(callback_query: types.CallbackQuery, state: FSMContext):
    await individual_handlers.delete_lesson_confirm(callback_query, state)

@router.callback_query(EditLessonStates.confirming_delete, F.data == "confirm_delete")
async def handle_confirm_delete(callback_query: types.CallbackQuery, state: FSMContext):
    await individual_handlers.confirm_delete_lesson(callback_query, state)

@router.callback_query(EditLessonStates.choosing_action, F.data == "back_to_edit_options")
async def handle_back_to_options(callback_query: types.CallbackQuery, state: FSMContext):
    await individual_handlers.back_to_edit_options(callback_query, state)

# –ì—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è
@router.callback_query(EditLessonStates.choosing_lesson, F.data.startswith("select_group_"))
async def handle_select_group(callback_query: types.CallbackQuery, state: FSMContext):
    await group_handlers.show_group_edit_options(callback_query, state)

@router.callback_query(EditLessonStates.choosing_group_action, F.data == "edit_group_datetime")
async def handle_edit_group_datetime(callback_query: types.CallbackQuery, state: FSMContext):
    await group_handlers.edit_group_datetime_start(callback_query, state)

@router.message(EditLessonStates.editing_group_date)
async def handle_process_group_date(message: types.Message, state: FSMContext):
    await group_handlers.process_new_group_date(message, state)

@router.message(EditLessonStates.editing_group_time)
async def handle_process_group_time(message: types.Message, state: FSMContext):
    await group_handlers.process_new_group_time(message, state)

@router.callback_query(EditLessonStates.choosing_group_action, F.data == "edit_group_price")
async def handle_edit_group_price(callback_query: types.CallbackQuery, state: FSMContext):
    await group_handlers.edit_group_price_start(callback_query, state)

@router.message(EditLessonStates.editing_group_price)
async def handle_process_group_price(message: types.Message, state: FSMContext):
    await group_handlers.process_new_group_price(message, state)

@router.callback_query(EditLessonStates.choosing_group_action, F.data == "edit_group_duration")
async def handle_edit_group_duration(callback_query: types.CallbackQuery, state: FSMContext):
    await group_handlers.edit_group_duration_start(callback_query, state)

@router.message(EditLessonStates.editing_group_duration)
async def handle_process_group_duration(message: types.Message, state: FSMContext):
    await group_handlers.process_new_group_duration(message, state)

@router.callback_query(EditLessonStates.choosing_group_action, F.data == "delete_group_lessons")
async def handle_delete_group_lessons(callback_query: types.CallbackQuery, state: FSMContext):
    await group_handlers.delete_group_lessons_confirm(callback_query, state)

@router.callback_query(EditLessonStates.confirming_group_delete, F.data == "confirm_group_delete")
async def handle_confirm_group_delete(callback_query: types.CallbackQuery, state: FSMContext):
    await group_handlers.confirm_delete_group_lessons(callback_query, state)

@router.callback_query(EditLessonStates.choosing_group_action, F.data == "back_to_group_options")
async def handle_back_to_group_options(callback_query: types.CallbackQuery, state: FSMContext):
    await group_handlers.back_to_group_options(callback_query, state)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏–π
@router.callback_query(EditLessonStates.editing_group_date, F.data == "back_to_group_options")
@router.callback_query(EditLessonStates.editing_group_time, F.data == "back_to_group_date_input")
@router.callback_query(EditLessonStates.editing_group_price, F.data == "back_to_group_options")
@router.callback_query(EditLessonStates.editing_group_duration, F.data == "back_to_group_options")
async def handle_back_from_group_input(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã"""
    await callback_query.answer()
    
    data = await state.get_data()
    group_id = data.get('group_id')
    selected_date = data.get('selected_date')
    selected_time = data.get('selected_time')
    
    group = db.get_group_by_id(group_id)
    lessons = db.get_lessons_by_date(group['tutor_id'], selected_date)
    group_lessons = [lesson for lesson in lessons if lesson['group_id'] == group_id and 
                     lesson['lesson_date'].split()[1][:5] == selected_time]
    
    if group_lessons:
        representative_lesson = group_lessons[0]
        await state.update_data(representative_lesson=representative_lesson)
        
        keyboard = get_group_edit_keyboard(selected_date)
        
        await callback_query.message.edit_text(
            f"üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
            f"üë• –ì—Ä—É–ø–ø–∞: {group['name']}\n"
            f"üìÖ –î–∞—Ç–∞: {selected_date}\n"
            f"‚è∞ –í—Ä–µ–º—è: {selected_time}\n"
            f"üë• –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–µ–Ω–∏–∫–æ–≤: {len(group_lessons)}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {representative_lesson['price']} —Ä—É–±.\n"
            f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {representative_lesson['duration']} –º–∏–Ω.\n\n"
            f"‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∫–æ —É—á–µ–Ω–∏–∫–∞–º –≤ –≥—Ä—É–ø–ø–µ",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(EditLessonStates.choosing_group_action)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
@router.callback_query(EditLessonStates.editing_date, F.data == "back_to_edit_options")
@router.callback_query(EditLessonStates.editing_time, F.data == "back_to_date_input")
@router.callback_query(EditLessonStates.editing_price, F.data == "back_to_edit_options")
@router.callback_query(EditLessonStates.editing_duration, F.data == "back_to_edit_options")
async def handle_back_from_individual_input(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤–≤–æ–¥–∞ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π"""
    await callback_query.answer()
    
    data = await state.get_data()
    lesson_id = data.get('lesson_id')
    
    if lesson_id:
        lesson = db.get_lesson_by_id(lesson_id)
        if lesson:
            await state.update_data(original_lesson=lesson)
            
            lesson_date = lesson['lesson_date'].split()[0]
            lesson_time = lesson['lesson_date'].split()[1][:5]
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è
            if lesson['group_id']:
                student_name = f"üë• {lesson['group_name'] or '–ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ'}"
            else:
                student_name = f"üë§ {lesson['student_name'] or '–£—á–µ–Ω–∏–∫'}"
            
            keyboard = get_individual_edit_keyboard(lesson_date, lesson['group_id'])
            
            await callback_query.message.edit_text(
                f"üìã <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
                f"üìÖ –î–∞—Ç–∞: {lesson_date}\n"
                f"‚è∞ –í—Ä–µ–º—è: {lesson_time}\n"
                f"üë§ –£—á–µ–Ω–∏–∫/–ì—Ä—É–ø–ø–∞: {student_name}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {lesson['price']} —Ä—É–±.\n"
                f"‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson['duration']} –º–∏–Ω.\n\n"
                f"{'‚ö†Ô∏è –ò–∑–º–µ–Ω–µ–Ω–∏—è –ø—Ä–∏–º–µ–Ω—è—Ç—Å—è –∫–æ —É—á–µ–Ω–∏–∫–∞–º –≤ –≥—Ä—É–ø–ø–µ' if lesson['group_id'] else ''}",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await state.set_state(EditLessonStates.choosing_action)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã
@router.callback_query(EditLessonStates.choosing_lesson, F.data == "back_to_date_selection")
async def handle_back_to_date_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
    await callback_query.answer()
    
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    upcoming_lessons = db.get_upcoming_lessons(tutor_id, days=7)
    
    if not upcoming_lessons:
        await callback_query.message.edit_text("üì≠ –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.")
        await state.clear()
        return
    
    lessons_by_date = group_lessons_by_date(upcoming_lessons)
    keyboard = get_date_selection_keyboard(lessons_by_date)
    
    await callback_query.message.edit_text(
        "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.choosing_date)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –æ—Ç–º–µ–Ω—ã
@router.callback_query(F.data == "cancel_edit")
async def handle_cancel_edit(callback_query: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await callback_query.answer()
    await callback_query.message.edit_text("‚ùå –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.message(EditLessonStates.editing_date)
@router.message(EditLessonStates.editing_time)
@router.message(EditLessonStates.editing_price)
@router.message(EditLessonStates.editing_duration)
@router.message(EditLessonStates.editing_group_date)
@router.message(EditLessonStates.editing_group_time)
@router.message(EditLessonStates.editing_group_price)
@router.message(EditLessonStates.editing_group_duration)
async def handle_invalid_input(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –≤–≤–æ–¥–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏—è—Ö —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")



__all__ = ['router']