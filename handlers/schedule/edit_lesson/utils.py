from datetime import datetime
import re
from database import db


from datetime import datetime
from aiogram import types
from aiogram.fsm.context import FSMContext
from .keyboards import get_lesson_selection_keyboard
from .edit_lesson import EditLessonStates

def group_lessons_by_date(lessons):
    """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–Ω—è—Ç–∏–π –ø–æ –¥–∞—Ç–µ"""
    lessons_by_date = {}
    for lesson in lessons:
        lesson_date = lesson['lesson_date'].split()[0]
        if lesson_date not in lessons_by_date:
            lessons_by_date[lesson_date] = []
        lessons_by_date[lesson_date].append(lesson)
    return lessons_by_date

def group_lessons_by_time(lessons):
    """–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∑–∞–Ω—è—Ç–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∏ –≥—Ä—É–ø–ø–µ"""
    grouped_lessons = {}
    for lesson in lessons:
        time_str = lesson['lesson_date'].split()[1][:5]
        group_id = lesson['group_id']
        
        if group_id:
            # –ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
            key = f"{time_str}_group_{group_id}"
            if key not in grouped_lessons:
                grouped_lessons[key] = {
                    'time': time_str,
                    'group_id': group_id,
                    'group_name': lesson['group_name'],
                    'count': 0,
                    'lesson_ids': []
                }
            grouped_lessons[key]['count'] += 1
            grouped_lessons[key]['lesson_ids'].append(lesson['id'])
        else:
            # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
            key = f"{time_str}_individual_{lesson['id']}"
            grouped_lessons[key] = {
                'time': time_str,
                'student_name': lesson['student_name'],
                'is_group': False,
                'lesson_id': lesson['id']
            }
    return grouped_lessons

def validate_date(date_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã"""
    date_pattern = r'^\d{2}\.\d{2}\.\d{4}$'
    if not re.match(date_pattern, date_str):
        return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì"
    
    try:
        day, month, year = date_str.split('.')
        datetime(int(year), int(month), int(day))
        return True, None
    except ValueError:
        return False, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è –¥–∞—Ç–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞."

def validate_time(time_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –≤—Ä–µ–º–µ–Ω–∏"""
    time_pattern = r'^\d{2}:\d{2}$'
    if not re.match(time_pattern, time_str):
        return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:–ú–ú"
    
    try:
        hours, minutes = time_str.split(':')
        if not (0 <= int(hours) <= 23 and 0 <= int(minutes) <= 59):
            return False, "‚ùå –ù–µ–≤–µ—Ä–Ω–æ–µ –≤—Ä–µ–º—è. –ß–∞—Å—ã: 00-23, –º–∏–Ω—É—Ç—ã: 00-59"
        return True, None
    except ValueError:
        return False, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏."

def validate_price(price_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Ü–µ–Ω—ã"""
    try:
        price = float(price_str)
        if price <= 0:
            return False, "‚ùå –°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º."
        return True, price
    except ValueError:
        return False, "‚ùå –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 1500 –∏–ª–∏ 1200.50"

def validate_duration(duration_str):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    try:
        duration = int(duration_str)
        if duration <= 0:
            return False, "‚ùå –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º."
        return True, duration
    except ValueError:
        return False, "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: 60 –∏–ª–∏ 90"

def format_datetime_for_db(date_str, time_str):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ë–î"""
    day, month, year = date_str.split('.')
    db_date = f"{year}-{month}-{day}"
    return f"{db_date} {time_str}:00"

async def show_lessons_for_editing(callback_query: types.CallbackQuery, state: FSMContext, selected_date: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —É—Ä–æ–∫–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–±—â–∞—è —Ñ—É–Ω–∫—Ü–∏—è)"""
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    lessons = db.get_lessons_by_date(tutor_id, selected_date)
    grouped_lessons = group_lessons_by_time(lessons)
    keyboard = get_lesson_selection_keyboard(grouped_lessons, selected_date)
    
    date_obj = datetime.strptime(selected_date, "%Y-%m-%d")
    display_date = date_obj.strftime("%d.%m.%Y")
    
    await callback_query.message.edit_text(
        f"üìÖ <b>–ó–∞–Ω—è—Ç–∏—è –Ω–∞ {display_date}:</b>\n\n"
        "üë§ - –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ\n"
        "üë• - –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(EditLessonStates.choosing_lesson)