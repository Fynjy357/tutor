# handlers/schedule/handlers.py
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
import logging
from datetime import datetime
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from handlers.schedule.keyboards_schedule import get_schedule_keyboard
from keyboards.main_menu import get_main_menu_keyboard
from database import db
from handlers.schedule.add_lesson.handlers_add_lesson import router as add_new_lesson


router = Router()
router.include_router(add_new_lesson)
logger = logging.getLogger(__name__)


@router.callback_query(F.data == "schedule")
async def show_schedule(callback_query: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –Ω–µ–¥–µ–ª—é"""
    await callback_query.answer()
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –µ—Å–ª–∏ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω–æ
    current_state = await state.get_state()
    if current_state:
        await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    if not tutor_id:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é
    schedule_text = await get_upcoming_lessons(tutor_id)
    
    try:
        await callback_query.message.edit_text(
            schedule_text,
            reply_markup=get_schedule_keyboard(),
            parse_mode="HTML"
        )
    except TelegramBadRequest:
        await callback_query.message.answer(
            schedule_text,
            reply_markup=get_schedule_keyboard(),
            parse_mode="HTML"
        )

async def get_upcoming_lessons(tutor_id: int) -> str:
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Ç–µ–∫—Å—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –Ω–µ–¥–µ–ª—é —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π"""
    lessons = db.get_upcoming_lessons(tutor_id)
    
    if not lessons:
        return "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π</b>\n\n–ù–∞ –±–ª–∏–∂–∞–π—à—É—é –Ω–µ–¥–µ–ª—é –∑–∞–Ω—è—Ç–∏–π –Ω–µ—Ç."
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –∑–∞–Ω—è—Ç–∏—è –ø–æ –¥–∞—Ç–µ+–≤—Ä–µ–º–µ–Ω–∏ –∏ –≥—Ä—É–ø–ø–µ
    schedule_dict = {}
    
    for lesson in lessons:
        lesson_date = datetime.strptime(lesson['lesson_date'], '%Y-%m-%d %H:%M:%S')
        time_key = lesson_date.strftime('%Y-%m-%d %H:%M')
        group_id = lesson.get('group_id')
        
        if time_key not in schedule_dict:
            schedule_dict[time_key] = {
                'datetime': lesson_date,
                'individual_lessons': [],
                'group_lessons': {}
            }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è
        if group_id:
            if group_id not in schedule_dict[time_key]['group_lessons']:
                schedule_dict[time_key]['group_lessons'][group_id] = {
                    'group_name': lesson.get('group_name', f'–ì—Ä—É–ø–ø–∞ #{group_id}'),
                    'students': [],
                    'duration': lesson['duration'],
                    'price': lesson['price'],
                    'status': lesson['status']
                }
            schedule_dict[time_key]['group_lessons'][group_id]['students'].append(lesson['student_name'])
        else:
            schedule_dict[time_key]['individual_lessons'].append(lesson)
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_text = "üìÖ <b>–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –Ω–µ–¥–µ–ª—é</b>\n\n"
    
    for time_key in sorted(schedule_dict.keys()):
        slot_data = schedule_dict[time_key]
        display_time = slot_data['datetime'].strftime('%d.%m %H:%M')
        
        schedule_text += f"üïê <b>{display_time}</b>\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥—Ä—É–ø–ø–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è
        for group_id, group_data in slot_data['group_lessons'].items():
            schedule_text += f"üë• <b>–ì—Ä—É–ø–ø–∞: {group_data['group_name']}</b>\n"
            schedule_text += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {group_data['duration']} –º–∏–Ω\n"
            schedule_text += f"üí∞ –¶–µ–Ω–∞: {group_data['price']} —Ä—É–±\n"
            schedule_text += f"üìä –°—Ç–∞—Ç—É—Å: {group_data['status']}\n"
            schedule_text += f"üë®‚Äçüéì –£—á–µ–Ω–∏–∫–æ–≤: {len(group_data['students'])}\n"
            
            # –°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
            students = ", ".join(group_data['students'])
            schedule_text += f"üéì –£—á–µ–Ω–∏–∫–∏: {students}\n"
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
        for lesson in slot_data['individual_lessons']:
            schedule_text += f"üë§ {lesson['student_name']}\n"
            schedule_text += f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {lesson['duration']} –º–∏–Ω\n"
            schedule_text += f"üí∞ –¶–µ–Ω–∞: {lesson['price']} —Ä—É–±\n"
            schedule_text += f"üìä –°—Ç–∞—Ç—É—Å: {lesson['status']}\n"
        
        schedule_text += "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
    
    schedule_text += "\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
    
    return schedule_text


@router.callback_query(F.data == "back_from_schedule")
async def back_from_schedule(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏–∑ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è"""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    tutor = db.get_tutor_by_telegram_id(callback_query.from_user.id)
    tutor_name = tutor[2] if tutor else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    
    welcome_text = f"""
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥, {tutor_name}!</b>

–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:
"""
    
    try:
        await callback_query.message.edit_text(
            welcome_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="HTML"
        )
    except TelegramBadRequest:
        await callback_query.message.answer(
            welcome_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="HTML"
        )