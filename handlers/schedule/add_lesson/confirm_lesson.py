from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from datetime import datetime
from database import db
from handlers.schedule.states import AddLessonStates
from datetime import datetime, timedelta
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
import logging


router = Router()
logger = logging.getLogger(__name__)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è
@router.callback_query(AddLessonStates.confirmation, F.data == "confirm_lesson")
async def process_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è"""
    await callback_query.answer()
    
    data = await state.get_data()
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    
    try:
        if data.get('frequency') == 'regular':
            # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
            created_count = 0
            weekday = data.get('weekday')
            time_str = data.get('time')
            
            for i in range(4):  # –ù–∞ 4 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                target_date = datetime.now() + timedelta(weeks=i)
                days_to_add = (weekday - target_date.weekday()) % 7
                lesson_date = target_date + timedelta(days=days_to_add)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                full_datetime = f"{lesson_date.strftime('%Y-%m-%d')} {time_str}:00"
                
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω—è—Ç–∏–µ –≤ –ë–î
                lesson_id = db.add_lesson(
                    tutor_id=tutor_id,
                    student_id=data.get('student_id'),
                    lesson_date=full_datetime,
                    duration=60,  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 60 –º–∏–Ω—É—Ç
                    price=1000    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000 —Ä—É–±
                )
                
                if lesson_id:
                    created_count += 1
            
            await callback_query.message.edit_text(
                f"‚úÖ <b>–°–æ–∑–¥–∞–Ω–æ {created_count} —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π!</b>\n\n"
                "–ó–∞–Ω—è—Ç–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥.",
                parse_mode="HTML"
            )
            
        else:
            # –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
            full_datetime = f"{data.get('date')} {data.get('time')}:00"
            
            lesson_id = db.add_lesson(
                tutor_id=tutor_id,
                student_id=data.get('student_id'),
                lesson_date=full_datetime,
                duration=60,
                price=1000
            )
            
            if lesson_id:
                await callback_query.message.edit_text(
                    "‚úÖ <b>–ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                    "–ó–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ –≤–∞—à–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ.",
                    parse_mode="HTML"
                )
            else:
                await callback_query.message.edit_text(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è!</b>\n\n"
                    "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                    parse_mode="HTML"
                )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è: {e}")
        await callback_query.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è!</b>\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            parse_mode="HTML"
        )

@router.message(AddLessonStates.confirming_lesson)
async def confirm_lesson_data(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è"""
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirm_text = f"""
‚úÖ <b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è:</b>

üìÖ –î–∞—Ç–∞: {data.get('date')}
‚è∞ –í—Ä–µ–º—è: {data.get('time')}
üë• –¢–∏–ø: {'–ì—Ä—É–ø–ø–æ–≤–æ–µ' if data.get('lesson_type') == 'group' else '–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ'}
"""

    if data.get('lesson_type') == 'individual':
        confirm_text += f"üë§ –£—á–µ–Ω–∏–∫: {data.get('student_name')}"
    else:
        confirm_text += f"üë• –ì—Ä—É–ø–ø–∞: {data.get('group_name')}"

    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_lesson")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_lesson")]
    ])
    
    await message.answer(confirm_text, reply_markup=keyboard, parse_mode="HTML")

@router.callback_query(F.data == "confirm_lesson", AddLessonStates.confirming_lesson)
async def process_lesson_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è"""
    data = await state.get_data()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–Ω—è—Ç–∏–µ –≤ –ë–î
    # db.add_lesson(...)
    
    await callback_query.message.edit_text(
        "‚úÖ <b>–ó–∞–Ω—è—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ!</b>",
        parse_mode="HTML"
    )
    await state.clear()

@router.callback_query(F.data == "cancel_lesson", AddLessonStates.confirming_lesson)
async def process_lesson_cancellation(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–º–µ–Ω—ã –∑–∞–Ω—è—Ç–∏—è"""
    await callback_query.message.edit_text(
        "‚ùå <b>–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ</b>",
        parse_mode="HTML"
    )
    await state.clear()