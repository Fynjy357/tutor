from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from datetime import datetime, timedelta
from database import db

from handlers.schedule.states import AddLessonStates
import logging

router = Router()
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è
@router.callback_query(AddLessonStates.confirmation, F.data == "confirm_lesson")
async def process_confirmation(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è —Å –ø–µ—Ä–µ—Ö–æ–¥–æ–º –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é"""
    await callback_query.answer()
    
    data = await state.get_data()
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    lesson_type = data.get('lesson_type')
    frequency = data.get('frequency')
    
    logger.info(f"Confirming lesson. Type: {lesson_type}, Frequency: {frequency}")
    
    # –î–ï–ë–ê–ì: –≤—ã–≤–æ–¥–∏–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    logger.info(f"State data: {data}")
    
    created_lesson_ids = []  # –•—Ä–∞–Ω–∏–º ID —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
    group_id = None
    
    try:
        if frequency == 'regular':
            # –†–µ–≥—É–ª—è—Ä–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è (–∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∏ –≥—Ä—É–ø–ø–æ–≤—ã–µ)
            created_count = 0
            weekday = data.get('weekday')
            time_str = data.get('time')
            
            for i in range(4):  # –ù–∞ 4 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥
                # –í—ã—á–∏—Å–ª—è–µ–º –¥–∞—Ç—É –¥–ª—è —ç—Ç–æ–≥–æ –¥–Ω—è –Ω–µ–¥–µ–ª–∏
                target_date = datetime.now() + timedelta(weeks=i)
                days_to_add = (weekday - target_date.weekday()) % 7
                lesson_date = target_date + timedelta(days=days_to_add)
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
                full_datetime = f"{lesson_date.strftime('%Y-%m-%d')} {time_str}:00"
                if lesson_type == 'individual':
                    # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –∑–∞–Ω—è—Ç–∏–µ
                    logger.info(f"üî• BEFORE ADD LESSON: tutor={tutor_id}, student={data.get('student_id')}, "
                            f"date={full_datetime}, duration=60, price=1000, group=None")
                    lesson_id = db.add_lesson(
                        tutor_id=tutor_id,
                        student_id=data.get('student_id'),
                        lesson_date=full_datetime,
                        duration=60,
                        price=1000
                    )
                    if lesson_id:
                        created_count += 1
                        created_lesson_ids.append(lesson_id)
                        
                else:
                    # –ì—Ä—É–ø–ø–æ–≤–æ–µ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
                    group_id = data.get('group_id')
                    
                    # –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –ü–†–û–í–ï–†–ö–£ –ü–ï–†–ï–î –¶–ò–ö–õ–û–ú!
                    logger.info(f"üî• Getting students for group {group_id}")
                    group_students = db.get_students_by_group(group_id)
                    logger.info(f"üî• Group students result: {group_students}")
                    
                    if not group_students:
                        await callback_query.message.edit_text(
                            "‚ùå <b>–í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –∏–ª–∏ –æ—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è!</b>\n\n"
                            "–î–æ–±–∞–≤—å—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ –≥—Ä—É–ø–ø—É –ø–µ—Ä–µ–¥ —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–Ω—è—Ç–∏—è.",
                            parse_mode="HTML"
                        )
                        await state.clear()
                        return
                    
                    success_count = 0
                    for student in group_students:
                        # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –õ–û–ì - –∏—Å–ø–æ–ª—å–∑—É–µ–º student –∏–∑ —Ü–∏–∫–ª–∞
                        logger.info(f"üî• BEFORE ADD LESSON: tutor={tutor_id}, student={student['id']}, "
                                f"date={full_datetime}, duration=60, price=500.0, group={group_id}")
                        
                        lesson_id = db.add_lesson(
                            tutor_id=tutor_id,
                            student_id=student['id'],
                            lesson_date=full_datetime,
                            duration=60,
                            price=500.0,
                            group_id=group_id
                        )
                        
                        logger.info(f"üî• AFTER ADD LESSON: result={lesson_id}")
                        
                        if lesson_id:
                            success_count += 1
                            created_lesson_ids.append(lesson_id)
            
        else:
            # –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã–µ –∑–∞–Ω—è—Ç–∏—è
            full_datetime = f"{data.get('date')} {data.get('time')}:00"
            
            if lesson_type == 'individual':
                # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
                student_id = data.get('student_id')  # –î–û–ë–ê–í–¨–¢–ï –≠–¢–£ –°–¢–†–û–ö–£
                
                # –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –õ–û–ì
                logger.info(f"üî• BEFORE ADD LESSON: tutor={tutor_id}, student={student_id}, "
                        f"date={full_datetime}, duration=60, price=1000, group=None")
                
                lesson_id = db.add_lesson(
                    tutor_id=tutor_id,
                    student_id=student_id,  # –ò–°–ü–†–ê–í–õ–ï–ù–û
                    lesson_date=full_datetime,
                    duration=60,
                    price=1000
                )
                
                logger.info(f"üî• AFTER ADD LESSON: result={lesson_id}")
                
                if lesson_id:
                    created_lesson_ids.append(lesson_id)
                else:
                    await callback_query.message.edit_text(
                        "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è!</b>\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        parse_mode="HTML"
                    )
                    return
                    
            else:
                # –ì—Ä—É–ø–ø–æ–≤–æ–µ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ
                group_id = data.get('group_id')
                group_students = db.get_students_by_group(group_id)
                success_count = 0
                
                for student in group_students:
                    logger.info(f"üî• BEFORE ADD LESSON: tutor={tutor_id}, student={data.get('student_id')}, "
                            f"date={full_datetime}, duration=60, price=1000, group=None")
                    lesson_id = db.add_lesson(
                        tutor_id=tutor_id,
                        student_id=student['id'],
                        lesson_date=full_datetime,
                        duration=60,
                        price=500.0,
                        group_id=group_id
                    )
                    if lesson_id:
                        success_count += 1
                        created_lesson_ids.append(lesson_id)
                
                if success_count == 0:
                    await callback_query.message.edit_text(
                        "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è!</b>\n\n"
                        "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
                        parse_mode="HTML"
                    )
                    return
        
        # –ù–ï–ú–ï–î–õ–ï–ù–ù–´–ô –ü–ï–†–ï–•–û–î –ö –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Æ
        if created_lesson_ids:
            first_lesson_id = created_lesson_ids[0]
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ
            selected_date = data.get('date') if frequency == 'single' else datetime.now().strftime('%Y-%m-%d')
            selected_time = data.get('time')
            
            # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø–µ—Ä–µ—Ö–æ–¥–æ–º
            await state.clear()
            
            if lesson_type == 'individual':
                # –ü–†–Ø–ú–û–ô –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ì–û –ó–ê–ù–Ø–¢–ò–Ø
                await show_individual_edit_options_directly(
                    callback_query.message, 
                    first_lesson_id, 
                    state
                )
                
            else:
                # –ü–†–Ø–ú–û–ô –í–´–ó–û–í –§–£–ù–ö–¶–ò–ò –†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–Ø –î–õ–Ø –ì–†–£–ü–ü–û–í–û–ì–û –ó–ê–ù–Ø–¢–ò–Ø
                await show_group_edit_options_directly(
                    callback_query.message, 
                    group_id, 
                    selected_date, 
                    selected_time, 
                    state
                )
            
            return
        
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è
        await callback_query.message.edit_text(
            "‚ùå <b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–Ω—è—Ç–∏—è!</b>\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.",
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è: {e}", exc_info=True)
        await callback_query.message.edit_text(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–Ω—è—Ç–∏—è!</b>\n\n"
            f"–û—à–∏–±–∫–∞: {str(e)}",
            parse_mode="HTML"
        )

async def show_individual_edit_options_directly(message: types.Message, lesson_id: int, state: FSMContext):
    """–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
    from handlers.schedule.edit_lesson.individual_handlers import show_edit_options
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π callback-like –æ–±—ä–µ–∫—Ç
    class SimpleCallback:
        def __init__(self, message, lesson_id):
            self.message = message
            self.data = f"edit_lesson_{lesson_id}"
            self.from_user = message.from_user
            
        async def answer(self):
            pass
    
    callback = SimpleCallback(message, lesson_id)
    await show_edit_options(callback, state)

async def show_group_edit_options_directly(message: types.Message, group_id: int, date: str, time: str, state: FSMContext):
    """–ü—Ä—è–º–æ–π –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
    from handlers.schedule.edit_lesson.group_handlers import show_group_edit_options
    
    # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π callback-like –æ–±—ä–µ–∫—Ç
    class SimpleCallback:
        def __init__(self, message, group_id, date, time):
            self.message = message
            self.data = f"edit_group_{group_id}_{date}_{time}"
            self.from_user = message.from_user
            
        async def answer(self):
            pass
    
    callback = SimpleCallback(message, group_id, date, time)
    await show_group_edit_options(callback, state)