from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from database import db
from handlers.schedule.states import AddLessonStates
import logging


router = Router()
logger = logging.getLogger(__name__)

# –≠–∫—Ä–∞–Ω 2: –í—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –∑–∞–Ω—è—Ç–∏—è

@router.callback_query(AddLessonStates.choosing_frequency, F.data.startswith("frequency_"))
async def process_frequency(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–Ω—è—Ç–∏—è"""
    await callback_query.answer()
    
    frequency = callback_query.data.split("_")[1]  # single –∏–ª–∏ regular
    await state.update_data(frequency=frequency)
    
    if frequency == "regular":
        # –≠–∫—Ä–∞–Ω –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π - –≤—ã–±–æ—Ä –¥–Ω—è –Ω–µ–¥–µ–ª–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="weekday_0")],
            [InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="weekday_1")],
            [InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="weekday_2")],
            [InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="weekday_3")],
            [InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="weekday_4")],
            [InlineKeyboardButton(text="–°—É–±–±–æ—Ç–∞", callback_data="weekday_5")],
            [InlineKeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="weekday_6")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_frequency")]
        ])
        
        await callback_query.message.edit_text(
            "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(AddLessonStates.choosing_weekday)
    else:
        # –≠–∫—Ä–∞–Ω –¥–ª—è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π - –≤–≤–æ–¥ –¥–∞—Ç—ã
        await callback_query.message.edit_text(
            "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_frequency")]
            ]),
            parse_mode="HTML"
        )
        await state.set_state(AddLessonStates.entering_date)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
@router.callback_query(AddLessonStates.choosing_weekday, F.data.startswith("weekday_"))
async def process_weekday(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    await callback_query.answer()
    
    weekday = int(callback_query.data.split("_")[1])
    await state.update_data(weekday=weekday)
    
    await callback_query.message.edit_text(
        "‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_weekday")]
        ]),
        parse_mode="HTML"
    )
    await state.set_state(AddLessonStates.entering_time)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π
@router.message(AddLessonStates.entering_date)
async def process_date_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã"""
    try:
        date_obj = datetime.strptime(message.text, '%d.%m.%Y')
        await state.update_data(date=date_obj.strftime('%Y-%m-%d'))
        
        await message.answer(
            "‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_date_input")]
            ]),
            parse_mode="HTML"
        )
        await state.set_state(AddLessonStates.entering_time)
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024",
            parse_mode="HTML"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏
@router.message(AddLessonStates.entering_time)
async def process_time_input(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(message.text, '%H:%M')
        await state.update_data(time=message.text)
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        lesson_type = data.get('lesson_type')
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        tutor_id = db.get_tutor_id_by_telegram_id(message.from_user.id)
        if not tutor_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.")
            await state.clear()
            return
        
        # –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–æ–≤
        if lesson_type == 'individual':
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –¥–ª—è –≤—ã–±–æ—Ä–∞
            students = db.get_students_by_tutor(tutor_id)
            
            if not students:
                await message.answer(
                    "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!</b>\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É.",
                    parse_mode="HTML"
                )
                await state.clear()
                return
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            for student in students:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text=f"üë§ {student['full_name']}", callback_data=f"add_lesson_student_{student['id']}")
                ])
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_time_input")])
            
            await message.answer(
                "üë§ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:</b>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await state.set_state(AddLessonStates.choosing_students)
            
        else:
            # –î–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π - –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–π –≤—ã–±–æ—Ä
            await message.answer(
                "üë• <b>–ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ - —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ</b>\n"
                "–ü–æ–∫–∞ —á—Ç–æ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è.",
                parse_mode="HTML"
            )
            await state.clear()
            
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30",
            parse_mode="HTML"
        )