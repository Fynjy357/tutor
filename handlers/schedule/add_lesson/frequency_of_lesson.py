from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from database import db
from handlers.schedule.schedule_utils import get_today_schedule_text
from handlers.schedule.states import AddLessonStates
import logging

from handlers.start.config import WELCOME_BACK_TEXT
from keyboards.main_menu import get_main_menu_keyboard

router = Router()
logger = logging.getLogger(__name__)

# –≠–∫—Ä–∞–Ω 2: –í—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –∑–∞–Ω—è—Ç–∏—è
@router.callback_query(AddLessonStates.choosing_frequency, F.data.startswith("frequency_"))
async def process_frequency(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–Ω—è—Ç–∏—è"""
    logger.info(f"üî• FREQUENCY SELECTED: User {callback_query.from_user.id}, data: {callback_query.data}")
    logger.info(f"üî• Current state: {await state.get_state()}")
    await callback_query.answer()
    
    frequency = callback_query.data.split("_")[1]
    await state.update_data(frequency=frequency)
    logger.info(f"üî• Frequency set to: {frequency}")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Ç–∏–ø –∑–∞–Ω—è—Ç–∏—è
    data = await state.get_data()
    lesson_type = data.get('lesson_type')
    
    if lesson_type == 'group':
        # –î–õ–Ø –ì–†–£–ü–ü–û–í–´–• –ó–ê–ù–Ø–¢–ò–ô - –ü–ï–†–ï–•–û–î–ò–ú –ö –í–´–ë–û–†–£ –î–ê–¢–´/–í–†–ï–ú–ï–ù–ò!
        
        if frequency == "regular":
            # –î–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π - –≤—ã–±–∏—Ä–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="weekday_0")],
                [InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="weekday_1")],
                [InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="weekday_2")],
                [InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="weekday_3")],
                [InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="weekday_4")],
                [InlineKeyboardButton(text="–°—É–±–±–æ—Ç–∞", callback_data="weekday_5")],
                [InlineKeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="weekday_6")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_frequency")]
            ])
            
            await callback_query.message.edit_text(
                "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:</b>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await state.set_state(AddLessonStates.choosing_weekday)
            
        else:
            # –î–ª—è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
            await callback_query.message.edit_text(
                "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:</b>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_frequency")]
                ]),
                parse_mode="HTML"
            )
            await state.set_state(AddLessonStates.entering_date)
        
    else:
        # –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
        if frequency == "regular":
            # –î–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π - –≤—ã–±–∏—Ä–∞–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="weekday_0")],
                [InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="weekday_1")],
                [InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="weekday_2")],
                [InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="weekday_3")],
                [InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="weekday_4")],
                [InlineKeyboardButton(text="–°—É–±–±–æ—Ç–∞", callback_data="weekday_5")],
                [InlineKeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="weekday_6")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_frequency")]
            ])
            
            await callback_query.message.edit_text(
                "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:</b>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await state.set_state(AddLessonStates.choosing_weekday)
            
        else:
            # –î–ª—è –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π - –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞—Ç—É
            await callback_query.message.edit_text(
                "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:</b>\n\n"
                "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_frequency")]
                ]),
                parse_mode="HTML"
            )
            await state.set_state(AddLessonStates.entering_date)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
@router.callback_query(AddLessonStates.choosing_weekday, F.data.startswith("weekday_"))
async def process_weekday(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    await callback_query.answer()
    
    weekday = int(callback_query.data.split("_")[1])
    await state.update_data(weekday=weekday)
    
    await callback_query.message.edit_text(
        "‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_weekday")]
        ]),
        parse_mode="HTML"
    )
    await state.set_state(AddLessonStates.entering_time)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–∏–π)
@router.message(AddLessonStates.entering_date, F.text.regexp(r'^\d{2}\.\d{2}\.\d{4}$'))
async def process_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏—è"""
    try:
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –∏–∑ —Ñ–æ—Ä–º–∞—Ç–∞ –î–î.–ú–ú.–ì–ì–ì–ì –≤ YYYY-MM-DD
        date_obj = datetime.strptime(message.text, '%d.%m.%Y')
        iso_date = date_obj.strftime('%Y-%m-%d')
        
        await state.update_data(date=iso_date)
        logger.info(f"Date processed: {iso_date}")
        
        await message.answer(
            "‚è∞ <b>–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30",
            parse_mode="HTML"
        )
        await state.set_state(AddLessonStates.entering_time)
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 21.12.1994",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error processing date: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞—Ç—ã")
        await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–∏–π)
@router.message(AddLessonStates.entering_time, F.text.regexp(r'^\d{2}:\d{2}$'))
async def process_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è"""
    try:
        data = await state.get_data()
        lesson_type = data.get('lesson_type')
        frequency = data.get('frequency')
        logger.info(f"Processing time. Lesson type: {lesson_type}, Frequency: {frequency}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(message.text, '%H:%M')
        await state.update_data(time=message.text)
        
        logger.info(f"Time processed: {message.text}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        tutor_id = db.get_tutor_id_by_telegram_id(message.from_user.id)
        if not tutor_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.")
            await state.clear()
            return
        
        if lesson_type == 'individual':
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
            students = db.get_students_by_tutor(tutor_id)
            
            if not students:
                await message.answer(
                    "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!</b>\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É.",
                    parse_mode="HTML"
                )
                await state.clear()
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
                tutor = db.get_tutor_by_telegram_id(message.from_user.id)
                tutor_name = tutor[2] if tutor else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
                tutor_id = tutor[0] if tutor else None
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
                schedule_text = await get_today_schedule_text(tutor_id) if tutor_id else "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—É—é –ø–æ–¥–ø–∏—Å–∫—É
                has_active_subscription = db.check_tutor_subscription(tutor_id)
                subscription_icon = "üíé " if has_active_subscription else ""
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
                formatted_text = WELCOME_BACK_TEXT.format(
                    tutor_name=tutor_name,
                    schedule_text=schedule_text
                )
                welcome_text = f"{subscription_icon}{formatted_text}"
                
                await message.answer(
                    welcome_text,
                    reply_markup=get_main_menu_keyboard(),
                    parse_mode="HTML"
                )
                return
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            active_students_count = 0

            for student in students:
                # –ë–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
                status = student.get('status', '').lower()  # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
                if status != 'inactive':
                    keyboard.inline_keyboard.append([
                        InlineKeyboardButton(text=f"üë§ {student['full_name']}", callback_data=f"add_lesson_student_{student['id']}")
                    ])
                    active_students_count += 1

            if active_students_count > 0:
                keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_time_input")])
            
            await message.answer(
                "üë§ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:</b>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await state.set_state(AddLessonStates.choosing_students)
            
        else:
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π
            group_id = data.get('group_id')
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            if frequency == 'regular':
                weekdays = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
                weekday = data.get('weekday')
                
                confirmation_text = "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
                confirmation_text += f"üë• –ì—Ä—É–ø–ø–∞: {data.get('group_name')}\n"
                confirmation_text += f"üìÖ –î–µ–Ω—å: {weekdays[weekday]}\n"
                confirmation_text += f"‚è∞ –í—Ä–µ–º—è: {message.text}\n"
                confirmation_text += "üîÑ –¢–∏–ø: –†–µ–≥—É–ª—è—Ä–Ω–æ–µ\n"
                
            else:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞—Ç—É –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç
                date_obj = datetime.strptime(data.get('date'), '%Y-%m-%d')
                readable_date = date_obj.strftime('%d.%m.%Y')
                
                confirmation_text = "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–≥–æ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
                confirmation_text += f"üë• –ì—Ä—É–ø–ø–∞: {data.get('group_name')}\n"
                confirmation_text += f"üìÖ –î–∞—Ç–∞: {readable_date}\n"
                confirmation_text += f"‚è∞ –í—Ä–µ–º—è: {message.text}\n"
                confirmation_text += "üìã –¢–∏–ø: –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ\n"
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_lesson")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_time_input")]
            ])
            
            await message.answer(
                confirmation_text,
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await state.set_state(AddLessonStates.confirmation)
            
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error processing time: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏")
        await state.clear()