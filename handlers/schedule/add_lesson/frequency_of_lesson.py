from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from database import db
from handlers.schedule.states import AddLessonStates
import logging

router = Router()
logger = logging.getLogger(__name__)

# –≠–∫—Ä–∞–Ω 2: –í—ã–±–æ—Ä —á–∞—Å—Ç–æ—Ç—ã –∑–∞–Ω—è—Ç–∏—è
@router.callback_query(AddLessonStates.choosing_frequency, F.data.startswith("frequency_"))
async def process_frequency(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Å—Ç–æ—Ç—ã –∑–∞–Ω—è—Ç–∏—è"""
    await callback_query.answer()
    
    frequency = callback_query.data.split("_")[1]
    await state.update_data(frequency=frequency)
    
    if frequency == "regular":
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="weekday_0")],
            [InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="weekday_1")],
            [InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="weekday_2")],
            [InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="weekday_3")],
            [InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="weekday_4")],
            [InlineKeyboardButton(text="–°—É–±–±–æ—Ç–∞", callback_data="weekday_5")],
            [InlineKeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="weekday_6")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_frequency")]
        ])
        
        await callback_query.message.edit_text(
            "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(AddLessonStates.choosing_weekday)
    else:
        await callback_query.message.edit_text(
            "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_frequency")]
            ]),
            parse_mode="HTML"
        )
        await state.set_state(AddLessonStates.entering_date)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
@router.callback_query(AddLessonStates.choosing_weekday, F.data.startswith("weekday_"))
async def process_weekday(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    await callback_query.answer()
    
    weekday = int(callback_query.data.split("_")[1])
    await state.update_data(weekday=weekday)
    
    await callback_query.message.edit_text(
        "‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_weekday")]
        ]),
        parse_mode="HTML"
    )
    await state.set_state(AddLessonStates.entering_time)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–∏–π)
@router.message(AddLessonStates.entering_date, F.text.regexp(r'^\d{2}\.\d{2}\.\d{4}$'))
async def process_date(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –¥–∞—Ç—ã –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è"""
    try:
        data = await state.get_data()
        lesson_type = data.get('lesson_type')
        logger.info(f"Processing date. Lesson type: {lesson_type}")
        
        date_obj = datetime.strptime(message.text, '%d.%m.%Y')
        await state.update_data(date=date_obj.strftime('%Y-%m-%d'))
        
        logger.info(f"Date processed: {date_obj.strftime('%Y-%m-%d')}")
        
        await message.answer(
            "‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_date_input")]
            ]),
            parse_mode="HTML"
        )
        await state.set_state(AddLessonStates.entering_time)
        
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024",
            parse_mode="HTML"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ (—É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ –∑–∞–Ω—è—Ç–∏–π)
@router.message(AddLessonStates.entering_time, F.text.regexp(r'^\d{2}:\d{2}$'))
async def process_time(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ª—é–±–æ–≥–æ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è"""
    try:
        data = await state.get_data()
        lesson_type = data.get('lesson_type')
        logger.info(f"Processing time. Lesson type: {lesson_type}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        datetime.strptime(message.text, '%H:%M')
        await state.update_data(time=message.text)
        
        logger.info(f"Time processed: {message.text}")
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
        data = await state.get_data()
        
        # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
        tutor_id = db.get_tutor_id_by_telegram_id(message.from_user.id)
        if not tutor_id:
            await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.")
            await state.clear()
            return
        
        if lesson_type == 'individual':
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π
            students = db.get_students_by_tutor(tutor_id)
            
            if not students:
                await message.answer(
                    "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç —Å—Ç—É–¥–µ–Ω—Ç–æ–≤!</b>\n\n"
                    "–°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ –≤ —Å–∏—Å—Ç–µ–º—É.",
                    parse_mode="HTML"
                )
                await state.clear()
                return
            
            keyboard = InlineKeyboardMarkup(inline_keyboard=[])
            for student in students:
                keyboard.inline_keyboard.append([
                    InlineKeyboardButton(text=f"üë§ {student['full_name']}", callback_data=f"add_lesson_student_{student['id']}")
                ])
            keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_time_input")])
            
            await message.answer(
                "üë§ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:</b>",
                reply_markup=keyboard,
                parse_mode="HTML"
            )
            await state.set_state(AddLessonStates.choosing_students)
            
        elif lesson_type == 'group':
            # –õ–æ–≥–∏–∫–∞ –¥–ª—è –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π
            group_id = data.get('group_id')
            date_str = data.get('date')
            time_str = data.get('time')
            
            # –°–æ–∑–¥–∞–µ–º datetime –æ–±—ä–µ–∫—Ç –∏–∑ ISO —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã
            lesson_datetime = datetime.strptime(f"{date_str} {time_str}", "%Y-%m-%d %H:%M")
            
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —É—á–µ–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã
            group_students = db.get_students_by_group(group_id)
            student_ids = [student['id'] for student in group_students]
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–Ω—è—Ç–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
            success_count = 0
            for student_id in student_ids:
                lesson_id = db.add_lesson(
                    tutor_id=tutor_id,
                    student_id=student_id,
                    lesson_date=lesson_datetime,
                    duration=60,
                    price=500.0,
                    group_id=group_id
                )
                if lesson_id:
                    success_count += 1
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
            group = db.get_group_by_id(group_id)
            
            if success_count > 0:
                display_date = lesson_datetime.strftime("%d.%m.%Y")
                
                await message.answer(
                    f"‚úÖ <b>–ì—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ!</b>\n\n"
                    f"üë• –ì—Ä—É–ø–ø–∞: {group['name']}\n"
                    f"üìÖ –î–∞—Ç–∞: {display_date}\n"
                    f"‚è∞ –í—Ä–µ–º—è: {time_str}\n"
                    f"üë®‚Äçüéì –£—á–µ–Ω–∏–∫–æ–≤: {success_count}/{len(student_ids)}",
                    parse_mode="HTML"
                )
            else:
                await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –≥—Ä—É–ø–ø–æ–≤—ã—Ö –∑–∞–Ω—è—Ç–∏–π")
            
            await state.clear()
            
    except ValueError:
        await message.answer(
            "‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30",
            parse_mode="HTML"
        )
    except Exception as e:
        logger.error(f"Error processing time: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—Ä–µ–º–µ–Ω–∏")
        await state.clear()