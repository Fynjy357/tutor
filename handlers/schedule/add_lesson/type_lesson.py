# type_lesson.py - –¥–æ–±–∞–≤—å—Ç–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import db

from handlers.schedule.states import AddLessonStates
import logging

router = Router()
logger = logging.getLogger(__name__)

# –≠–∫—Ä–∞–Ω 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
@router.callback_query(F.data == "add_lesson")
async def add_lesson_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è - –≤—ã–±–æ—Ä —Ç–∏–ø–∞"""
    logger.info(f"üî• ADD_LESSON START: User {callback_query.from_user.id}, data: {callback_query.data}")
    logger.info(f"üî• Current state before: {await state.get_state()}")
    
    await callback_query.answer()
    
    # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.set_state(AddLessonStates.choosing_lesson_type)
    logger.info(f"üî• State set to: {await state.get_state()}")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ", callback_data="lesson_type_individual")],
        [InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø–æ–≤–æ–µ", callback_data="lesson_type_group")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_schedule")]
    ])
    
    await callback_query.message.edit_text(
        "üìù <b>–ö–∞–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–∏—Ç—å?</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    logger.info("üî• ADD_LESSON screen shown successfully")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è - –ò–ù–î–ò–í–ò–î–£–ê–õ–¨–ù–û–ï
@router.callback_query(F.data == "lesson_type_individual", AddLessonStates.choosing_lesson_type)
async def process_individual_lesson_type(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
    logger.info(f"üî• INDIVIDUAL LESSON TYPE: User {callback_query.from_user.id}, data: {callback_query.data}")
    logger.info(f"üî• Current state: {await state.get_state()}")
    
    await callback_query.answer()
    
    await state.update_data(lesson_type="individual")
    logger.info("üî• Lesson type set to: individual")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ", callback_data="frequency_single")],
        # [InlineKeyboardButton(text="üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ", callback_data="frequency_regular")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_lesson_type")]
    ])
    
    await callback_query.message.edit_text(
        "üìÖ <b>–ö–∞–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–∏—Ç—å?</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AddLessonStates.choosing_frequency)
    logger.info(f"üî• State changed to: {await state.get_state()}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è - –ì–†–£–ü–ü–û–í–û–ï
@router.callback_query(F.data == "lesson_type_group", AddLessonStates.choosing_lesson_type)
async def process_group_lesson_type(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
    logger.info(f"üî• GROUP LESSON TYPE: User {callback_query.from_user.id}, data: {callback_query.data}")
    logger.info(f"üî• Current state: {await state.get_state()}")
    
    await callback_query.answer()
    
    await state.update_data(lesson_type="group")
    logger.info("üî• Lesson type set to: group")
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    groups = db.get_groups_by_tutor(tutor_id)
    logger.info(f"üî• Found {len(groups)} groups for tutor {tutor_id}")
    
    if not groups:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≥—Ä—É–ø–ø, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É", callback_data="create_group_for_lesson")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_lesson_type")]
        ])
        
        await callback_query.message.edit_text(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø</b>\n\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        logger.info("üî• No groups found, showing create group option")
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
    buttons = []
    for group in groups:
        buttons.append([InlineKeyboardButton(
            text=f"üë• {group['name']}",
            callback_data=f"select_group_{group['id']}"
        )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_lesson_type")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback_query.message.edit_text(
        "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AddLessonStates.choosing_group)
    logger.info(f"üî• State changed to: {await state.get_state()}")
@router.callback_query(F.data.startswith("select_group_"), AddLessonStates.choosing_group)
async def group_selected_for_lesson(callback_query: types.CallbackQuery, state: FSMContext):
    """–ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è"""
    logger.info(f"üî• GROUP SELECTED: User {callback_query.from_user.id}, data: {callback_query.data}")
    logger.info(f"üî• Current state: {await state.get_state()}")
    
    await callback_query.answer()
    
    group_id = int(callback_query.data.split("_")[2])
    logger.info(f"üî• Selected group ID: {group_id}")
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    group = db.get_group_by_id(group_id)
    
    if not group:
        await callback_query.message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        group_id=group_id,
        group_name=group['name'],
        lesson_type='group'
    )
    logger.info(f"üî• Group data saved: {group['name']}")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É —á–∞—Å—Ç–æ—Ç—ã –∑–∞–Ω—è—Ç–∏—è
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ", callback_data="frequency_single")],
        # [InlineKeyboardButton(text="üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ", callback_data="frequency_regular")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_group_selection")]
    ])
    
    await callback_query.message.edit_text(
        f"‚úÖ <b>–ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞:</b> {group['name']}\n\n",
        # "üìÖ <b>–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –∏–ª–∏ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–∏—Ç—å?</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AddLessonStates.choosing_frequency)
    logger.info(f"üî• State changed to: {await state.get_state()}")
@router.callback_query(F.data == "create_group_for_lesson")
async def create_group_from_lesson(callback_query: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è"""
    logger.info(f"üî• CREATE GROUP FROM LESSON: User {callback_query.from_user.id}, data: {callback_query.data}")
    
    await callback_query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è
    await state.update_data(creating_group_for_lesson=True)
    logger.info("üî• Flag set: creating_group_for_lesson = True")
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –≥—Ä—É–ø–ø—ã
    from handlers.groups.handlers import add_group_start
    await add_group_start(callback_query.message, state)