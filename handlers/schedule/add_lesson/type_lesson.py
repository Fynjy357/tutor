from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from handlers.schedule.states import AddLessonStates
import logging
from database import db



router = Router()
logger = logging.getLogger(__name__)

# –≠–∫—Ä–∞–Ω 1: –í—ã–±–æ—Ä —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
@router.callback_query(F.data == "add_lesson")
async def add_lesson_start(callback_query: types.CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è - –≤—ã–±–æ—Ä —Ç–∏–ø–∞"""
    await callback_query.answer()
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üë§ –ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ", callback_data="lesson_type_individual")],
        [InlineKeyboardButton(text="üë• –ì—Ä—É–ø–ø–æ–≤–æ–µ", callback_data="lesson_type_group")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_schedule")]
    ])
    
    await callback_query.message.edit_text(
        "üìù <b>–ö–∞–∫–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–∏—Ç—å?</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AddLessonStates.choosing_lesson_type)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è
@router.callback_query(AddLessonStates.choosing_lesson_type, F.data.startswith("lesson_type_"))
async def process_lesson_type(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è"""
    await callback_query.answer()

    await state.update_data(lesson_type="individual")
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ", callback_data="frequency_single")],
        [InlineKeyboardButton(text="üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ", callback_data="frequency_regular")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_lesson_type")]
    ])
    
    await callback_query.message.edit_text(
        "üìÖ <b>–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –∏–ª–∏ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–∏—Ç—å?</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AddLessonStates.choosing_frequency)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è - –ì–†–£–ü–ü–û–í–û–ï
@router.callback_query(F.data == "lesson_type_group", AddLessonStates.choosing_lesson_type)
async def process_group_lesson_type(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
    await callback_query.answer()
    
    await state.update_data(lesson_type="group")
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    groups = db.get_groups_by_tutor(tutor_id)  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ —ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –µ—Å—Ç—å –≤ database.py
    
    if not groups:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≥—Ä—É–ø–ø, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É", callback_data="create_group_for_lesson")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_lesson_type")]
        ])
        
        await callback_query.message.edit_text(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø</b>\n\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
    buttons = []
    for group in groups:
        buttons.append([InlineKeyboardButton(
            text=f"üë• {group['name']}",  # –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã
            callback_data=f"select_group_{group['id']}"  # ID –≥—Ä—É–ø–ø—ã
        )])
    
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_lesson_type")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback_query.message.edit_text(
        "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AddLessonStates.choosing_group)