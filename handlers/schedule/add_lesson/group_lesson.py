from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import db
from handlers.schedule.states import AddLessonStates
from datetime import datetime
import logging

router = Router()
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è
@router.callback_query(F.data == "lesson_type_group", AddLessonStates.choosing_lesson_type)
async def choose_group_for_lesson(callback_query: types.CallbackQuery, state: FSMContext):
    """–í—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –¥–ª—è –≥—Ä—É–ø–ø–æ–≤–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è"""
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –ø—Ä–∞–≤–∏–ª—å–Ω–æ
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    
    if not tutor_id:
        await callback_query.message.answer("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è
    groups = db.get_tutor_groups(tutor_id)
    
    # –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logger.info(f"Tutor ID: {tutor_id}, Found groups: {groups}")
    
    if not groups:
        # –ï—Å–ª–∏ –Ω–µ—Ç –≥—Ä—É–ø–ø, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É", callback_data="create_group_for_lesson")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="add_lesson")]
        ])
        
        await callback_query.message.edit_text(
            "‚ùå <b>–£ –≤–∞—Å –Ω–µ—Ç –≥—Ä—É–ø–ø</b>\n\n–°–Ω–∞—á–∞–ª–∞ —Å–æ–∑–¥–∞–π—Ç–µ –≥—Ä—É–ø–ø—É, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        return
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –≥—Ä—É–ø–ø–∞–º–∏
    buttons = []
    for group in groups:
        buttons.append([InlineKeyboardButton(
            text=f"üë• {group[1]}",  # –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã (–≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç –∫–æ—Ä—Ç–µ–∂–∞)
            callback_data=f"select_group_{group[0]}"  # ID –≥—Ä—É–ø–ø—ã (–ø–µ—Ä–≤—ã–π —ç–ª–µ–º–µ–Ω—Ç)
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–∑–∞–¥
    buttons.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="add_lesson")])
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
    
    await callback_query.message.edit_text(
        "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –∑–∞–Ω—è—Ç–∏—è:</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AddLessonStates.choosing_group)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
@router.callback_query(F.data.startswith("select_group_"), AddLessonStates.choosing_group)
async def group_selected_for_lesson(callback_query: types.CallbackQuery, state: FSMContext):
    """–ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞ –¥–ª—è –∑–∞–Ω—è—Ç–∏—è"""
    await callback_query.answer()
    
    group_id = int(callback_query.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    group = db.get_group_by_id(group_id)
    
    if not group:
        await callback_query.message.answer("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –≥—Ä—É–ø–ø—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.update_data(
        lesson_type="group",
        group_id=group_id,
        group_name=group['name'],
        student_ids=[]
    )
    
    await callback_query.message.edit_text(
        f"‚úÖ <b>–ì—Ä—É–ø–ø–∞ –≤—ã–±—Ä–∞–Ω–∞:</b> {group['name']}\n\n"
        "üìÖ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:",
        parse_mode="HTML"
    )
    await state.set_state(AddLessonStates.entering_date)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–π –≥—Ä—É–ø–ø—ã
@router.callback_query(F.data == "create_group_for_lesson")
async def create_group_from_lesson(callback_query: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –∏–∑ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è"""
    await callback_query.answer()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç–∏—è
    await state.update_data(creating_group_for_lesson=True)
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–æ–∑–¥–∞–Ω–∏—é –≥—Ä—É–ø–ø—ã
    from handlers.groups.handlers import add_group_start
    await add_group_start(callback_query.message, state)