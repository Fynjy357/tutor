from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from datetime import datetime
from database import db
from handlers.schedule.add_lesson.type_lesson import add_lesson_start
from handlers.schedule.keyboards_schedule import get_schedule_keyboard
from handlers.schedule.states import AddLessonStates
from handlers.schedule.schedule_utils import get_upcoming_lessons_text
import logging


router = Router()
logger = logging.getLogger(__name__)

@router.callback_query(F.data == "back_to_lesson_type")
async def back_to_lesson_type(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –∑–∞–Ω—è—Ç–∏—è"""
    await add_lesson_start(callback_query, state)

@router.callback_query(F.data == "back_to_frequency")
async def back_to_frequency(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —á–∞—Å—Ç–æ—Ç—ã"""
    data = await state.get_data()
    lesson_type = data.get('lesson_type')
    await state.update_data(lesson_type=lesson_type)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÖ –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ", callback_data="frequency_single")],
        [InlineKeyboardButton(text="üîÑ –†–µ–≥—É–ª—è—Ä–Ω–æ–µ", callback_data="frequency_regular")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_lesson_type")]
    ])
    
    await callback_query.message.edit_text(
        "üìÖ <b>–†–µ–≥—É–ª—è—Ä–Ω–æ–µ –∏–ª–∏ –µ–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –∑–∞–Ω—è—Ç–∏–µ –¥–æ–±–∞–≤–∏—Ç—å?</b>",
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AddLessonStates.choosing_frequency)

@router.callback_query(F.data == "back_to_weekday")
async def back_to_weekday(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è –Ω–µ–¥–µ–ª–∏"""
    data = await state.get_data()
    if data.get('frequency') == 'regular':
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", callback_data="weekday_0")],
            [InlineKeyboardButton(text="–í—Ç–æ—Ä–Ω–∏–∫", callback_data="weekday_1")],
            [InlineKeyboardButton(text="–°—Ä–µ–¥–∞", callback_data="weekday_2")],
            [InlineKeyboardButton(text="–ß–µ—Ç–≤–µ—Ä–≥", callback_data="weekday_3")],
            [InlineKeyboardButton(text="–ü—è—Ç–Ω–∏—Ü–∞", callback_data="weekday_4")],
            [InlineKeyboardButton(text="–°—É–±–±–æ—Ç–∞", callback_data="weekday_5")],
            [InlineKeyboardButton(text="–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ", callback_data="weekday_6")],
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_frequency")]
        ])
        
        await callback_query.message.edit_text(
            "üìÖ <b>–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏ –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –∑–∞–Ω—è—Ç–∏—è:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(AddLessonStates.choosing_weekday)

@router.callback_query(F.data == "back_to_date_input")
async def back_to_date_input(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –¥–∞—Ç—ã"""
    await callback_query.message.edit_text(
        "üìÖ <b>–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì:</b>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: 15.01.2024",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_frequency")]
        ]),
        parse_mode="HTML"
    )
    await state.set_state(AddLessonStates.entering_date)

@router.callback_query(F.data == "back_to_time_input")
async def back_to_time_input(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤–≤–æ–¥—É –≤—Ä–µ–º–µ–Ω–∏"""
    data = await state.get_data()
    if data.get('frequency') == 'regular':
        await callback_query.message.edit_text(
            "‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_weekday")]
            ]),
            parse_mode="HTML"
        )
    else:
        await callback_query.message.edit_text(
            "‚è∞ <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ß–ß:–ú–ú:</b>\n\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: 14:30",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_date_input")]
            ]),
            parse_mode="HTML"
        )
    await state.set_state(AddLessonStates.entering_time)

@router.callback_query(F.data == "back_to_students")
async def back_to_students(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É —É—á–µ–Ω–∏–∫–∞"""
    data = await state.get_data()
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    
    if data.get('lesson_type') == 'individual':
        students = db.get_students_by_tutor(tutor_id)
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[])
        for student in students:
            keyboard.inline_keyboard.append([
                InlineKeyboardButton(text=f"üë§ {student['full_name']}", callback_data=f"add_lesson_student_{student['id']}")
            ])
        keyboard.inline_keyboard.append([InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_time_input")])
        
        await callback_query.message.edit_text(
            "üë§ <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞:</b>",
            reply_markup=keyboard,
            parse_mode="HTML"
        )
        await state.set_state(AddLessonStates.choosing_students)

@router.callback_query(F.data == "back_to_schedule")
async def back_to_schedule(callback_query: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é"""
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    if not tutor_id:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
    schedule_text = await get_upcoming_lessons_text(tutor_id)
    
    await callback_query.message.edit_text(
        schedule_text,
        reply_markup=get_schedule_keyboard(),
        parse_mode="HTML"
    )