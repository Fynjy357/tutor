from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import db
from handlers.schedule.states import AddLessonStates
import logging


router = Router()
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞
@router.callback_query(AddLessonStates.choosing_students, F.data.startswith("add_lesson_student_"))
async def process_student_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—á–µ–Ω–∏–∫–∞"""
    await callback_query.answer()
    
    student_id = int(callback_query.data.split("_")[3]) # add_lesson_student_{id}
    await state.update_data(student_id=student_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    data = await state.get_data()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    confirmation_text = "‚úÖ <b>–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
    
    if data.get('frequency') == 'regular':
        weekdays = ["–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫", "–í—Ç–æ—Ä–Ω–∏–∫", "–°—Ä–µ–¥–∞", "–ß–µ—Ç–≤–µ—Ä–≥", "–ü—è—Ç–Ω–∏—Ü–∞", "–°—É–±–±–æ—Ç–∞", "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
        confirmation_text += f"üìÖ –î–µ–Ω—å: {weekdays[data.get('weekday')]}\n"
        confirmation_text += f"‚è∞ –í—Ä–µ–º—è: {data.get('time')}\n"
        # confirmation_text += "üîÑ –¢–∏–ø: –†–µ–≥—É–ª—è—Ä–Ω–æ–µ\n"
    else:
        confirmation_text += f"üìÖ –î–∞—Ç–∞: {data.get('date')}\n"
        confirmation_text += f"‚è∞ –í—Ä–µ–º—è: {data.get('time')}\n"
        # confirmation_text += "üìã –¢–∏–ø: –ï–¥–∏–Ω–æ—Ä–∞–∑–æ–≤–æ–µ\n"
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    students = db.get_students_by_tutor(tutor_id)
    student_name = next((s['full_name'] for s in students if s['id'] == data.get('student_id')), "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–µ–Ω–∏–∫")
    
    confirmation_text += f"üë§ –£—á–µ–Ω–∏–∫: {student_name}\n"
    confirmation_text += f"üìö –¢–∏–ø –∑–∞–Ω—è—Ç–∏—è: {'–ò–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–µ' if data.get('lesson_type') == 'individual' else '–ì—Ä—É–ø–ø–æ–≤–æ–µ'}"
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="confirm_lesson")],
        [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_students")]
    ])
    
    await callback_query.message.edit_text(
        confirmation_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )
    await state.set_state(AddLessonStates.confirmation)
