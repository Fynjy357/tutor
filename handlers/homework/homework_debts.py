# handlers/homework/homework_debts.py
from aiogram import Router, types, F
from database import Database
from datetime import datetime
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types import InlineKeyboardButton
import traceback

router = Router()

def get_tutor_id(telegram_id: int) -> int:
    """–ü–æ–ª—É—á–∏—Ç—å tutor_id –ø–æ telegram_id"""
    db = Database()
    with db.get_connection() as conn:
        cursor = conn.cursor()
        cursor.execute('SELECT id FROM tutors WHERE telegram_id = ?', (telegram_id,))
        result = cursor.fetchone()
        return result[0] if result else None

def get_homework_debts_keyboard():
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–∞ –¥–æ–ª–≥–æ–≤ –ø–æ –¥–æ–º–∞—à–Ω–∏–º —Ä–∞–±–æ—Ç–∞–º"""
    builder = InlineKeyboardBuilder()
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ", 
            callback_data="statistics_menu"
        )
    )
    return builder.as_markup()

def get_students_with_homework_debts_keyboard(tutor_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–æ —Å–ø–∏—Å–∫–æ–º —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –¥–æ–ª–≥–∞–º–∏ –ø–æ –¥–æ–º–∞—à–Ω–∏–º —Ä–∞–±–æ—Ç–∞–º"""
    db = Database()
    builder = InlineKeyboardBuilder()
    
    try:
        print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –¥–æ–ª–≥–∞–º–∏ –ø–æ –î–ó –¥–ª—è tutor_id={tutor_id}")
        
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
            SELECT DISTINCT s.id, s.full_name 
            FROM students s
            JOIN lessons l ON s.id = l.student_id
            JOIN lesson_reports lr ON l.id = lr.lesson_id
            WHERE l.tutor_id = ? 
            AND lr.lesson_held = 1  -- –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
            AND (lr.homework_done = 0 OR lr.homework_done IS NULL)
            AND l.status != 'cancelled'
            ORDER BY s.full_name
            ''', (tutor_id,))
            
            students = cursor.fetchall()
            print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ —Å—Ç—É–¥–µ–Ω—Ç–æ–≤ —Å –¥–æ–ª–≥–∞–º–∏ –ø–æ –î–ó: {len(students)}")
            
            for student_id, student_name in students:
                builder.row(
                    InlineKeyboardButton(
                        text=f"üë§ {student_name}",
                        callback_data=f"new_homework_debt_student_{student_id}"
                    )
                )
    except Exception as e:
        print(f"‚ùå ERROR –≤ get_students_with_homework_debts_keyboard: {e}")
        print(f"üîç TRACEBACK: {traceback.format_exc()}")
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", 
            callback_data="statistics_menu"
        )
    )
    
    return builder.as_markup()

def get_student_homework_debts_keyboard(student_id, tutor_id):
    """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –¥–∞—Ç–∞–º–∏ –¥–æ–ª–≥–æ–≤ –ø–æ –¥–æ–º–∞—à–Ω–∏–º —Ä–∞–±–æ—Ç–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    db = Database()
    builder = InlineKeyboardBuilder()
    
    try:
        print(f"üîç DEBUG: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π —Å –¥–æ–ª–≥–∞–º–∏ –ø–æ –î–ó –¥–ª—è student_id={student_id}, tutor_id={tutor_id}")
        
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute('''
            SELECT l.id, l.lesson_date, lr.student_performance
            FROM lessons l
            JOIN lesson_reports lr ON l.id = lr.lesson_id
            WHERE l.student_id = ? 
            AND l.tutor_id = ?
            AND lr.lesson_held = 1  -- –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
            AND (lr.homework_done = 0 OR lr.homework_done IS NULL)
            AND l.status != 'cancelled'
            ORDER BY l.lesson_date DESC
            ''', (student_id, tutor_id))
            
            lessons = cursor.fetchall()
            print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π —Å –¥–æ–ª–≥–∞–º–∏ –ø–æ –î–ó: {len(lessons)}")
            
            for lesson_id, lesson_date, comment in lessons:
                date_str = datetime.strptime(lesson_date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
                builder.row(
                    InlineKeyboardButton(
                        text=f"üìÖ {date_str}",
                        callback_data=f"new_mark_homework_done_{lesson_id}"
                    )
                )
    except Exception as e:
        print(f"‚ùå ERROR –≤ get_student_homework_debts_keyboard: {e}")
        print(f"üîç TRACEBACK: {traceback.format_exc()}")
    
    builder.row(
        InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ö —Å–ø–∏—Å–∫—É —É—á–µ–Ω–∏–∫–æ–≤", 
            callback_data="new_homework_debts_menu"
        )
    )
    
    return builder.as_markup()

@router.callback_query(F.data == "new_homework_debts_menu")
async def show_new_homework_debts_menu(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é –¥–æ–ª–≥–æ–≤ –ø–æ –¥–æ–º–∞—à–Ω–∏–º —Ä–∞–±–æ—Ç–∞–º"""
    db = Database()
    
    try:
        print(f"üîç DEBUG: –ó–∞–ø—É—Å–∫ show_new_homework_debts_menu –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º tutor_id
        tutor_id = get_tutor_id(callback.from_user.id)
        if not tutor_id:
            print(f"‚ùå ERROR: –†–µ–ø–µ—Ç–∏—Ç–æ—Ä —Å telegram_id={callback.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.message.edit_text(
                text="‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ",
                reply_markup=get_homework_debts_keyboard()
            )
            return
        
        with db.get_connection() as conn:
            cursor = conn.cursor()
            print(f"üîç DEBUG: –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ª–≥–æ–≤ –ø–æ –î–ó –¥–ª—è tutor_id={tutor_id}")
            
            cursor.execute('''
            SELECT s.full_name, l.lesson_date, lr.student_performance
            FROM students s
            JOIN lessons l ON s.id = l.student_id
            JOIN lesson_reports lr ON l.id = lr.lesson_id
            WHERE l.tutor_id = ? 
            AND lr.lesson_held = 1  -- –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
            AND (lr.homework_done = 0 OR lr.homework_done IS NULL)
            AND l.status != 'cancelled'
            ORDER BY l.lesson_date DESC
            ''', (tutor_id,))
            
            debts = cursor.fetchall()
            print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ –∑–∞–ø–∏—Å–µ–π —Å –¥–æ–ª–≥–∞–º–∏ –ø–æ –î–ó: {len(debts)}")
            
            if not debts:
                text = "üìö <b>–î–æ–ª–≥–∏ –ø–æ –¥–æ–º–∞—à–Ω–∏–º —Ä–∞–±–æ—Ç–∞–º</b>\n\nüì≠ –í—Å–µ –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!"
                print("üîç DEBUG: –ù–µ—Ç –¥–æ–ª–≥–æ–≤ –ø–æ –î–ó - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ '–í—Å–µ –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã'")
            else:
                text = "üìö <b>–î–æ–ª–≥–∏ –ø–æ –¥–æ–º–∞—à–Ω–∏–º —Ä–∞–±–æ—Ç–∞–º</b>\n\n"
                for student_name, lesson_date, comment in debts:
                    date_str = datetime.strptime(lesson_date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
                    comment_text = f" - {comment}" if comment else ""
                    text += f"üìÖ {date_str} - üë§ {student_name}{comment_text}\n"
                print(f"üîç DEBUG: –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω —Ç–µ–∫—Å—Ç —Å {len(debts)} –¥–æ–ª–≥–∞–º–∏ –ø–æ –î–ó")
            
            await callback.message.edit_text(
                text=text,
                reply_markup=get_students_with_homework_debts_keyboard(tutor_id),
                parse_mode="HTML"
            )
            print("üîç DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå ERROR –≤ show_new_homework_debts_menu: {e}")
        print(f"üîç TRACEBACK: {traceback.format_exc()}")
        await callback.message.edit_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–æ–ª–≥–æ–≤ –ø–æ –¥–æ–º–∞—à–Ω–∏–º —Ä–∞–±–æ—Ç–∞–º",
            reply_markup=get_homework_debts_keyboard()
        )

@router.callback_query(F.data.startswith("new_homework_debt_student_"))
async def show_student_homework_debts(callback: types.CallbackQuery):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–æ–ª–≥–∏ –ø–æ –¥–æ–º–∞—à–Ω–∏–º —Ä–∞–±–æ—Ç–∞–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞"""
    student_id = int(callback.data.split("_")[-1])
    db = Database()
    
    try:
        print(f"üîç DEBUG: –ó–∞–ø—É—Å–∫ show_student_homework_debts –¥–ª—è student_id={student_id}, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback.from_user.id}")
        
        # –ü–æ–ª—É—á–∞–µ–º tutor_id
        tutor_id = get_tutor_id(callback.from_user.id)
        if not tutor_id:
            print(f"‚ùå ERROR: –†–µ–ø–µ—Ç–∏—Ç–æ—Ä —Å telegram_id={callback.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.message.edit_text(
                text="‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ",
                reply_markup=get_homework_debts_keyboard()
            )
            return
        
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π
            print(f"üîç DEBUG: –ü–æ–∏—Å–∫ —Å—Ç—É–¥–µ–Ω—Ç–∞ —Å id={student_id}")
            cursor.execute('SELECT full_name FROM students WHERE id = ?', (student_id,))
            student_data = cursor.fetchone()
            
            if not student_data:
                print(f"‚ùå ERROR: –°—Ç—É–¥–µ–Ω—Ç —Å id={student_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
                await callback.message.edit_text(
                    text="‚ùå –°—Ç—É–¥–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω",
                    reply_markup=get_homework_debts_keyboard()
                )
                return
                
            student_name = student_data[0]
            print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω —Å—Ç—É–¥–µ–Ω—Ç: {student_name}")
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–Ω—è—Ç–∏—è —Å –¥–æ–ª–≥–∞–º–∏ –ø–æ –î–ó
            print(f"üîç DEBUG: –ü–æ–∏—Å–∫ –∑–∞–Ω—è—Ç–∏–π —Å –¥–æ–ª–≥–∞–º–∏ –ø–æ –î–ó –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞")
            cursor.execute('''
            SELECT l.lesson_date, lr.student_performance
            FROM lessons l
            JOIN lesson_reports lr ON l.id = lr.lesson_id
            WHERE l.student_id = ? 
            AND l.tutor_id = ?
            AND lr.lesson_held = 1  -- –¢–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ–¥–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
            AND (lr.homework_done = 0 OR lr.homework_done IS NULL)
            AND l.status != 'cancelled'
            ORDER BY l.lesson_date DESC
            ''', (student_id, tutor_id))
            
            lessons = cursor.fetchall()
            print(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π —Å –¥–æ–ª–≥–∞–º–∏ –ø–æ –î–ó: {len(lessons)}")
            
            text = f"üìö <b>–î–æ–ª–≥–∏ –ø–æ –¥–æ–º–∞—à–Ω–∏–º —Ä–∞–±–æ—Ç–∞–º</b>\n\nüë§ <b>{student_name}</b>\n\n"
            
            if not lessons:
                text += "üì≠ –í—Å–µ –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!"
                print("üîç DEBUG: –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ –Ω–µ—Ç –¥–æ–ª–≥–æ–≤ –ø–æ –î–ó")
            else:
                total_debt = 0
                for lesson_date, comment in lessons:
                    date_str = datetime.strptime(lesson_date, '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
                    comment_text = f" - {comment}" if comment else ""
                    text += f"üìÖ {date_str}{comment_text}\n"
                    total_debt += 1
                
                text += f"\nüìä –í—Å–µ–≥–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö —Ä–∞–±–æ—Ç: {total_debt}"
                print(f"üîç DEBUG: –£ —Å—Ç—É–¥–µ–Ω—Ç–∞ {total_debt} –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö —Ä–∞–±–æ—Ç")
            
            await callback.message.edit_text(
                text=text,
                reply_markup=get_student_homework_debts_keyboard(student_id, tutor_id),
                parse_mode="HTML"
            )
            print("üîç DEBUG: –°–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–æ–ª–≥–∞–º–∏ –ø–æ –î–ó —Å—Ç—É–¥–µ–Ω—Ç–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            
    except Exception as e:
        print(f"‚ùå ERROR –≤ show_student_homework_debts: {e}")
        print(f"üîç TRACEBACK: {traceback.format_exc()}")
        await callback.message.edit_text(
            text="‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞",
            reply_markup=get_homework_debts_keyboard()
        )

@router.callback_query(F.data.startswith("new_mark_homework_done_"))
async def mark_homework_as_done(callback: types.CallbackQuery):
    """–û—Ç–º–µ—Ç–∏—Ç—å –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é"""
    lesson_id = int(callback.data.split("_")[-1])
    db = Database()
    
    try:
        print(f"üîç DEBUG: –û—Ç–º–µ—Ç–∫–∞ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_id} –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π")
        
        # –ü–æ–ª—É—á–∞–µ–º tutor_id
        tutor_id = get_tutor_id(callback.from_user.id)
        if not tutor_id:
            print(f"‚ùå ERROR: –†–µ–ø–µ—Ç–∏—Ç–æ—Ä —Å telegram_id={callback.from_user.id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            await callback.answer("‚ùå –†–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            return
        
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
            cursor.execute('''
            SELECT l.student_id, s.full_name, l.lesson_date 
            FROM lessons l 
            JOIN students s ON l.student_id = s.id 
            WHERE l.id = ? AND l.tutor_id = ?
            ''', (lesson_id, tutor_id))
            
            lesson_data = cursor.fetchone()
            
            if not lesson_data:
                print(f"‚ùå ERROR: –ó–∞–Ω—è—Ç–∏–µ {lesson_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                await callback.answer("‚ùå –ó–∞–Ω—è—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                return
            
            student_id, student_name, lesson_date = lesson_data
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ lesson_reports
            cursor.execute('SELECT id FROM lesson_reports WHERE lesson_id = ?', (lesson_id,))
            report_exists = cursor.fetchone()
            
            if report_exists:
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å
                cursor.execute('''
                UPDATE lesson_reports SET homework_done = 1 WHERE lesson_id = ?
                ''', (lesson_id,))
                print(f"üîç DEBUG: –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∑–∞–ø–∏—Å—å lesson_reports –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_id}")
            else:
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
                cursor.execute('''
                INSERT INTO lesson_reports (lesson_id, student_id, homework_done)
                VALUES (?, ?, 1)
                ''', (lesson_id, student_id))
                print(f"üîç DEBUG: –°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –∑–∞–ø–∏—Å—å lesson_reports –¥–ª—è –∑–∞–Ω—è—Ç–∏—è {lesson_id}")
            
            conn.commit()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É —Å—Ç—É–¥–µ–Ω—Ç–æ–≤
            await show_new_homework_debts_menu(callback)
            await callback.answer("‚úÖ –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è")
            
    except Exception as e:
        print(f"‚ùå ERROR –≤ mark_homework_as_done: {e}")
        print(f"üîç TRACEBACK: {traceback.format_exc()}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã")
