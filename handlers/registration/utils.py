import re
from typing import Optional
from aiogram import types, Bot
from aiogram.fsm.context import FSMContext
from database import db
from handlers.registration.states import RegistrationStates
from handlers.registration.keyboards import get_confirmation_keyboard
import secrets
import string
import logging

from keyboards.keyboard_phone import get_phone_keyboard

logger = logging.getLogger(__name__)

def generate_referral_code(length=8):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞"""
    alphabet = string.ascii_uppercase + string.digits
    return ''.join(secrets.choice(alphabet) for _ in range(length))

def generate_referral_link(bot_username: str, referral_code: str) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    return f"https://t.me/{bot_username}?start=ref_{referral_code}"

async def show_confirmation(message: types.Message, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    data = await state.get_data()
    
    confirmation_text = f"""
<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>

üìù <b>–§–ò–û:</b> {data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}

–í—Å—ë –≤–µ—Ä–Ω–æ?
"""
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registration_messages = data.get('registration_messages', [])
    for msg_id in registration_messages:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except:
            pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    confirm_message = await message.answer(
        confirmation_text,
        reply_markup=get_confirmation_keyboard(),
        parse_mode="HTML"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(registration_messages=[confirm_message.message_id])
    await state.set_state(RegistrationStates.confirmation)

async def save_tutor_data(callback_query: types.CallbackQuery, user_data: dict, bot: Bot):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –≤ –ë–î —Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–∏"""
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—ã–π –∫–æ–¥
        referral_code = generate_referral_code()
        
        # –ü–æ–ª—É—á–∞–µ–º username –±–æ—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Å—Å—ã–ª–∫–∏
        bot_info = await bot.get_me()
        bot_username = bot_info.username
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω—É—é —Å—Å—ã–ª–∫—É
        referral_link = generate_referral_link(bot_username, referral_code)
        
        tutor_id = db.add_tutor(
            telegram_id=callback_query.from_user.id,
            full_name=user_data['name'],
            phone=user_data['phone'],
            promo_code=referral_link
        )
        
        # –ê–ö–¢–ò–í–ê–¶–ò–Ø –†–ï–§–ï–†–ê–õ–ê (–ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å)
        user_id = callback_query.from_user.id
        db.activate_referral(user_id, tutor_id)
        
        return tutor_id, True
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞: {e}")
        return None, False

def validate_phone_number(phone: Optional[str]) -> bool:
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    if phone is None:
        logger.warning("–ü–µ—Ä–µ–¥–∞–Ω None –≤ –≤–∞–ª–∏–¥–∞—Ü–∏—é –Ω–æ–º–µ—Ä–∞")
        return False
    
    if not isinstance(phone, str):
        logger.warning(f"–ü–µ—Ä–µ–¥–∞–Ω –Ω–µ —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø: {type(phone)}")
        return False
    
    if not phone.strip():
        logger.warning("–ü–µ—Ä–µ–¥–∞–Ω–∞ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞")
        return False
    
    logger.info(f"–í–∞–ª–∏–¥–∞—Ü–∏—è –Ω–æ–º–µ—Ä–∞: '{phone}'")
    
    # –£–±–∏—Ä–∞–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    digits = re.sub(r'\D', '', phone)
    
    if not digits:
        logger.warning(f"–ù–æ–º–µ—Ä –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ü–∏—Ñ—Ä: {phone}")
        return False
    
    logger.info(f"–¶–∏—Ñ—Ä—ã –Ω–æ–º–µ—Ä–∞: {digits} (–¥–ª–∏–Ω–∞: {len(digits)})")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É (10 –∏–ª–∏ 11 —Ü–∏—Ñ—Ä –¥–ª—è —Ä–æ—Å—Å–∏–π—Å–∫–∏—Ö –Ω–æ–º–µ—Ä–æ–≤)
    if len(digits) not in [10, 11]:
        logger.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –Ω–æ–º–µ—Ä–∞: {digits} (–¥–ª–∏–Ω–∞: {len(digits)})")
        return False
    
    # –ë–æ–ª–µ–µ –≥–∏–±–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ —Ä–æ—Å—Å–∏–π—Å–∫–æ–≥–æ –Ω–æ–º–µ—Ä–∞
    if len(digits) == 11:
        # –î–ª—è 11-–∑–Ω–∞—á–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 7 –∏–ª–∏ 8
        if not digits.startswith(('7', '8')):
            logger.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 11-–∑–Ω–∞—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞: {digits}")
            return False
    else:
        # –î–ª—è 10-–∑–Ω–∞—á–Ω—ã—Ö –Ω–æ–º–µ—Ä–æ–≤ –ø–µ—Ä–≤–∞—è —Ü–∏—Ñ—Ä–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å 9 (–º–æ–±–∏–ª—å–Ω—ã–µ) –∏–ª–∏ 4/8 (–≥–æ—Ä–æ–¥—Å–∫–∏–µ)
        if not digits.startswith(('9', '4', '8')):
            logger.warning(f"–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç 10-–∑–Ω–∞—á–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞: {digits}")
            return False
    
    logger.info(f"–ù–æ–º–µ—Ä –ø—Ä–æ—à–µ–ª –≤–∞–ª–∏–¥–∞—Ü–∏—é: {digits}")
    return True

async def handle_invalid_phone(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞"""
    error_text = """
‚ùå <b>–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!</b>

–ù–æ–º–µ—Ä –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ: <code>+79111234567</code>

–ü—Ä–∏–º–µ—Ä—ã –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤:
‚Ä¢ +79183567075
‚Ä¢ +79261234567

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑:
"""
    
    await message.answer(
        error_text,
        parse_mode="HTML",
        reply_markup=get_phone_keyboard()
    )