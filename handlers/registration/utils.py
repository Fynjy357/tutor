from aiogram import types, Bot
from aiogram.fsm.context import FSMContext
from database import db
from handlers.registration.states import RegistrationStates
from handlers.registration.keyboards import get_confirmation_keyboard

async def show_confirmation(message: types.Message, state: FSMContext, bot: Bot):
    """–ü–æ–∫–∞–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
    data = await state.get_data()
    
    confirmation_text = f"""
<b>–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:</b>

üìù <b>–§–ò–û:</b> {data.get('name', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}
üìû <b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {data.get('phone', '–Ω–µ —É–∫–∞–∑–∞–Ω')}
üé´ <b>–ü—Ä–æ–º–æ–∫–æ–¥:</b> {data.get('promo', '–Ω–µ —É–∫–∞–∑–∞–Ω') if data.get('promo') != '0' else '–Ω–µ —É–∫–∞–∑–∞–Ω'}

–í—Å—ë –≤–µ—Ä–Ω–æ?
"""
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    registration_messages = data.get('registration_messages', [])
    for msg_id in registration_messages:
        try:
            await bot.delete_message(chat_id=message.chat.id, message_id=msg_id)
        except:
            pass
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º
    confirm_message = await message.answer(
        confirmation_text,
        reply_markup=get_confirmation_keyboard(),
        parse_mode="HTML"
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –Ω–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    await state.update_data(registration_messages=[confirm_message.message_id])
    await state.set_state(RegistrationStates.confirmation)

async def save_tutor_data(callback_query: types.CallbackQuery, user_data: dict):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –≤ –ë–î"""
    try:
        tutor_id = db.add_tutor(
            telegram_id=callback_query.from_user.id,
            full_name=user_data['name'],
            phone=user_data['phone'],
            promo_code=user_data.get('promo', '0')
        )
        return tutor_id, True
    except Exception as e:
        return None, False

async def process_promo_code(promo_code: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞"""
    if not promo_code or promo_code == '0':
        return "–Ω–µ —É–∫–∞–∑–∞–Ω"
    
    promo_info = db.check_promo_code(promo_code)
    if promo_info:
        db.use_promo_code(promo_code)
        discount = promo_info[2] if promo_info[2] > 0 else promo_info[3]
        discount_type = "%" if promo_info[2] > 0 else "—Ä—É–±."
        return f"{promo_code} (—Å–∫–∏–¥–∫–∞ {discount}{discount_type})"
    else:
        return f"{promo_code} (–Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω)"