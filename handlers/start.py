# handlers/start.py
from aiogram import Router, types, F
from aiogram.filters import Command, CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from keyboards.registration import get_registration_keyboard
from keyboards.main_menu import get_main_menu_keyboard
from keyboards.students import get_students_menu_keyboard, get_cancel_keyboard
from database import db

router = Router()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
def get_invite_keyboard(student_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
    keyboard = [
        [InlineKeyboardButton(text="üë§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data=f"invite_student_{student_id}")],
        [InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è", callback_data=f"invite_parent_{student_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–µ–Ω–∏–∫—É", callback_data=f"back_to_student_{student_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤
def get_students_list_keyboard(students, page=0, page_size=5):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π"""
    keyboard = []
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤ –Ω–∞ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ
    start_idx = page * page_size
    end_idx = start_idx + page_size
    current_page_students = students[start_idx:end_idx]
    
    for student in current_page_students:
        status_emoji = "‚úÖ" if student['status'].lower() == 'active' else "‚è∏Ô∏è"
        keyboard.append([InlineKeyboardButton(
            text=f"{status_emoji} {student['full_name']}",
            callback_data=f"student_{student['id']}"
        )])
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    navigation_buttons = []
    if page > 0:
        navigation_buttons.append(InlineKeyboardButton(
            text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
            callback_data=f"students_page_{page-1}"
        ))
    if end_idx < len(students):
        navigation_buttons.append(InlineKeyboardButton(
            text="‚û°Ô∏è –í–ø–µ—Ä–µ–¥",
            callback_data=f"students_page_{page+1}"
        ))
    
    if navigation_buttons:
        keyboard.append(navigation_buttons)
    
    # –ö–Ω–æ–ø–∫–∞ –≤–æ–∑–≤—Ä–∞—Ç–∞
    keyboard.append([InlineKeyboardButton(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–æ–≤",
        callback_data="back_to_students_menu"
    )])
    
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.message(Command("start"))
async def cmd_start(message: types.Message):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    existing_tutor = db.get_tutor_by_telegram_id(message.from_user.id)
    
    if existing_tutor:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≥–ª–∞–≤–Ω—ã–º –º–µ–Ω—é
        welcome_text = f"""
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥, {existing_tutor[2]}!</b>

–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.

–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
üìù –§–ò–û: {existing_tutor[2]}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {existing_tutor[3]}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:
"""
        await message.answer(
            welcome_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="HTML"
        )
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        welcome_text = """
<b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∏–∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞</b>

–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ—Ç –±–æ—Ç –¥–ª—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤

üî≤ –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è –≤ –±–æ—Ç–µ
‚úÖ –ù–∞–ø–∏—Å–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ...
"""
        
        await message.answer(
            welcome_text,
            reply_markup=get_registration_keyboard(),
            parse_mode="HTML"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–ª—É–±–æ–∫–∏—Ö —Å—Å—ã–ª–æ–∫
@router.message(CommandStart(deep_link=True))
async def handle_deep_link(message: types.Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ deep link
    parts = message.text.split()
    
    if len(parts) < 2:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç
        await cmd_start(message)
        return
    
    args = parts[1]  # –í—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å - —ç—Ç–æ –∞—Ä–≥—É–º–µ–Ω—Ç—ã
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    if args.startswith('student_') or args.startswith('parent_'):
        try:
            invite_type, token = args.split('_', 1)
        except ValueError:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
            return
        
        if invite_type not in ['student', 'parent']:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —É—á–µ–Ω–∏–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
        student = db.get_student_by_token(token, invite_type)
        if not student:
            await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = message.from_user.username
        if username:
            username = f"@{username}"
        else:
            username = "–Ω–µ —É–∫–∞–∑–∞–Ω"
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ —É—á–µ–Ω–∏–∫—É
        if invite_type == 'student':
            success = db.update_student_telegram_id(
                student['id'], 
                message.from_user.id, 
                username, 
                'student'
            )
            role = "—É—á–µ–Ω–∏–∫–∞"
            tutor_message = f"‚úÖ –£—á–µ–Ω–∏–∫ {student['full_name']} –ø—Ä–∏–≤—è–∑–∞–ª —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç!"
        else:
            success = db.update_student_telegram_id(
                student['id'], 
                message.from_user.id, 
                username, 
                'parent'
            )
            role = "—Ä–æ–¥–∏—Ç–µ–ª—è"
            tutor_message = f"‚úÖ –†–æ–¥–∏—Ç–µ–ª—å —É—á–µ–Ω–∏–∫–∞ {student['full_name']} –ø—Ä–∏–≤—è–∑–∞–ª —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç!"
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫–∞–∫ {role} —É—á–µ–Ω–∏–∫–∞ {student['full_name']}!</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö –∏ —É—Å–ø–µ—Ö–∞—Ö.",
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
            try:
                tutor = db.get_tutor_by_id(student['tutor_id'])
                if tutor and tutor[1]:  # tutor[1] - telegram_id
                    await message.bot.send_message(
                        chat_id=tutor[1],
                        text=tutor_message
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É: {e}")
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞!</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
        return
    
    # –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç
    await cmd_start(message)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–£—á–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤"
@router.callback_query(F.data == "students")
async def students_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.clear()
    
    await callback_query.message.edit_text(
        "üë• <b>–£—á–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ —É—á–µ–Ω–∏–∫–∞–º–∏: –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö, "
        "–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.",
        reply_markup=get_students_menu_keyboard(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é" –∏–∑ —Ä–∞–∑–¥–µ–ª–∞ —É—á–µ–Ω–∏–∫–æ–≤
@router.callback_query(F.data == "back_to_main")
async def back_to_main_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.clear()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    existing_tutor = db.get_tutor_by_telegram_id(callback_query.from_user.id)
    
    if existing_tutor:
        welcome_text = f"""
<b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –Ω–∞–∑–∞–¥, {existing_tutor[2]}!</b>

–†–∞–¥—ã —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –µ–∂–µ–¥–Ω–µ–≤–Ω–∏–∫–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.

–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ:
üìù –§–ò–û: {existing_tutor[2]}
üìû –¢–µ–ª–µ—Ñ–æ–Ω: {existing_tutor[3]}

–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª:
"""
        try:
            await callback_query.message.edit_text(
                welcome_text,
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )
        except:
            await callback_query.message.answer(
                welcome_text,
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥ –∫ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–æ–≤"
@router.callback_query(F.data == "back_to_students_menu")
async def back_to_students_menu(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.clear()
    
    await callback_query.message.edit_text(
        "üë• <b>–£—á–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ —É—á–µ–Ω–∏–∫–∞–º–∏: –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö, "
        "–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.",
        reply_markup=get_students_menu_keyboard(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–º–µ–Ω—ã –æ–ø–µ—Ä–∞—Ü–∏–π
@router.callback_query(F.data == "cancel_operation")
async def cancel_operation(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    await state.clear()
    
    await callback_query.message.edit_text(
        "üë• <b>–£—á–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ —É—á–µ–Ω–∏–∫–∞–º–∏: –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö, "
        "–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.",
        reply_markup=get_students_menu_keyboard(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
@router.callback_query(lambda c: c.data.startswith("invite_") and len(c.data.split("_")) == 2)
async def invite_menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[1])
    except ValueError:
        return
    
    await callback_query.message.edit_text(
        f"üë§ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å:",
        parse_mode="HTML",
        reply_markup=get_invite_keyboard(student_id)
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
@router.callback_query(lambda c: c.data.startswith("invite_student_") and len(c.data.split("_")) == 3)
async def invite_student(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[2])
    except ValueError:
        return
    
    student = db.get_student_by_id(student_id)
    if not student:
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –°–û–•–†–ê–ù–Ø–ï–ú —Ç–æ–∫–µ–Ω
    token = db.generate_invite_token()
    success = db.update_student_token(student_id, token, 'student')
    
    if not success:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    bot_username = (await callback_query.bot.get_me()).username
    invite_link = f"https://t.me/{bot_username}?start=student_{token}"
    
    try:
        await callback_query.message.edit_text(
            f"üë§ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞</b>\n\n"
            f"–£—á–µ–Ω–∏–∫: {student['full_name']}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —É—á–µ–Ω–∏–∫—É:\n"
            f"<code>{invite_link}</code>\n\n"
            f"–£—á–µ–Ω–∏–∫ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ –≤–∞—à–µ–π –±–∞–∑–µ.",
            parse_mode="HTML",
            reply_markup=get_invite_keyboard(student_id)
        )
    except Exception:
        await callback_query.message.answer(
            f"üë§ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞</b>\n\n"
            f"–£—á–µ–Ω–∏–∫: {student['full_name']}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —É—á–µ–Ω–∏–∫—É:\n"
            f"<code>{invite_link}</code>\n\n"
            f"–£—á–µ–Ω–∏–∫ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ –≤–∞—à–µ–π –±–∞–∑–µ.",
            parse_mode="HTML",
            reply_markup=get_invite_keyboard(student_id)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è
@router.callback_query(lambda c: c.data.startswith("invite_parent_") and len(c.data.split("_")) == 3)
async def invite_parent(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[2])
    except ValueError:
        return
    
    student = db.get_student_by_id(student_id)
    if not student:
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∏ –°–û–•–†–ê–ù–Ø–ï–ú —Ç–æ–∫–µ–Ω
    token = db.generate_invite_token()
    success = db.update_student_token(student_id, token, 'parent')
    
    if not success:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    bot_username = (await callback_query.bot.get_me()).username
    invite_link = f"https://t.me/{bot_username}?start=parent_{token}"
    
    try:
        await callback_query.message.edit_text(
            f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
            f"–£—á–µ–Ω–∏–∫: {student['full_name']}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Ä–æ–¥–∏—Ç–µ–ª—é:\n"
            f"<code>{invite_link}</code>\n\n"
            f"–†–æ–¥–∏—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ –≤–∞—à–µ–π –±–∞–∑–µ.",
            parse_mode="HTML",
            reply_markup=get_invite_keyboard(student_id)
        )
    except Exception:
        await callback_query.message.answer(
            f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
            f"–£—á–µ–Ω–∏–∫: {student['full_name']}\n\n"
            f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Ä–æ–¥–∏—Ç–µ–ª—é:\n"
            f"<code>{invite_link}</code>\n\n"
            f"–†–æ–¥–∏—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ –≤–∞—à–µ–π –±–∞–∑–µ.",
            parse_mode="HTML",
            reply_markup=get_invite_keyboard(student_id)
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É—á–µ–Ω–∏–∫—É
@router.callback_query(lambda c: c.data.startswith("back_to_student_") and len(c.data.split("_")) == 4)
async def back_to_student_from_invite(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[3])
    except ValueError:
        return
    
    student = db.get_student_by_id(student_id)
    
    if not student:
        await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    status_text = student['status']
    if student.get('delete_after'):
        status_text = f"{status_text} (–±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω {student['delete_after']})"
    
    student_tg = f"@{student['student_username']}" if student.get('student_username') else "–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    parent_tg = f"@{student['parent_username']}" if student.get('parent_username') else "–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    
    text = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ</b>\n\n"
        f"<b>–§–ò–û:</b> {student['full_name']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {student['phone'] if student['phone'] != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è:</b> {student['parent_phone'] if student['parent_phone'] != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"<b>–¢–ì —É—á–µ–Ω–∏–∫–∞:</b> {student_tg}\n"
        f"<b>–¢–ì —Ä–æ–¥–∏—Ç–µ–ª—è:</b> {parent_tg}\n"
        f"<b>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b> {student.get('created_at', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–º
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_student_{student_id}")],
        [InlineKeyboardButton(text="üì§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data=f"invite_{student_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="students_list")]
    ]
    
    await callback_query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤
@router.callback_query(F.data == "students_list")
async def process_students_list(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    
    if not tutor_id:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
    students = db.get_students_by_tutor(tutor_id)
    
    if not students:
        await callback_query.message.edit_text(
            "üìù <b>–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø—É—Å—Ç</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.",
            reply_markup=get_students_menu_keyboard(),
            parse_mode="HTML"
        )
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    active_count = sum(1 for s in students if s['status'].lower() == 'active')
    text = (
        f"üë• <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤</b>\n\n"
        f"–í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤: {len(students)}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞:"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É —Å–ø–∏—Å–∫–∞
    await callback_query.message.edit_text(
        text,
        reply_markup=get_students_list_keyboard(students, page=0),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤
@router.callback_query(F.data.startswith("students_page_"))
async def students_list_page(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∏–∑ callback_data
    page = int(callback_query.data.split("_")[2])
    
    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    
    if not tutor_id:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
    students = db.get_students_by_tutor(tutor_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    active_count = sum(1 for s in students if s['status'].lower() == 'active')
    text = (
        f"üë• <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤</b>\n\n"
        f"–í—Å–µ–≥–æ —É—á–µ–Ω–∏–∫–æ–≤: {len(students)}\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}"
    )
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ–π
    await callback_query.message.edit_text(
        text,
        reply_markup=get_students_list_keyboard(students, page=page),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–µ–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("student_"))
async def view_student_detail(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    # –ü–æ–ª—É—á–∞–µ–º ID —É—á–µ–Ω–∏–∫–∞ –∏–∑ callback_data
    student_id = int(callback_query.data.split("_")[1])
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ
    student = db.get_student_by_id(student_id)
    
    if not student:
        await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    status_text = student['status']
    if student.get('delete_after'):
        status_text = f"{status_text} (–±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω {student['delete_after']})"
    
    student_tg = f"@{student['student_username']}" if student.get('student_username') else "–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    parent_tg = f"@{student['parent_username']}" if student.get('parent_username') else "–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    
    text = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ</b>\n\n"
        f"<b>–§–ò–û:</b> {student['full_name']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {student['phone'] if student['phone'] != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è:</b> {student['parent_phone'] if student['parent_phone'] != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"<b>–¢–ì —É—á–µ–Ω–∏–∫–∞:</b> {student_tg}\n"
        f"<b>–¢–ì —Ä–æ–¥–∏—Ç–µ–ª—è:</b> {parent_tg}\n"
        f"<b>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b> {student.get('created_at', '–Ω–µ —É–∫–∞–∑–∞–Ω–∞')}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–º
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_student_{student_id}")],
        [InlineKeyboardButton(text="üì§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data=f"invite_{student_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="students_list")]
    ]
    
    await callback_query.message.edit_text(
        text,
        reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("edit_student_"))
async def edit_student(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    student_id = int(callback_query.data.split("_")[2])
    await callback_query.message.answer(
        f"‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞ ID: {student_id}\n\n"
        "–§—É–Ω–∫—Ü–∏—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
    )

# –í—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫
@router.callback_query(F.data.in_(["schedule", "groups", "payments", "settings"]))
async def process_other_menus(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    menu_responses = {
        "schedule": "üìÖ –†–∞–∑–¥–µ–ª '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        "groups": "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –†–∞–∑–¥–µ–ª '–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        "payments": "üí∞ –†–∞–∑–¥–µ–ª '–û–ø–ª–∞—Ç—ã' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.",
        "settings": "‚öôÔ∏è –†–∞–∑–¥–µ–ª '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ."
    }
    
    await callback_query.message.answer(menu_responses[callback_query.data])