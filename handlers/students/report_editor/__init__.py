from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from datetime import datetime, date
import math
from aiogram.exceptions import TelegramBadRequest

from database import db
from handlers.students.keyboards_student import (
    get_dates_keyboard, 
    get_reports_keyboard, 
    get_report_edit_keyboard,
    get_cancel_edit_keyboard,
    get_students_menu_keyboard
)

router = Router()

class ReportEditStates:
    waiting_for_comment = "waiting_for_comment"

# –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤
@router.callback_query(F.data == "edit_reports")
async def start_report_editing(callback_query: CallbackQuery):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        await callback_query.answer()
    except TelegramBadRequest as e:
        if "query is too old" in str(e):
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —É—Å—Ç–∞—Ä–µ–≤—à–∏–µ –∑–∞–ø—Ä–æ—Å—ã
            return
        raise
    
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    if not tutor_id:
        await callback_query.message.answer("–û—à–∏–±–∫–∞: —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞—Ç—ã –∑–∞–Ω—è—Ç–∏–π —Å –æ—Ç—á–µ—Ç–∞–º–∏
    dates = db.get_dates_with_reports(tutor_id)
    
    if not dates:
        await callback_query.message.answer("–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è")
        return
    
    total_pages = math.ceil(len(dates) / 6)
    keyboard = get_dates_keyboard(dates, page=0, total_pages=total_pages)
    
    await callback_query.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤:",
        reply_markup=keyboard
    )

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –¥–∞—Ç
@router.callback_query(F.data.startswith("reports_page_"))
async def navigate_dates_pages(callback_query: CallbackQuery):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å –¥–∞—Ç–∞–º–∏"""
    await callback_query.answer()
    
    page = int(callback_query.data.split("_")[2])
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    
    dates = db.get_dates_with_reports(tutor_id)
    total_pages = math.ceil(len(dates) / 6)
    
    keyboard = get_dates_keyboard(dates, page=page, total_pages=total_pages)
    
    await callback_query.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤:",
        reply_markup=keyboard
    )

# –í—ã–±–æ—Ä –¥–∞—Ç—ã
@router.callback_query(F.data.startswith("report_date_"))
async def select_date(callback_query: CallbackQuery):
    """–í—ã–±–æ—Ä –¥–∞—Ç—ã –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    await callback_query.answer()
    
    date_str = callback_query.data.split("_")[2]
    selected_date = datetime.strptime(date_str, "%Y-%m-%d").date()
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç—á–µ—Ç—ã –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã
    reports = db.get_reports_by_date(tutor_id, selected_date)
    
    if not reports:
        await callback_query.message.answer("–ù–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–π –¥–∞—Ç—ã")
        return
    
    total_pages = math.ceil(len(reports) / 6)
    keyboard = get_reports_keyboard(reports, page=0, total_pages=total_pages)
    
    await callback_query.message.edit_text(
        f"üìã –û—Ç—á–µ—Ç—ã –∑–∞ {selected_date.strftime('%d.%m.%Y')}:\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º –æ—Ç—á–µ—Ç–æ–≤
@router.callback_query(F.data.startswith("reports_list_page_"))
async def navigate_reports_pages(callback_query: CallbackQuery):
    """–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º —Å –æ—Ç—á–µ—Ç–∞–º–∏"""
    await callback_query.answer()
    
    page = int(callback_query.data.split("_")[3])
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = callback_query.message.text
    date_str = message_text.split("–∑–∞ ")[1].split(":")[0].strip()
    selected_date = datetime.strptime(date_str, "%d.%m.%Y").date()
    
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    reports = db.get_reports_by_date(tutor_id, selected_date)
    
    total_pages = math.ceil(len(reports) / 6)
    keyboard = get_reports_keyboard(reports, page=page, total_pages=total_pages)
    
    await callback_query.message.edit_text(
        f"üìã –û—Ç—á–µ—Ç—ã –∑–∞ {selected_date.strftime('%d.%m.%Y')}:\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
        reply_markup=keyboard
    )

# –í—ã–±–æ—Ä –æ—Ç—á–µ—Ç–∞ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
@router.callback_query(F.data.startswith("select_report:"))
async def select_report(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    await callback_query.answer()
    
    try:
        report_id = int(callback_query.data.split(":")[1])
        report = db.get_report_by_id(report_id)
        
        if not report:
            await callback_query.message.answer("–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º lesson_time –≤–º–µ—Å—Ç–æ time
        report_text = f"""üìã –û—Ç—á–µ—Ç —É—á–µ–Ω–∏–∫–∞: {report['student_name']}
üìÖ –î–∞—Ç–∞: {report['lesson_date'].strftime('%d.%m.%Y')}
‚è∞ –í—Ä–µ–º—è: {report.get('lesson_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: {'–î–∞' if report['lesson_held'] else '–ù–µ—Ç'}
üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {'–î–∞' if report['lesson_paid'] else '–ù–µ—Ç'}
üìö –î–ó –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {'–î–∞' if report['homework_done'] else '–ù–µ—Ç'}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {report['student_performance'] or '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}"""
        
        keyboard = get_report_edit_keyboard(report_id)
        await callback_query.message.edit_text(report_text, reply_markup=keyboard)
        
    except ValueError:
        await callback_query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
    except Exception as e:
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
@router.callback_query(F.data.startswith("toggle_attendance_"))
async def toggle_attendance(callback_query: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è"""
    await callback_query.answer()
    
    report_id = int(callback_query.data.split("_")[2])
    report = db.get_report_by_id(report_id)
    
    if report:
        new_value = not report['lesson_held']
        db.update_report_attendance(report_id, new_value)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        report = db.get_report_by_id(report_id)
        report_text = f"""üìã –û—Ç—á–µ—Ç —É—á–µ–Ω–∏–∫–∞: {report['student_name']}
üìÖ –î–∞—Ç–∞: {report['lesson_date'].strftime('%d.%m.%Y')}
‚è∞ –í—Ä–µ–º—è: {report['lesson_time']}

‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: {'–î–∞' if report['lesson_held'] else '–ù–µ—Ç'}
üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {'–î–∞' if report['lesson_paid'] else '–ù–µ—Ç'}
üìö –î–ó –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {'–î–∞' if report['homework_done'] else '–ù–µ—Ç'}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {report['student_performance'] or '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}"""
        
        keyboard = get_report_edit_keyboard(report_id)
        await callback_query.message.edit_text(report_text, reply_markup=keyboard)

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã
@router.callback_query(F.data.startswith("toggle_payment_"))
async def toggle_payment(callback_query: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    await callback_query.answer()
    
    report_id = int(callback_query.data.split("_")[2])
    report = db.get_report_by_id(report_id)
    
    if report:
        new_value = not report['lesson_paid']
        db.update_report_payment(report_id, new_value)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        report = db.get_report_by_id(report_id)
        report_text = f"""üìã –û—Ç—á–µ—Ç —É—á–µ–Ω–∏–∫–∞: {report['student_name']}
üìÖ –î–∞—Ç–∞: {report['lesson_date'].strftime('%d.%m.%Y')}
‚è∞ –í—Ä–µ–º—è: {report['lesson_time']}

‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: {'–î–∞' if report['lesson_held'] else '–ù–µ—Ç'}
üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {'–î–∞' if report['lesson_paid'] else '–ù–µ—Ç'}
üìö –î–ó –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {'–î–∞' if report['homework_done'] else '–ù–µ—Ç'}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {report['student_performance'] or '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}"""
        
        keyboard = get_report_edit_keyboard(report_id)
        await callback_query.message.edit_text(report_text, reply_markup=keyboard)

# –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è
@router.callback_query(F.data.startswith("toggle_homework_"))
async def toggle_homework(callback_query: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    await callback_query.answer()
    
    report_id = int(callback_query.data.split("_")[2])
    report = db.get_report_by_id(report_id)
    
    if report:
        new_value = not report['homework_done']
        db.update_report_homework(report_id, new_value)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        report = db.get_report_by_id(report_id)
        report_text = f"""üìã –û—Ç—á–µ—Ç —É—á–µ–Ω–∏–∫–∞: {report['student_name']}
üìÖ –î–∞—Ç–∞: {report['lesson_date'].strftime('%d.%m.%Y')}
‚è∞ –í—Ä–µ–º—è: {report['lesson_time']}

‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: {'–î–∞' if report['lesson_held'] else '–ù–µ—Ç'}
üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {'–î–∞' if report['lesson_paid'] else '–ù–µ—Ç'}
üìö –î–ó –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {'–î–∞' if report['homework_done'] else '–ù–µ—Ç'}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {report['student_performance'] or '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}"""
        
        keyboard = get_report_edit_keyboard(report_id)
        await callback_query.message.edit_text(report_text, reply_markup=keyboard)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@router.callback_query(F.data.startswith("edit_comment_"))
async def start_comment_editing(callback_query: CallbackQuery, state: FSMContext):
    """–ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    await callback_query.answer()
    
    report_id = int(callback_query.data.split("_")[2])
    report = db.get_report_by_id(report_id)
    
    if report:
        await state.set_state(ReportEditStates.waiting_for_comment)
        await state.update_data(editing_report_id=report_id)
        
        keyboard = get_cancel_edit_keyboard()
        
        await callback_query.message.edit_text(
            f"‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –æ—Ç—á–µ—Ç–∞ —É—á–µ–Ω–∏–∫–∞ {report['student_name']}:\n\n–¢–µ–∫—É—â–∏–π –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {report['student_performance'] or '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}",
            reply_markup=keyboard
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@router.message(StateFilter(ReportEditStates.waiting_for_comment))
async def process_new_comment(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    data = await state.get_data()
    report_id = data.get('editing_report_id')
    
    if report_id:
        db.update_report_comment(report_id, message.text)
        await message.answer("‚úÖ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ–±–Ω–æ–≤–ª–µ–Ω!")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Ç—á–µ—Ç–∞
        report = db.get_report_by_id(report_id)
        report_text = f"""üìã –û—Ç—á–µ—Ç —É—á–µ–Ω–∏–∫–∞: {report['student_name']}
üìÖ –î–∞—Ç–∞: {report['lesson_date'].strftime('%d.%m.%Y')}
‚è∞ –í—Ä–µ–º—è: {report['lesson_time']}

‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: {'–î–∞' if report['lesson_held'] else '–ù–µ—Ç'}
üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {'–î–∞' if report['lesson_paid'] else '–ù–µ—Ç'}
üìö –î–ó –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {'–î–∞' if report['homework_done'] else '–ù–µ—Ç'}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {message.text}"""
        
        keyboard = get_report_edit_keyboard(report_id)
        await message.answer(report_text, reply_markup=keyboard)
    
    await state.clear()

# –û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
@router.callback_query(F.data == "cancel_edit")
async def cancel_comment_editing(callback_query: CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è"""
    await callback_query.answer()
    
    data = await state.get_data()  # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    report_id = data.get('editing_report_id')
    await state.clear()
    
    if report_id:
        report = db.get_report_by_id(report_id)
        report_text = f"""üìã –û—Ç—á–µ—Ç —É—á–µ–Ω–∏–∫–∞: {report['student_name']}
üìÖ –î–∞—Ç–∞: {report['lesson_date'].strftime('%d.%m.%Y')}
‚è∞ –í—Ä–µ–º—è: {report['lesson_time']}

‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: {'–î–∞' if report['lesson_held'] else '–ù–µ—Ç'}
üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {'–î–∞' if report['lesson_paid'] else '–ù–µ—Ç'}
üìö –î–ó –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {'–î–∞' if report['homework_done'] else '–ù–µ—Ç'}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {report['student_performance'] or '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}"""
        
        keyboard = get_report_edit_keyboard(report_id)
        await callback_query.message.edit_text(report_text, reply_markup=keyboard)

# –ù–∞–∑–∞–¥ –∫ –æ—Ç—á–µ—Ç–∞–º
@router.callback_query(F.data == "back_to_reports")
async def back_to_reports(callback_query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤"""
    await callback_query.answer()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞—Ç—É –∏–∑ –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    message_text = callback_query.message.text
    if "–î–∞—Ç–∞:" in message_text:
        date_line = [line for line in message_text.split('\n') if '–î–∞—Ç–∞:' in line][0]
        date_str = date_line.split("–î–∞—Ç–∞: ")[1].strip()
        selected_date = datetime.strptime(date_str, "%d.%m.%Y").date()
        
        tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
        reports = db.get_reports_by_date(tutor_id, selected_date)
        
        total_pages = math.ceil(len(reports) / 6)
        keyboard = get_reports_keyboard(reports, page=0, total_pages=total_pages)
        
        await callback_query.message.edit_text(
            f"üìã –û—Ç—á–µ—Ç—ã –∑–∞ {selected_date.strftime('%d.%m.%Y')}:\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )

# –ù–∞–∑–∞–¥ –∫ –¥–∞—Ç–∞–º
@router.callback_query(F.data == "back_to_dates")
async def back_to_dates(callback_query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã"""
    await callback_query.answer()
    
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    dates = db.get_dates_with_reports(tutor_id)
    
    total_pages = math.ceil(len(dates) / 6)
    keyboard = get_dates_keyboard(dates, page=0, total_pages=total_pages)
    
    await callback_query.message.edit_text(
        "üìÖ –í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç—á–µ—Ç–æ–≤:",
        reply_markup=keyboard
    )

# –ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–æ–≤
@router.callback_query(F.data == "back_to_students_menu")
async def back_to_students_menu(callback_query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —É—á–µ–Ω–∏–∫–æ–≤"""
    await callback_query.answer()
    
    keyboard = get_students_menu_keyboard()
    await callback_query.message.edit_text(
        "üë®‚Äçüéì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞–º–∏\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=keyboard
    )

@router.callback_query(F.data.startswith("select_report:"))
async def select_report(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    await callback_query.answer()
    
    try:
        report_id = int(callback_query.data.split(":")[1])
        report = db.get_report_by_id(report_id)
        
        if not report:
            await callback_query.message.answer("–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç—á–µ—Ç–∞ - –∏—Å–ø–æ–ª—å–∑—É–µ–º lesson_time –≤–º–µ—Å—Ç–æ time
        report_text = f"""üìã –û—Ç—á–µ—Ç —É—á–µ–Ω–∏–∫–∞: {report['student_name']}
üìÖ –î–∞—Ç–∞: {report['lesson_date'].strftime('%d.%m.%Y')}
‚è∞ –í—Ä–µ–º—è: {report['lesson_time']}

‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: {'–î–∞' if report['lesson_held'] else '–ù–µ—Ç'}
üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {'–î–∞' if report['lesson_paid'] else '–ù–µ—Ç'}
üìö –î–ó –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {'–î–∞' if report['homework_done'] else '–ù–µ—Ç'}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {report['student_performance'] or '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}"""
        
        keyboard = get_report_edit_keyboard(report_id)
        await callback_query.message.edit_text(report_text, reply_markup=keyboard)
        
    except ValueError:
        await callback_query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
    except Exception as e:
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)