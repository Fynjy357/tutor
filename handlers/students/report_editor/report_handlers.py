# handlers/report_editor/report_handlers.py
import math
from aiogram import Router, F
from aiogram.types import CallbackQuery

from database import db
from .keyboards import get_report_edit_keyboard, get_reports_keyboard
from datetime import datetime

router = Router()

def format_report_text(report):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –æ—Ç—á–µ—Ç–∞"""
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
    lesson_date = report.get('lesson_date', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    if lesson_date and lesson_date != '–ù–µ —É–∫–∞–∑–∞–Ω–æ':
        if isinstance(lesson_date, str):
            # –ï—Å–ª–∏ –¥–∞—Ç–∞ –≤ —Å—Ç—Ä–æ–∫–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
            try:
                lesson_date = datetime.strptime(lesson_date, '%Y-%m-%d').strftime('%d.%m.%Y')
            except:
                pass
        elif hasattr(lesson_date, 'strftime'):
            # –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç date/datetime
            lesson_date = lesson_date.strftime('%d.%m.%Y')
    
    return f"""üìã –û—Ç—á–µ—Ç —É—á–µ–Ω–∏–∫–∞: {report['student_name']}
üìÖ –î–∞—Ç–∞: {lesson_date}
‚è∞ –í—Ä–µ–º—è: {report.get('lesson_time', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}

‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ: {'–î–∞' if report['lesson_held'] else '–ù–µ—Ç'}
üí∞ –û–ø–ª–∞—á–µ–Ω–æ: {'–î–∞' if report['lesson_paid'] else '–ù–µ—Ç'}
üìö –î–ó –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: {'–î–∞' if report['homework_done'] else '–ù–µ—Ç'}
üìù –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—á–µ–Ω–∏–∫—É: {report['student_performance'] or '–ù–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è'}
üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ó–∞–º–µ—Ç–∫–∞ —Ä–æ–¥–∏—Ç–µ–ª—è–º: {report['parent_performance'] or '–ù–µ—Ç –∑–∞–º–µ—Ç–∫–∏'}"""

@router.callback_query(F.data.startswith("select_report:"))
async def select_report(callback_query: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –æ—Ç—á–µ—Ç–∞"""
    await callback_query.answer()
    
    try:
        report_id = int(callback_query.data.split(":")[1])
        report = db.get_report_by_id(report_id)
        
        if not report:
            await callback_query.message.answer("–û—Ç—á–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        report_text = format_report_text(report)
        keyboard = get_report_edit_keyboard(report_id)
        await callback_query.message.edit_text(report_text, reply_markup=keyboard)
        
    except ValueError:
        await callback_query.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞", show_alert=True)
    except Exception as e:
        await callback_query.answer(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {str(e)}", show_alert=True)

@router.callback_query(F.data.startswith("toggle_attendance_"))
async def toggle_attendance(callback_query: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è"""
    await callback_query.answer()
    
    report_id = int(callback_query.data.split("_")[2])
    report = db.get_report_by_id(report_id)
    
    if report:
        new_value = not report['lesson_held']
        db.update_report_attendance(report_id, new_value)
        
        report = db.get_report_by_id(report_id)
        report_text = format_report_text(report)
        keyboard = get_report_edit_keyboard(report_id)
        await callback_query.message.edit_text(report_text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("toggle_payment_"))
async def toggle_payment(callback_query: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –æ–ø–ª–∞—Ç—ã"""
    await callback_query.answer()
    
    report_id = int(callback_query.data.split("_")[2])
    report = db.get_report_by_id(report_id)
    
    if report:
        new_value = not report['lesson_paid']
        db.update_report_payment(report_id, new_value)
        
        report = db.get_report_by_id(report_id)
        report_text = format_report_text(report)
        keyboard = get_report_edit_keyboard(report_id)
        await callback_query.message.edit_text(report_text, reply_markup=keyboard)

@router.callback_query(F.data.startswith("toggle_homework_"))
async def toggle_homework(callback_query: CallbackQuery):
    """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –¥–æ–º–∞—à–Ω–µ–≥–æ –∑–∞–¥–∞–Ω–∏—è"""
    await callback_query.answer()
    
    report_id = int(callback_query.data.split("_")[2])
    report = db.get_report_by_id(report_id)
    
    if report:
        new_value = not report['homework_done']
        db.update_report_homework(report_id, new_value)
        
        report = db.get_report_by_id(report_id)
        report_text = format_report_text(report)
        keyboard = get_report_edit_keyboard(report_id)
        await callback_query.message.edit_text(report_text, reply_markup=keyboard)

@router.callback_query(F.data == "back_to_reports")
async def back_to_reports(callback_query: CallbackQuery):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ —Å–ø–∏—Å–∫—É –æ—Ç—á–µ—Ç–æ–≤"""
    await callback_query.answer()
    
    message_text = callback_query.message.text
    if "–î–∞—Ç–∞:" in message_text:
        date_line = [line for line in message_text.split('\n') if '–î–∞—Ç–∞:' in line][0]
        date_str = date_line.split("–î–∞—Ç–∞: ")[1].strip()
        selected_date = datetime.strptime(date_str, "%d.%m.%Y").date()
        
        tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
        reports = db.get_reports_by_date(tutor_id, selected_date)
        
        total_pages = math.ceil(len(reports) / 6)
        keyboard = get_reports_keyboard(reports, page=0, total_pages=total_pages)
        
        await callback_query.message.edit_text(
            f"üìã –û—Ç—á–µ—Ç—ã –∑–∞ {selected_date.strftime('%d.%m.%Y')}:\n–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç—á–µ—Ç –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:",
            reply_markup=keyboard
        )
