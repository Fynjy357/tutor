# handlers/invitations.py
from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramBadRequest
import logging

from database import db
from handlers.start import cmd_start
from keyboards.students import get_students_menu_keyboard

router = Router()
logger = logging.getLogger(__name__)

def get_invite_keyboard(student_id):
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –º–µ–Ω—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π"""
    keyboard = [
        [InlineKeyboardButton(text="üë§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —É—á–µ–Ω–∏–∫–∞", callback_data=f"invite_student_{student_id}")],
        [InlineKeyboardButton(text="üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Ä–æ–¥–∏—Ç–µ–ª—è", callback_data=f"invite_parent_{student_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —É—á–µ–Ω–∏–∫—É", callback_data=f"back_to_student_{student_id}")]
    ]
    return InlineKeyboardMarkup(inline_keyboard=keyboard)

@router.callback_query(F.data.startswith("invite_student_"))
async def invite_student(callback_query: types.CallbackQuery):
    await callback_query.answer()
    student_id = int(callback_query.data.split("_")[2])
    
    student = db.get_student_by_id(student_id)
    if not student:
        await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not student.get('student_token'):
        token = db.generate_invite_token()
        success = db.update_student_token(student_id, token, 'student')
        if not success:
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞!")
            return
    else:
        token = student['student_token']
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    bot_username = (await callback_query.bot.get_me()).username
    invite_link = f"https://t.me/{bot_username}?start=student_{token}"
    
    await callback_query.message.edit_text(
        f"üë§ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞</b>\n\n"
        f"–£—á–µ–Ω–∏–∫: {student['full_name']}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —É—á–µ–Ω–∏–∫—É:\n"
        f"<code>{invite_link}</code>\n\n"
        f"–£—á–µ–Ω–∏–∫ —Å–º–æ–∂–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ –≤–∞—à–µ–π –±–∞–∑–µ.",
        parse_mode="HTML",
        reply_markup=get_invite_keyboard(student_id)
    )

@router.callback_query(F.data.startswith("invite_parent_"))
async def invite_parent(callback_query: types.CallbackQuery):
    await callback_query.answer()
    student_id = int(callback_query.data.split("_")[2])
    
    student = db.get_student_by_id(student_id)
    if not student:
        await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if not student.get('parent_token'):
        token = db.generate_invite_token()
        success = db.update_student_token(student_id, token, 'parent')
        if not success:
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–æ–∫–µ–Ω–∞!")
            return
    else:
        token = student['parent_token']
    
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    bot_username = (await callback_query.bot.get_me()).username
    invite_link = f"https://t.me/{bot_username}?start=parent_{token}"
    
    await callback_query.message.edit_text(
        f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
        f"–£—á–µ–Ω–∏–∫: {student['full_name']}\n\n"
        f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É —Ä–æ–¥–∏—Ç–µ–ª—é:\n"
        f"<code>{invite_link}</code>\n\n"
        f"–†–æ–¥–∏—Ç–µ–ª—å —Å–º–æ–∂–µ—Ç –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ –≤–∞—à–µ–π –±–∞–∑–µ.",
        parse_mode="HTML",
        reply_markup=get_invite_keyboard(student_id)
    )

@router.message(CommandStart(deep_link=True))
async def handle_deep_link(message: types.Message):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∏–∑ deep link - –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–≤–æ–π—Å—Ç–≤–æ
    args = message.text.split()[1] if len(message.text.split()) > 1 else None
    
    if not args:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç
        await cmd_start(message)
        return
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    if args.startswith('student_') or args.startswith('parent_'):
        invite_type, token = args.split('_', 1)
        
        if invite_type not in ['student', 'parent']:
            await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
            return
        
        # –ù–∞—Ö–æ–¥–∏–º —É—á–µ–Ω–∏–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
        student = db.get_student_by_token(token, invite_type)
        if not student:
            await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        username = message.from_user.username
        if username:
            username = f"@{username}"
        else:
            username = "–Ω–µ —É–∫–∞–∑–∞–Ω"
        
        # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ —É—á–µ–Ω–∏–∫—É
        if invite_type == 'student':
            success = db.update_student_telegram_id(
                student['id'], 
                message.from_user.id, 
                username, 
                'student'
            )
            role = "—É—á–µ–Ω–∏–∫–∞"
            tutor_message = f"‚úÖ –£—á–µ–Ω–∏–∫ {student['full_name']} –ø—Ä–∏–≤—è–∑–∞–ª —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç!"
        else:
            success = db.update_student_telegram_id(
                student['id'], 
                message.from_user.id, 
                username, 
                'parent'
            )
            role = "—Ä–æ–¥–∏—Ç–µ–ª—è"
            tutor_message = f"‚úÖ –†–æ–¥–∏—Ç–µ–ª—å —É—á–µ–Ω–∏–∫–∞ {student['full_name']} –ø—Ä–∏–≤—è–∑–∞–ª —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç!"
        
        if success:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(
                f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫–∞–∫ {role} —É—á–µ–Ω–∏–∫–∞ {student['full_name']}!</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö –∏ —É—Å–ø–µ—Ö–∞—Ö.",
                parse_mode="HTML"
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
            try:
                tutor = db.get_tutor_by_id(student['tutor_id'])
                if tutor and tutor[1]:  # tutor[1] - telegram_id
                    await message.bot.send_message(
                        chat_id=tutor[1],
                        text=tutor_message
                    )
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É: {e}")
        else:
            await message.answer(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞!</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É.",
                parse_mode="HTML"
            )
        return
    
    # –ï—Å–ª–∏ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç
    await cmd_start(message)

    
@router.callback_query(F.data.startswith("back_to_student_"))
async def back_to_student_from_invite(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    student_id = int(callback_query.data.split("_")[3])
    student = db.get_student_by_id(student_id)
    
    if not student:
        await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
    status_text = student['status']
    if student.get('delete_after'):
        status_text = f"{status_text} (–±—É–¥–µ—Ç —É–¥–∞–ª–µ–Ω {student['delete_after']})"
    
    student_tg = f"@{student['student_username']}" if student.get('student_username') else "–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    parent_tg = f"@{student['parent_username']}" if student.get('parent_username') else "–Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω"
    
    text = (
        f"üë§ <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± —É—á–µ–Ω–∏–∫–µ</b>\n\n"
        f"<b>–§–ò–û:</b> {student['full_name']}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {student['phone'] if student['phone'] != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è:</b> {student['parent_phone'] if student['parent_phone'] != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status_text}\n"
        f"<b>–¢–ì —É—á–µ–Ω–∏–∫–∞:</b> {student_tg}\n"
        f"<b>–¢–ì —Ä–æ–¥–∏—Ç–µ–ª—è:</b> {parent_tg}\n"
        f"<b>–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b> {student['created_at']}"
    )
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–æ–º
    keyboard = [
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f"edit_student_{student_id}")],
        [InlineKeyboardButton(text="üì§ –ü—Ä–∏–≥–ª–∞—Å–∏—Ç—å", callback_data=f"invite_{student_id}")],
        [InlineKeyboardButton(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="back_to_students_list")]
    ]
    
    try:
        await callback_query.message.edit_text(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )
    except TelegramBadRequest:
        await callback_query.message.answer(
            text,
            reply_markup=InlineKeyboardMarkup(inline_keyboard=keyboard),
            parse_mode="HTML"
        )

@router.callback_query(F.data == "back_to_students_menu")
async def back_to_students_menu(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    await callback_query.message.edit_text(
        "üë• <b>–£—á–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞—à–∏–º–∏ —É—á–µ–Ω–∏–∫–∞–º–∏: –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã—Ö, "
        "–ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö.",
        reply_markup=get_students_menu_keyboard(),
        parse_mode="HTML"
    )