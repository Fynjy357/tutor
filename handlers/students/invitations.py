# handlers/students/invitations.py
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
import logging
import re

from .keyboards import get_invite_keyboard, get_student_detail_keyboard
from .utils import format_student_info, get_students_stats
from handlers.students.keyboards_student import get_students_pagination_keyboard, get_students_menu_keyboard
from database import db


router = Router()
logger = logging.getLogger(__name__)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ invite_—á–∏—Å–ª–æ (–∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
INVITE_PATTERN = re.compile(r'^invite_(\d+)$')

@router.callback_query(F.data.regexp(INVITE_PATTERN))
async def invite_menu(callback_query: types.CallbackQuery):
    """–ú–µ–Ω—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞ (–∏–∑ –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏)"""
    await callback_query.answer()
    
    try:
        match = INVITE_PATTERN.match(callback_query.data)
        if not match:
            return
            
        student_id = int(match.group(1))
        student = db.get_student_by_id(student_id)
        
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await callback_query.message.edit_text(
            f"üë§ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è {student['full_name']}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å:",
            parse_mode="HTML",
            reply_markup=get_invite_keyboard(student_id)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ invite_menu: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞ –∏ —Ä–æ–¥–∏—Ç–µ–ª—è
@router.callback_query(F.data.startswith("invite_student_") | F.data.startswith("invite_parent_"))
async def handle_invite(callback_query: types.CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –∏–ª–∏ —Ä–æ–¥–∏—Ç–µ–ª—è"""
    await callback_query.answer()
    
    try:
        parts = callback_query.data.split("_")
        if len(parts) < 3:
            await callback_query.message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞!")
            return
            
        invite_type = parts[1]  # student –∏–ª–∏ parent
        student_id = int(parts[2])
        
        student = db.get_student_by_id(student_id)
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        token = db.generate_invite_token()
        if db.update_student_token(student_id, token, invite_type):
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            bot_username = (await callback_query.bot.get_me()).username
            invite_link = f"https://t.me/{bot_username}?start={invite_type}_{token}"
            
            
            user_type = "—É—á–µ–Ω–∏–∫–∞" if invite_type == "student" else "—Ä–æ–¥–∏—Ç–µ–ª—è"
            user_type1 = "—É—á–µ–Ω–∏–∫—É" if invite_type == "student" else "—Ä–æ–¥–∏—Ç–µ–ª—é"
            user_type2 = "—É—á–µ–Ω–∏–∫" if invite_type == "student" else "—Ä–æ–¥–∏—Ç–µ–ª—å"
            user_type3 = f"""
    - –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–µ–º –∑–∞–Ω—è—Ç–∏–∏ –∑–∞ 24 —á–∞—Å–∞ —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏–µ;
    - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –Ω–µ–≤—ã–ø–æ–ª–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã;
    - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è;
    - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≥—Ä–∞—Ñ–∏–∫ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É –Ω–µ–≥–æ –∑–∞–Ω—è—Ç–∏–π;
    - —É–≤–µ–¥–æ–º–ª—è—Ç—å –æ –ø–µ—Ä–µ–Ω–æ—Å–µ –∏–ª–∏ –æ–± –æ—Ç–º–µ–Ω–µ –∑–∞–Ω—è—Ç–∏—è.
    """ if invite_type == "student" else f"""
    - –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã –æ –ø—Ä–æ—à–µ–¥—à–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö;
    - –ø—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–≤—ã–ø–æ–ª–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã —Ä–µ–±–µ–Ω–∫–∞;
    - –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è;
    - –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –Ω–∞ —Å–≤—è–∑–∏ —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º.
    """
            await callback_query.message.edit_text(
                f"‚úÖ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è {user_type} —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
                f"üë§ –£—á–µ–Ω–∏–∫: {student['full_name']}\n\n"
                f"üîó –°—Å—ã–ª–∫–∞:\n <code>{invite_link}</code>\n\n"
                "<b>–ü—Ä–æ—Å—Ç–æ –æ–¥–∏–Ω —Ä–∞–∑ –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ —Å—Å—ã–ª–∫—É, –Ω–µ —É–¥–µ—Ä–∂–∏–≤–∞—è –µ—ë,</b> –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–æ–ø–∏—Ä—É–µ—Ç—Å—è.\n"
                f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ –µ—ë {user_type1}.\n"
                f"–ö–æ–≥–¥–∞ {user_type2} –ø–µ—Ä–µ–π–¥–µ—Ç –ø–æ —Å—Å—ã–ª–∫–µ, –æ–Ω –±—É–¥–µ—Ç –∫ –≤–∞–º –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω, –∏ —Å–º–æ–∂–µ—Ç:\n"
                f"{user_type3}",
                parse_mode="HTML",
                reply_markup=get_invite_keyboard(student_id)
            )
        else:
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!",
                reply_markup=get_invite_keyboard(student_id)
            )
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ handle_invite: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É—á–µ–Ω–∏–∫—É –∏–∑ –º–µ–Ω—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
@router.callback_query(F.data.startswith("back_to_student_"))
async def back_to_student_from_invite(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[3])
        student = db.get_student_by_id(student_id)
        
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text = format_student_info(student)
        
        try:
            await callback_query.message.edit_text(
                text,
                reply_markup=get_student_detail_keyboard(student_id),
                parse_mode="HTML"
            )
        except TelegramBadRequest:
            await callback_query.message.answer(
                text,
                reply_markup=get_student_detail_keyboard(student_id),
                parse_mode="HTML"
            )
            
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_student_from_invite: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —É—á–µ–Ω–∏–∫–æ–≤
@router.callback_query(F.data == "back_to_students_list")
async def back_to_students_list(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    
    if not tutor_id:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.")
        return
    
    students = db.get_students_by_tutor(tutor_id)
    
    if not students:
        await callback_query.message.edit_text(
            "üìù <b>–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø—É—Å—Ç</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.",
            reply_markup=get_students_menu_keyboard(),
            parse_mode="HTML"
        )
        return
    
    text = "üë• <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤</b>\n\n" + get_students_stats(students)
    
    try:
        await callback_query.message.edit_text(
            text,
            reply_markup=get_students_pagination_keyboard(students, page=0),
            parse_mode="HTML"
        )
    except TelegramBadRequest:
        await callback_query.message.answer(
            text,
            reply_markup=get_students_pagination_keyboard(students, page=0),
            parse_mode="HTML"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤
@router.callback_query(F.data.startswith("students_page_"))
async def students_list_page(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    page = int(callback_query.data.split("_")[2])
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    
    if not tutor_id:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.")
        return
    
    students = db.get_students_by_tutor(tutor_id)
    text = "üë• <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤</b>\n\n" + get_students_stats(students)
    
    await callback_query.message.edit_text(
        text,
        reply_markup=get_students_pagination_keyboard(students, page=page),
        parse_mode="HTML"
    )