# handlers/students/invitations.py
from aiogram import Router, types, F
from aiogram.filters import CommandStart
from aiogram.fsm.context import FSMContext
from aiogram.exceptions import TelegramBadRequest
import logging
import re

from handlers.start import cmd_start

from .keyboards import get_invite_keyboard, get_student_detail_keyboard
from .utils import format_student_info, get_students_stats
from keyboards.students import get_students_menu_keyboard, get_students_list_keyboard
from database import db

router = Router()
logger = logging.getLogger(__name__)

# –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞ invite_—á–∏—Å–ª–æ
INVITE_PATTERN = re.compile(r'^invite_(\d+)$')

@router.callback_query(F.data.regexp(INVITE_PATTERN))
async def invite_menu(callback_query: types.CallbackQuery):
    """–ú–µ–Ω—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    await callback_query.answer()
    
    try:
        match = INVITE_PATTERN.match(callback_query.data)
        if not match:
            return
            
        student_id = int(match.group(1))
        student = db.get_student_by_id(student_id)
        
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await callback_query.message.edit_text(
            f"üë§ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è {student['full_name']}</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, –∫–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å:",
            parse_mode="HTML",
            reply_markup=get_invite_keyboard(student_id)
        )
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ invite_menu: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")

@router.callback_query(F.data.startswith("generate_invite_"))
async def generate_invite(callback_query: types.CallbackQuery):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"""
    await callback_query.answer()
    
    try:
        parts = callback_query.data.split("_")
        if len(parts) < 4:
            await callback_query.message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–∞–ø—Ä–æ—Å–∞!")
            return
            
        student_id = int(parts[2])
        invite_type = parts[3]  # student –∏–ª–∏ parent
        
        student = db.get_student_by_id(student_id)
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
        token = db.generate_invite_token()
        if db.update_student_token(student_id, token, invite_type):
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            bot_username = (await callback_query.bot.get_me()).username
            invite_link = f"https://t.me/{bot_username}?start=invite_{invite_type}_{token}"
            
            user_type = "—É—á–µ–Ω–∏–∫–∞" if invite_type == "student" else "—Ä–æ–¥–∏—Ç–µ–ª—è"
            await callback_query.message.edit_text(
                f"‚úÖ <b>–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –¥–ª—è {user_type} —Å–æ–∑–¥–∞–Ω–æ!</b>\n\n"
                f"üë§ –£—á–µ–Ω–∏–∫: {student['full_name']}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {invite_link}\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. "
                "–ü—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –ø–æ —Å—Å—ã–ª–∫–µ –∞–∫–∫–∞—É–Ω—Ç –±—É–¥–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏–≤—è–∑–∞–Ω –∫ —É—á–µ–Ω–∏–∫—É.",
                parse_mode="HTML",
                reply_markup=get_invite_keyboard(student_id)
            )
        else:
            await callback_query.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è!",
                reply_markup=get_invite_keyboard(student_id)
            )
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ generate_invite: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —É—á–µ–Ω–∏–∫—É –∏–∑ –º–µ–Ω—é –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
@router.callback_query(F.data.startswith("back_to_student_"))
async def back_to_student_from_invite(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[3])
        student = db.get_student_by_id(student_id)
        
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        text = format_student_info(student)
        
        try:
            await callback_query.message.edit_text(
                text,
                reply_markup=get_student_detail_keyboard(student_id),
                parse_mode="HTML"
            )
        except TelegramBadRequest:
            await callback_query.message.answer(
                text,
                reply_markup=get_student_detail_keyboard(student_id),
                parse_mode="HTML"
            )
            
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ back_to_student_from_invite: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∫ —Å–ø–∏—Å–∫—É —É—á–µ–Ω–∏–∫–æ–≤
@router.callback_query(F.data == "back_to_students_list")
async def back_to_students_list(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    
    if not tutor_id:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.")
        return
    
    students = db.get_students_by_tutor(tutor_id)
    
    if not students:
        await callback_query.message.edit_text(
            "üìù <b>–°–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ –ø—É—Å—Ç</b>\n\n"
            "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.",
            reply_markup=get_students_menu_keyboard(),
            parse_mode="HTML"
        )
        return
    
    text = "üë• <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤</b>\n\n" + get_students_stats(students)
    
    try:
        await callback_query.message.edit_text(
            text,
            reply_markup=get_students_list_keyboard(students, page=0),
            parse_mode="HTML"
        )
    except TelegramBadRequest:
        await callback_query.message.answer(
            text,
            reply_markup=get_students_list_keyboard(students, page=0),
            parse_mode="HTML"
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü —Å–ø–∏—Å–∫–∞ —É—á–µ–Ω–∏–∫–æ–≤
@router.callback_query(F.data.startswith("students_page_"))
async def students_list_page(callback_query: types.CallbackQuery):
    await callback_query.answer()
    
    page = int(callback_query.data.split("_")[2])
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    
    if not tutor_id:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞.")
        return
    
    students = db.get_students_by_tutor(tutor_id)
    text = "üë• <b>–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤</b>\n\n" + get_students_stats(students)
    
    await callback_query.message.edit_text(
        text,
        reply_markup=get_students_list_keyboard(students, page=page),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å—Ç–∞—Ä—Ç–æ–≤–æ–π –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ–º
@router.message(CommandStart(deep_link=True))
async def handle_deep_link(message: types.Message):
    logger.info("=== DEEP LINK HANDLER STARTED ===")
    logger.info(f"–ü–æ–ª–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {message.from_user.id} @{message.from_user.username}")
    
    # –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
    args = message.text.split()
    if len(args) < 2:
        logger.warning("–ù–µ—Ç –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –≤ deep link")
        await cmd_start(message)
        return
    
    deep_link_args = args[1]
    logger.info(f"–ê—Ä–≥—É–º–µ–Ω—Ç—ã deep link: {deep_link_args}")
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω—ã–µ —Å—Å—ã–ª–∫–∏
    if deep_link_args.startswith('student_') or deep_link_args.startswith('parent_'):
        try:
            parts = deep_link_args.split('_', 1)
            if len(parts) < 2:
                logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç deep link")
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
                return
                
            invite_type, token = parts
            logger.info(f"–¢–∏–ø –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {invite_type}, –¢–æ–∫–µ–Ω: {token}")
            
            if invite_type not in ['student', 'parent']:
                logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: {invite_type}")
                await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
                return
            
            # –ù–∞—Ö–æ–¥–∏–º —É—á–µ–Ω–∏–∫–∞ –ø–æ —Ç–æ–∫–µ–Ω—É
            student = db.get_student_by_token(token, invite_type)
            logger.info(f"–ù–∞–π–¥–µ–Ω —É—á–µ–Ω–∏–∫: {student is not None}")
            
            if not student:
                logger.error(f"–£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ —Ç–æ–∫–µ–Ω—É: {token}")
                await message.answer("‚ùå –°—Å—ã–ª–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–ª–∞.")
                return
            
            logger.info(f"–î–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞: ID={student['id']}, Name={student['full_name']}")
            
            # –ü–æ–ª—É—á–∞–µ–º username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username = f"@{message.from_user.username}" if message.from_user.username else "–Ω–µ —É–∫–∞–∑–∞–Ω"
            logger.info(f"Username –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {username}")
            
            # –ü—Ä–∏–≤—è–∑—ã–≤–∞–µ–º Telegram –∞–∫–∫–∞—É–Ω—Ç –∫ —É—á–µ–Ω–∏–∫—É
            if invite_type == 'student':
                success = db.update_student_telegram_id(
                    student['id'], 
                    message.from_user.id, 
                    username, 
                    'student'
                )
                role = "—É—á–µ–Ω–∏–∫–∞"
                tutor_message = f"‚úÖ –£—á–µ–Ω–∏–∫ {student['full_name']} –ø—Ä–∏–≤—è–∑–∞–ª —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç!"
            else:
                success = db.update_student_telegram_id(
                    student['id'], 
                    message.from_user.id, 
                    username, 
                    'parent'
                )
                role = "—Ä–æ–¥–∏—Ç–µ–ª—è"
                tutor_message = f"‚úÖ –†–æ–¥–∏—Ç–µ–ª—å —É—á–µ–Ω–∏–∫–∞ {student['full_name']} –ø—Ä–∏–≤—è–∑–∞–ª —Å–≤–æ–π Telegram –∞–∫–∫–∞—É–Ω—Ç!"
            
            logger.info(f"–ü—Ä–∏–≤—è–∑–∫–∞ –∞–∫–∫–∞—É–Ω—Ç–∞: {success}")
            
            if success:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await message.answer(
                    f"‚úÖ <b>–í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω—ã –∫–∞–∫ {role} —É—á–µ–Ω–∏–∫–∞ {student['full_name']}!</b>\n\n"
                    f"–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö –∏ —É—Å–ø–µ—Ö–∞—Ö.",
                    parse_mode="HTML"
                )
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É
                try:
                    tutor = db.get_tutor_by_id(student['tutor_id'])
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä: {tutor is not None}")
                    if tutor and tutor[1]:  # tutor[1] - telegram_id
                        await message.bot.send_message(
                            chat_id=tutor[1],
                            text=tutor_message
                        )
                        logger.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É: {tutor[1]}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É: {e}")
            else:
                await message.answer(
                    "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–≤—è–∑–∫–µ –∞–∫–∫–∞—É–Ω—Ç–∞!</b>\n\n"
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É.",
                    parse_mode="HTML"
                )
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ deep link: {e}")
            await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è.")
    
    else:
        logger.info("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç deep link, –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Å—Ç–∞—Ä—Ç")
        await cmd_start(message)
    
    logger.info("=== DEEP LINK HANDLER FINISHED ===")