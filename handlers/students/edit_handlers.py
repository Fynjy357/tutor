# handlers/students/edit_handlers.py
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
import logging

from handlers.students.keyboards import get_student_detail_keyboard

from .states import EditStudentStates
from keyboards.students_edit import get_edit_student_keyboard, get_status_keyboard, get_cancel_edit_keyboard
from .utils import format_student_info
from database import db

router = Router()
logger = logging.getLogger(__name__)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("edit_student_"))
async def edit_student_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[2])
        student = db.get_student_by_id(student_id)
        
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await state.update_data(student_id=student_id)
        await state.set_state(EditStudentStates.waiting_for_edit_choice)
        
        await callback_query.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞</b>\n\n"
            f"üë§ {student['full_name']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            parse_mode="HTML",
            reply_markup=get_edit_student_keyboard(student_id)
        )
            
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_student_start: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§–ò–û
@router.callback_query(F.data.startswith("edit_name_"))
async def edit_name_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[2])
        student = db.get_student_by_id(student_id)
        
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await state.update_data(student_id=student_id)
        await state.set_state(EditStudentStates.waiting_for_name)
        await callback_query.message.edit_text(
            f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –§–ò–û: {student['full_name']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û —É—á–µ–Ω–∏–∫–∞:",
            parse_mode="HTML",
            reply_markup=get_cancel_edit_keyboard(student_id)
        )
            
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –§–ò–û
@router.message(EditStudentStates.waiting_for_name)
async def process_edit_name(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    if not message.text or len(message.text.strip()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û —É—á–µ–Ω–∏–∫–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):")
        return
    
    data = await state.get_data()
    student_id = data['student_id']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = db.update_student_field(student_id, 'full_name', message.text.strip())
    
    if success:
        await message.answer(
            f"‚úÖ <b>–§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
            f"–ù–æ–≤–æ–µ –§–ò–û: {message.text.strip()}",
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ
        student = db.get_student_by_id(student_id)
        text = format_student_info(student)
        
        await message.answer(
            text,
            reply_markup=get_student_detail_keyboard(student_id),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –§–ò–û!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—á–µ–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("edit_phone_"))
async def edit_phone_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[2])
        student = db.get_student_by_id(student_id)
        
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await state.update_data(student_id=student_id)
        await state.set_state(EditStudentStates.waiting_for_phone)
        
        current_phone = student['phone'] if student['phone'] != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        
        await callback_query.message.edit_text(
            f"üìû <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—á–µ–Ω–∏–∫–∞</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: {current_phone}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —É—á–µ–Ω–∏–∫–∞ (–∏–ª–∏ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):",
            parse_mode="HTML",
            reply_markup=get_cancel_edit_keyboard(student_id)
        )
            
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—á–µ–Ω–∏–∫–∞
@router.message(EditStudentStates.waiting_for_phone)
async def process_edit_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip() if message.text else "-"
    
    data = await state.get_data()
    student_id = data['student_id']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = db.update_student_field(student_id, 'phone', phone)
    
    if success:
        phone_display = phone if phone != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        await message.answer(
            f"‚úÖ <b>–¢–µ–ª–µ—Ñ–æ–Ω —É—á–µ–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"–ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {phone_display}",
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ
        student = db.get_student_by_id(student_id)
        text = format_student_info(student)
        
        await message.answer(
            text,
            reply_markup=get_student_detail_keyboard(student_id),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
@router.callback_query(F.data.startswith("edit_parent_phone_"))
async def edit_parent_phone_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[3])
        student = db.get_student_by_id(student_id)
        
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await state.update_data(student_id=student_id)
        await state.set_state(EditStudentStates.waiting_for_parent_phone)
        
        current_phone = student['parent_phone'] if student['parent_phone'] != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        
        await callback_query.message.edit_text(
            f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è: {current_phone}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è (–∏–ª–∏ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):",
            parse_mode="HTML",
            reply_markup=get_cancel_edit_keyboard(student_id)
        )
            
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
@router.message(EditStudentStates.waiting_for_parent_phone)
async def process_edit_parent_phone(message: types.Message, state: FSMContext):
    parent_phone = message.text.strip() if message.text else "-"
    
    data = await state.get_data()
    student_id = data['student_id']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = db.update_student_field(student_id, 'parent_phone', parent_phone)
    
    if success:
        phone_display = parent_phone if parent_phone != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        await message.answer(
            f"‚úÖ <b>–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"–ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è: {phone_display}",
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ
        student = db.get_student_by_id(student_id)
        text = format_student_info(student)
        
        await message.answer(
            text,
            reply_markup=get_student_detail_keyboard(student_id),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
@router.callback_query(F.data.startswith("edit_status_"))
async def edit_status_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[2])
        student = db.get_student_by_id(student_id)
        
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await state.update_data(student_id=student_id)
        
        status_emoji = {
            'active': '‚úÖ',
            'paused': '‚è∏Ô∏è', 
            'inactive': '‚ùå'
        }.get(student['status'].lower(), '‚ùì')
        
        await callback_query.message.edit_text(
            f"üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_emoji} {student['status']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
            parse_mode="HTML",
            reply_markup=get_status_keyboard(student_id)
        )
            
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
@router.callback_query(F.data.startswith("set_status_"))
async def set_status(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    try:
        parts = callback_query.data.split("_")
        status = parts[2]  # active, paused, inactive
        student_id = int(parts[3])
        
        status_map = {
            'active': 'active',
            'paused': 'paused',
            'inactive': 'inactive'
        }
        
        if status not in status_map:
            await callback_query.message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = db.update_student_field(student_id, 'status', status_map[status])
        
        if success:
            status_emoji = {
                'active': '‚úÖ',
                'paused': '‚è∏Ô∏è',
                'inactive': '‚ùå'
            }[status]
            
            await callback_query.message.edit_text(
                f"‚úÖ <b>–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
                f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_emoji} {status_map[status]}",
                parse_mode="HTML"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ
            student = db.get_student_by_id(student_id)
            text = format_student_info(student)
            
            await callback_query.message.answer(
                text,
                reply_markup=get_student_detail_keyboard(student_id),
                parse_mode="HTML"
            )
        else:
            await callback_query.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞!</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
            
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_status: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    
    await state.clear()