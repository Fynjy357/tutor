# handlers/students/edit_handlers.py
from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
import logging

from handlers.students.keyboards import get_student_detail_keyboard

from .states import EditStudentStates
from keyboards.students_edit import get_edit_student_keyboard, get_status_keyboard, get_cancel_edit_keyboard
from .utils import format_student_info
from database import db

router = Router()
logger = logging.getLogger(__name__)


@router.callback_query(F.data.regexp(r"^edit_student_\d+$"))
async def edit_student_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[-1])
        student = db.get_student_by_id(student_id)
        
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await state.update_data(student_id=student_id)
        await state.set_state(EditStudentStates.waiting_for_edit_choice)
        
        await callback_query.message.edit_text(
            f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞</b>\n\n"
            f"üë§ {student['full_name']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
            parse_mode="HTML",
            reply_markup=get_edit_student_keyboard(student_id)
        )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_student_start: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

# –ø—Ä–∏—à–ª–æ—Å—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥, —Å—Ç–∞—Ä—ã–π –æ—Å—Ç–∞–≤–∏–ª –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –Ω–æ —Å–æ —Å—Ç–∞—Ä—ã–º –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –æ—Ç—á–µ—Ç–∞
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
# @router.callback_query(F.data.startswith("edit_student_"))
# async def edit_student_start(callback_query: types.CallbackQuery, state: FSMContext):
#     await callback_query.answer()
    
#     try:
#         student_id = int(callback_query.data.split("_")[2])
#         student = db.get_student_by_id(student_id)
        
#         if not student:
#             await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
#             return
        
#         await state.update_data(student_id=student_id)
#         await state.set_state(EditStudentStates.waiting_for_edit_choice)
        
#         await callback_query.message.edit_text(
#             f"‚úèÔ∏è <b>–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É—á–µ–Ω–∏–∫–∞</b>\n\n"
#             f"üë§ {student['full_name']}\n\n"
#             "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
#             parse_mode="HTML",
#             reply_markup=get_edit_student_keyboard(student_id)
#         )
            
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ edit_student_start: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –§–ò–û
@router.callback_query(F.data.startswith("edit_name_"))
async def edit_name_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[2])
        student = db.get_student_by_id(student_id)
        
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await state.update_data(student_id=student_id)
        await state.set_state(EditStudentStates.waiting_for_name)
        await callback_query.message.edit_text(
            f"‚úèÔ∏è <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –§–ò–û</b>\n\n"
            f"–¢–µ–∫—É—â–µ–µ –§–ò–û: {student['full_name']}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –§–ò–û —É—á–µ–Ω–∏–∫–∞:",
            parse_mode="HTML",
            reply_markup=get_cancel_edit_keyboard(student_id)
        )
            
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ –§–ò–û
@router.message(EditStudentStates.waiting_for_name)
async def process_edit_name(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logger.info(f"–¢–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ: {current_state}")
    if not message.text or len(message.text.strip()) < 2:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –§–ò–û —É—á–µ–Ω–∏–∫–∞ (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞):")
        return
    
    data = await state.get_data()
    student_id = data['student_id']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –§–ò–û –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = db.update_student_field(student_id, 'full_name', message.text.strip())
    
    if success:
        await message.answer(
            f"‚úÖ <b>–§–ò–û —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ!</b>\n\n"
            f"–ù–æ–≤–æ–µ –§–ò–û: {message.text.strip()}",
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ
        student = db.get_student_by_id(student_id)
        text = format_student_info(student)
        
        await message.answer(
            text,
            reply_markup=get_student_detail_keyboard(student_id),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –§–ò–û!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—á–µ–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("edit_phone_"))
async def edit_phone_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[2])
        student = db.get_student_by_id(student_id)
        
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await state.update_data(student_id=student_id)
        await state.set_state(EditStudentStates.waiting_for_phone)
        
        current_phone = student['phone'] if student['phone'] != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        
        await callback_query.message.edit_text(
            f"üìû <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—á–µ–Ω–∏–∫–∞</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω: {current_phone}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —É—á–µ–Ω–∏–∫–∞ (–∏–ª–∏ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):",
            parse_mode="HTML",
            reply_markup=get_cancel_edit_keyboard(student_id)
        )
            
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É—á–µ–Ω–∏–∫–∞
@router.message(EditStudentStates.waiting_for_phone)
async def process_edit_phone(message: types.Message, state: FSMContext):
    phone = message.text.strip() if message.text else "-"
    
    data = await state.get_data()
    student_id = data['student_id']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = db.update_student_field(student_id, 'phone', phone)
    
    if success:
        phone_display = phone if phone != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        await message.answer(
            f"‚úÖ <b>–¢–µ–ª–µ—Ñ–æ–Ω —É—á–µ–Ω–∏–∫–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"–ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω: {phone_display}",
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ
        student = db.get_student_by_id(student_id)
        text = format_student_info(student)
        
        await message.answer(
            text,
            reply_markup=get_student_detail_keyboard(student_id),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
    
    await state.clear()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
@router.callback_query(F.data.startswith("edit_parent_phone_"))
async def edit_parent_phone_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[3])
        student = db.get_student_by_id(student_id)
        
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await state.update_data(student_id=student_id)
        await state.set_state(EditStudentStates.waiting_for_parent_phone)
        
        current_phone = student['parent_phone'] if student['parent_phone'] != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        
        await callback_query.message.edit_text(
            f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è: {current_phone}\n\n"
            "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è (–∏–ª–∏ '-' —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å):",
            parse_mode="HTML",
            reply_markup=get_cancel_edit_keyboard(student_id)
        )
            
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –Ω–æ–≤–æ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è
@router.message(EditStudentStates.waiting_for_parent_phone)
async def process_edit_parent_phone(message: types.Message, state: FSMContext):
    parent_phone = message.text.strip() if message.text else "-"
    
    data = await state.get_data()
    student_id = data['student_id']
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = db.update_student_field(student_id, 'parent_phone', parent_phone)
    
    if success:
        phone_display = parent_phone if parent_phone != '-' else '–Ω–µ —É–∫–∞–∑–∞–Ω'
        await message.answer(
            f"‚úÖ <b>–¢–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
            f"–ù–æ–≤—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω —Ä–æ–¥–∏—Ç–µ–ª—è: {phone_display}",
            parse_mode="HTML"
        )
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ
        student = db.get_student_by_id(student_id)
        text = format_student_info(student)
        
        await message.answer(
            text,
            reply_markup=get_student_detail_keyboard(student_id),
            parse_mode="HTML"
        )
    else:
        await message.answer(
            "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —Ä–æ–¥–∏—Ç–µ–ª—è!</b>\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
            parse_mode="HTML"
        )
    
    await state.clear()


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
async def handle_status_change(student_id: int, new_status: str):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É—á–µ–Ω–∏–∫–∞"""
    try:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —É—á–µ–Ω–∏–∫–∞
        success = db.update_student_status(student_id, new_status)
        
        if not success:
            return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞"
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å —Å—Ç–∞–ª –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º - –ø–æ–ª–Ω–∞—è –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è
        if new_status.lower() == 'inactive':
            result = db.deactivate_student_completely(student_id)
            
            if 'error' in result:
                return False, f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏–∏: {result['error']}"
            
            message = f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π'\n"
            
            if result['groups_removed'] > 0:
                message += f"üë• –£–¥–∞–ª–µ–Ω –∏–∑ –≥—Ä—É–ø–ø: {result['groups_removed']}\n"
            
            if result['future_lessons_deleted'] > 0:
                message += f"üìÖ –£–¥–∞–ª–µ–Ω–æ –±—É–¥—É—â–∏—Ö –∑–∞–Ω—è—Ç–∏–π: {result['future_lessons_deleted']}\n"
            
            if result['planner_actions_deactivated'] > 0:
                message += f"üìã –î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π: {result['planner_actions_deactivated']}\n"
            
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–¥–∞–ª—è–ª–æ—Å—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–ª–æ—Å—å
            if not any([result['groups_removed'], result['future_lessons_deleted'], result['planner_actions_deactivated']]):
                message += "‚ÑπÔ∏è –ù–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è"
            
            return True, message.strip()
        
        return True, f"‚úÖ –°—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_status}'"
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞: {e}")
        return False, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞"





# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞
@router.callback_query(F.data.startswith("edit_status_"))
async def edit_status_start(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[2])
        student = db.get_student_by_id(student_id)
        
        if not student:
            await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
            return
        
        await state.update_data(student_id=student_id)
        
        status_emoji = {
            'active': '‚úÖ',
            'paused': '‚è∏Ô∏è', 
            'inactive': '‚ùå'
        }.get(student['status'].lower(), '‚ùì')
        
        await callback_query.message.edit_text(
            f"üìä <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status_emoji} {student['status']}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:",
            parse_mode="HTML",
            reply_markup=get_status_keyboard(student_id)
        )
            
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")

@router.callback_query(F.data.startswith("status_"))
async def process_status_selection(callback_query: types.CallbackQuery, state: FSMContext):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—ã–±–æ—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ (active/paused/inactive)"""
    await callback_query.answer()
    
    try:
        # –ü–∞—Ä—Å–∏–º –¥–∞–Ω–Ω—ã–µ –∏–∑ callback: status_{status}_{student_id}
        parts = callback_query.data.split("_")
        if len(parts) < 3:
            await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞–Ω–Ω—ã—Ö!")
            return
        
        status = parts[1]  # active, paused, inactive
        student_id = int(parts[2])  # ID —É—á–µ–Ω–∏–∫–∞
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –ù–ï –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –æ–±—ã—á–Ω–æ
        if status != "inactive":
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–º–µ–Ω—É —Å—Ç–∞—Ç—É—Å–∞
            success, message = await handle_status_change(student_id, status)
            
            if success:
                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —ç–º–æ–¥–∑–∏ –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞
                status_emoji = {
                    'active': '‚úÖ',
                    'paused': '‚è∏Ô∏è', 
                    'inactive': '‚ùå'
                }.get(status.lower(), '‚ùì')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                final_message = f"{message}\n\n–°—Ç–∞—Ç—É—Å: {status_emoji} {status.capitalize()}"
                
                await callback_query.message.edit_text(
                    final_message,
                    parse_mode="HTML",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[[
                            types.InlineKeyboardButton(
                                text="üîô –ù–∞–∑–∞–¥ –∫ —É—á–µ–Ω–∏–∫—É",
                                callback_data=f"student_{student_id}"
                            )
                        ]]
                    )
                )
            else:
                # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
                await callback_query.message.edit_text(
                    message,
                    parse_mode="HTML",
                    reply_markup=types.InlineKeyboardMarkup(
                        inline_keyboard=[[
                            types.InlineKeyboardButton(
                                text="üîô –ù–∞–∑–∞–¥",
                                callback_data=f"edit_status_{student_id}"
                            )
                        ]]
                    )
                )
        
        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—É—Å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
        else:
            student = db.get_student_by_id(student_id)
            
            if not student:
                await callback_query.message.edit_text("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω!")
                return
            
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            keyboard = [
                [
                    types.InlineKeyboardButton(
                        text="‚úÖ –î–∞, —Å–¥–µ–ª–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º",
                        callback_data=f"confirm_inactive_{student_id}"
                    )
                ],
                [
                    types.InlineKeyboardButton(
                        text="‚ùå –û—Ç–º–µ–Ω–∞", 
                        callback_data=f"edit_status_{student_id}"
                    )
                ]
            ]
            markup = types.InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            await callback_query.message.edit_text(
                f"‚ö†Ô∏è <b>–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ</b>\n\n"
                f"–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å —É—á–µ–Ω–∏–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–º?\n\n"
                f"üë§ <b>{student['full_name']}</b>\n\n"
                f"üìû {student.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n\n"
                f"<i>–ü—Ä–∏ –ø–µ—Ä–µ–≤–æ–¥–µ —É—á–µ–Ω–∏–∫–∞ –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–∏–∑–æ–π–¥—É—Ç —Å–ª–µ–¥—É—é—â–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:\n\n"
                f"üìã –û—Å–Ω–æ–≤–Ω–æ–π —Å–ø–∏—Å–æ–∫: –£—á–µ–Ω–∏–∫ –±—É–¥–µ—Ç —Å–∫—Ä—ã—Ç –∏–∑ –≤–∞—à–µ–≥–æ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞.\n"
                f"üóìÔ∏è –ó–∞–Ω—è—Ç–∏—è: –í—Å–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∏ —Å –Ω–∏–º –±—É–¥—É—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —É–¥–∞–ª–µ–Ω—ã.\n"
                f"üë• –ì—Ä—É–ø–ø—ã: –£—á–µ–Ω–∏–∫ –±—É–¥–µ—Ç –∏—Å–∫–ª—é—á–µ–Ω –∏–∑ –≤—Å–µ—Ö –≥—Ä—É–ø–ø.\n"
                f"üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –£—á–µ–Ω–∏–∫ –ø–µ—Ä–µ—Å—Ç–∞–Ω–µ—Ç –ø–æ–ª—É—á–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –∑–∞–Ω—è—Ç–∏—è—Ö.\n"
                f"üë§ –î–æ—Å—Ç—É–ø: –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–æ–ø–∞–¥–µ—Ç –∏–∑ –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ —É—á–µ–Ω–∏–∫–∞.\n\n"
                f"–ù–µ –≤–æ–ª–Ω—É–π—Ç–µ—Å—å, –≤—Å–µ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—Ç—Å—è! –í—ã —Å–º–æ–∂–µ—Ç–µ –Ω–∞–π—Ç–∏ —É—á–µ–Ω–∏–∫–∞ –≤ —Ä–∞–∑–¥–µ–ª–µ ¬´–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–µ–Ω–∏–∫–∏¬ª –∏ –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –≤–µ—Ä–Ω—É—Ç—å –µ–≥–æ –∫ –∞–∫—Ç–∏–≤–Ω–æ–π —Ä–∞–±–æ—Ç–µ, –≤–æ–∑–æ–±–Ω–æ–≤–∏–≤ –∑–∞–Ω—è—Ç–∏—è.</i>",
                parse_mode="HTML",
                reply_markup=markup
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="students_list"
                    )
                ]]
            )
        )
# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å—Ç–∞—Ç—É—Å–∞
@router.callback_query(F.data.startswith("set_status_"))
async def set_status(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.answer()
    
    try:
        parts = callback_query.data.split("_")
        status = parts[2]  # active, paused, inactive
        student_id = int(parts[3])
        
        status_map = {
            'active': 'active',
            'paused': 'paused',
            'inactive': 'inactive'
        }
        
        if status not in status_map:
            await callback_query.message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Å—Ç–∞—Ç—É—Å!")
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        success = db.update_student_field(student_id, 'status', status_map[status])
        
        if success:
            status_emoji = {
                'active': '‚úÖ',
                'paused': '‚è∏Ô∏è',
                'inactive': '‚ùå'
            }[status]
            
            await callback_query.message.edit_text(
                f"‚úÖ <b>–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!</b>\n\n"
                f"–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å: {status_emoji} {status_map[status]}",
                parse_mode="HTML"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± —É—á–µ–Ω–∏–∫–µ
            student = db.get_student_by_id(student_id)
            text = format_student_info(student)
            
            await callback_query.message.answer(
                text,
                reply_markup=get_student_detail_keyboard(student_id),
                parse_mode="HTML"
            )
        else:
            await callback_query.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞!</b>\n\n"
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                parse_mode="HTML"
            )
            
    except (ValueError, IndexError) as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ callback data: {e}")
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ set_status: {e}")
        await callback_query.message.edit_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    
    await state.clear()

@router.callback_query(F.data.startswith("confirm_inactive_"))
async def process_confirmed_inactive(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–Ω–æ–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ '–Ω–µ–∞–∫—Ç–∏–≤–Ω—ã–π'"""
    await callback_query.answer()
    
    try:
        student_id = int(callback_query.data.split("_")[2])
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞
        success, message = await handle_status_change(student_id, "inactive")
        
        if success:
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            final_message = f"{message}\n\n–°—Ç–∞—Ç—É—Å: ‚ùå Inactive"
            
            await callback_query.message.edit_text(
                final_message,
                parse_mode="HTML",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[
                        types.InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥ –∫ —É—á–µ–Ω–∏–∫—É",
                            callback_data=f"student_{student_id}"
                        )
                    ]]
                )
            )
        else:
            # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞
            await callback_query.message.edit_text(
                message,
                parse_mode="HTML",
                reply_markup=types.InlineKeyboardMarkup(
                    inline_keyboard=[[
                        types.InlineKeyboardButton(
                            text="üîô –ù–∞–∑–∞–¥",
                            callback_data=f"edit_status_{student_id}"
                        )
                    ]]
                )
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {e}")
        await callback_query.message.edit_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞!",
            reply_markup=types.InlineKeyboardMarkup(
                inline_keyboard=[[
                    types.InlineKeyboardButton(
                        text="üîô –ù–∞–∑–∞–¥",
                        callback_data="students_list"
                    )
                ]]
            )
        )
