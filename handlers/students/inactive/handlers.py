from aiogram import Router, F, types
from aiogram.fsm.context import FSMContext
import logging
import asyncio
from database import Database

from .keyboards import (
    get_inactive_students_keyboard,
    get_activate_student_keyboard,
    get_back_to_students_keyboard
)

logger = logging.getLogger(__name__)

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö –º–µ—Ç–æ–¥–æ–≤
async def run_in_executor(func, *args):
    loop = asyncio.get_event_loop()
    return await loop.run_in_executor(None, func, *args)

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —Ä–æ—É—Ç–µ—Ä–∞ (–∞ –Ω–µ —Ñ—É–Ω–∫—Ü–∏—é)
inactive_students_router = Router()

@inactive_students_router.callback_query(F.data == "show_inactive_menu")
async def show_inactive_students(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤"""
    try:
        logger.info(f"üîÑ –ü–æ–∫–∞–∑–∞—Ç—å –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤. User: {callback.from_user.id}")
        await callback.answer()
        
        db = Database()
        telegram_id = callback.from_user.id
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º tutor_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        tutor_id = await run_in_executor(db.get_tutor_id_by_telegram_id, telegram_id)
        
        if not tutor_id:
            await callback.message.edit_text(
                "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞",
                parse_mode="HTML"
            )
            return
        
        logger.debug(f"üìã –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è tutor_id: {tutor_id}")
        inactive_students = await run_in_executor(db.get_inactive_students, tutor_id)
        logger.debug(f"üìä –ù–∞–π–¥–µ–Ω–æ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤: {len(inactive_students)}")
        
        if not inactive_students:
            await callback.message.edit_text(
                "üåô <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–µ–Ω–∏–∫–∏</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤.",
                reply_markup=get_back_to_students_keyboard(),
                parse_mode="HTML"
            )
            return
        
        text = (
            "üåô <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–µ–Ω–∏–∫–∏</b>\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ: {len(inactive_students)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_inactive_students_keyboard(inactive_students),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing inactive students: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏", show_alert=True)

@inactive_students_router.callback_query(F.data.startswith("inactive_page_"))
async def handle_inactive_pagination(callback: types.CallbackQuery, state: FSMContext):
    """–ü–∞–≥–∏–Ω–∞—Ü–∏—è –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤"""
    try:
        await callback.answer()
        
        page = int(callback.data.split("_")[2])
        db = Database()
        telegram_id = callback.from_user.id
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º tutor_id
        tutor_id = await run_in_executor(db.get_tutor_id_by_telegram_id, telegram_id)
        
        if not tutor_id:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞", show_alert=True)
            return
        
        inactive_students = await run_in_executor(db.get_inactive_students, tutor_id)
        
        text = (
            "üåô <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–µ —É—á–µ–Ω–∏–∫–∏</b>\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ: {len(inactive_students)}\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏:"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_inactive_students_keyboard(inactive_students, page),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error in pagination: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@inactive_students_router.callback_query(F.data.startswith("inactive_student_"))
async def show_inactive_student_detail(callback: types.CallbackQuery, state: FSMContext):
    """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞"""
    try:
        await callback.answer()
        
        student_id = int(callback.data.split("_")[2])
        db = Database()
        
        student = await run_in_executor(db.get_student_by_id, student_id)
        
        if not student:
            await callback.answer("‚ùå –£—á–µ–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        text = (
            "üë§ <b>–ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π —É—á–µ–Ω–∏–∫</b>\n\n"
            f"<b>–ò–º—è:</b> {student.get('full_name', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')}\n"
            f"<b>–¢–µ–ª–µ—Ñ–æ–Ω:</b> {student.get('phone', '–ù–µ —É–∫–∞–∑–∞–Ω')}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> ‚ùå –ù–µ–∞–∫—Ç–∏–≤–Ω—ã–π\n\n"
            "–•–æ—Ç–∏—Ç–µ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É—á–µ–Ω–∏–∫–∞?"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_activate_student_keyboard(student_id),
            parse_mode="HTML"
        )
        
    except Exception as e:
        logger.error(f"Error showing student detail: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞", show_alert=True)

@inactive_students_router.callback_query(F.data.startswith("activate_student_"))
async def activate_student_handler(callback: types.CallbackQuery, state: FSMContext):
    """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É—á–µ–Ω–∏–∫–∞"""
    try:
        await callback.answer()
        
        student_id = int(callback.data.split("_")[2])
        logger.info(f"üîÑ –ê–∫—Ç–∏–≤–∞—Ü–∏—è —É—á–µ–Ω–∏–∫–∞ ID: {student_id}")
        
        db = Database()
        success = await run_in_executor(db.activate_student, student_id)
        
        if success:
            await callback.message.edit_text(
                "‚úÖ <b>–£—á–µ–Ω–∏–∫ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!</b>\n\n"
                "–°—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ 'active'.",
                reply_markup=get_back_to_students_keyboard(),
                parse_mode="HTML"
            )
        else:
            await callback.message.edit_text(
                "‚ùå <b>–û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏</b>\n\n"
                "–ù–µ —É–¥–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —É—á–µ–Ω–∏–∫–∞.",
                reply_markup=get_back_to_students_keyboard(),
                parse_mode="HTML"
            )
            
    except Exception as e:
        logger.error(f"Error activating student: {e}")
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏", show_alert=True)