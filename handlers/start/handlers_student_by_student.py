from aiogram import types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import db

from datetime import datetime

from handlers.start.keyboards_start import get_student_welcome_keyboard
from handlers.start.welcome import show_student_welcome  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ welcome.py

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
student_router = Router()

def get_back_to_student_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥' –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 
                    callback_data="stud_back_menu"
                )
            ]
        ]
    )
    return keyboard

@student_router.callback_query(F.data == "stud_settings")
async def handle_student_settings(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏' –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        main_student = db.get_main_student_by_telegram_id(callback_query.from_user.id)
        
        if not main_student:
            await callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞",
                parse_mode="HTML",
                reply_markup=get_back_to_student_menu_keyboard()
            )
            await callback_query.answer()
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞—Å—Ç—Ä–æ–µ–∫
        settings_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª/–í—ã–∫–ª" if main_student.get('notification_enabled', True) else "üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –í–∫–ª/–í—ã–∫–ª",
                        callback_data="stud_toggle_notifications"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π",
                        callback_data="stud_change_notification_time"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="üë§ –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
                        callback_data="stud_edit_profile"
                    )
                ],
                [
                    InlineKeyboardButton(
                        text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é",
                        callback_data="stud_back_menu"
                    )
                ]
            ]
        )
        
        settings_text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è</b>

üë§ <b>–ò–º—è:</b> {main_student['full_name']}
‚è∞ <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'‚úÖ –í–∫–ª—é—á–µ–Ω—ã' if main_student.get('notification_enabled', True) else '‚ùå –í—ã–∫–ª—é—á–µ–Ω—ã'}
üïê <b>–í—Ä–µ–º—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b> {main_student.get('notification_time', '09:00')}

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
        """
        
        await callback_query.message.edit_text(
            settings_text,
            parse_mode="HTML",
            reply_markup=settings_keyboard
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_student_settings: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫")
    
    await callback_query.answer()

@student_router.callback_query(F.data == "stud_view_homeworks")
async def handle_student_homeworks(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã' –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        main_student = db.get_main_student_by_telegram_id(callback_query.from_user.id)
        
        if not main_student:
            await callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞",
                parse_mode="HTML",
                reply_markup=get_back_to_student_menu_keyboard()
            )
            await callback_query.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É —Ä–∞–∑–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
        all_student_records = db.get_all_students_for_main_student(main_student['id'])

        if not all_student_records:
            await callback_query.message.edit_text(
                "üìö <b>–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤.",
                parse_mode="HTML",
                reply_markup=get_back_to_student_menu_keyboard()
            )
            await callback_query.answer()
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
        response_text = "üìö <b>–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è:</b>\n\n"
        total_undone = 0
        has_undone_homeworks = False
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º
        for student_record in all_student_records:
            tutor_name = student_record.get('tutor_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä')
            student_id_in_tutor = student_record['id']
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é)
            undone_homeworks = db.get_student_undone_homeworks_from_reports(student_id_in_tutor)
            
            if undone_homeworks:
                has_undone_homeworks = True
                response_text += f"üë®‚Äçüè´ <b>{tutor_name}:</b>\n"
                
                for homework in undone_homeworks:
                    try:
                        lesson_date = datetime.strptime(homework['lesson_date'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
                        response_text += f"   ‚Ä¢ {lesson_date}"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —É—á–µ–Ω–∏–∫–∞, –µ—Å–ª–∏ –µ—Å—Ç—å
                        if homework.get('student_performance'):
                            # –û–±—Ä–µ–∑–∞–µ–º –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –ª—É—á—à–µ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
                            performance_text = homework['student_performance']
                            if len(performance_text) > 100:
                                performance_text = performance_text[:97] + "..."
                            response_text += f"\n     üí¨ <i>{performance_text}</i>"
                        
                        response_text += "\n"
                        total_undone += 1
                        
                    except Exception:
                        continue
                
                response_text += "\n"
        
        if not has_undone_homeworks:
            response_text = "‚úÖ <b>–í—Å–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!</b>\n\n"
            response_text += "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö —Ä–∞–±–æ—Ç."
        else:
            response_text += f"\nüìä <b>–í—Å–µ–≥–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {total_undone} –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π\n\n"
            response_text += "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤–æ–≤—Ä–µ–º—è!"
        
        await callback_query.message.edit_text(
            response_text,
            parse_mode="HTML",
            reply_markup=get_back_to_student_menu_keyboard()
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_student_homeworks: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–º–∞—à–Ω–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö")
    
    await callback_query.answer()


@student_router.callback_query(F.data == "stud_view_upcoming")
async def handle_student_upcoming_lessons(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è' –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        main_student = db.get_main_student_by_telegram_id(callback_query.from_user.id)
        
        if not main_student:
            await callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞",
                parse_mode="HTML",
                reply_markup=get_back_to_student_menu_keyboard()
            )
            await callback_query.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        all_student_records = db.get_all_students_for_main_student(main_student['id'])
        
        if not all_student_records:
            await callback_query.message.edit_text(
                "üìÖ <b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤.",
                parse_mode="HTML",
                reply_markup=get_back_to_student_menu_keyboard()
            )
            await callback_query.answer()
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è
        response_text = "üìÖ <b>–í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
        total_lessons = 0
        has_upcoming_lessons = False
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º
        for student_record in all_student_records:
            tutor_name = student_record.get('tutor_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä')
            student_id_in_tutor = student_record['id']
            
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è
            upcoming_lessons = db.get_student_upcoming_lessons(student_id_in_tutor, 30)
            
            if upcoming_lessons:
                has_upcoming_lessons = True
                tutor_lessons = 0
                
                response_text += f"üë®‚Äçüè´ <b>{tutor_name}:</b>\n"
                
                for lesson in upcoming_lessons:
                    try:
                        lesson_datetime = datetime.strptime(lesson['lesson_date'], '%Y-%m-%d %H:%M:%S')
                        lesson_date = lesson_datetime.strftime('%d.%m.%Y')
                        lesson_time = lesson_datetime.strftime('%H:%M')
                        
                        response_text += f"   ‚Ä¢ {lesson_date} –≤ {lesson_time} - {lesson['duration']} –º–∏–Ω."
                        if lesson.get('price'):
                            response_text += f" ({lesson['price']} —Ä—É–±.)"
                        response_text += "\n"
                        
                        tutor_lessons += 1
                        
                    except Exception:
                        continue
                
                response_text += f"   <b>–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:</b> {tutor_lessons} –∑–∞–Ω—è—Ç–∏–π\n\n"
                total_lessons += tutor_lessons
        
        if not has_upcoming_lessons:
            response_text = "üìÖ <b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è</b>\n\n"
            response_text += "–ù–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.\n\n"
            response_text += "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π."
        else:
            response_text += f"üìä <b>–í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:</b> {total_lessons} –∑–∞–Ω—è—Ç–∏–π\n\n"
            response_text += "‚è∞ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—è–º!"
        
        await callback_query.message.edit_text(
            response_text,
            parse_mode="HTML",
            reply_markup=get_back_to_student_menu_keyboard()
        )
        
    except Exception as e:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_student_upcoming_lessons: {e}")
    
    await callback_query.answer()

@student_router.callback_query(F.data == "stud_back_menu")
async def handle_back_to_student_menu(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' –¥–ª—è —É—á–µ–Ω–∏–∫–∞ - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∏–∑ welcome.py"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        main_student = db.get_main_student_by_telegram_id(callback_query.from_user.id)
        
        if main_student:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ welcome.py –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
            await show_student_welcome(callback_query.message, main_student)
        else:
            await callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞",
                parse_mode="HTML"
            )
        
    except Exception as e:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_back_to_student_menu: {e}")
    
    await callback_query.answer()

@student_router.callback_query(F.data == "stud_view_unpaid")
async def handle_student_unpaid_lessons(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è' –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
        main_student = db.get_main_student_by_telegram_id(callback_query.from_user.id)
        
        if not main_student:
            await callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞",
                parse_mode="HTML",
                reply_markup=get_back_to_student_menu_keyboard()
            )
            await callback_query.answer()
            return
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞ —É —Ä–∞–∑–Ω—ã—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
        all_student_records = db.get_all_students_for_main_student(main_student['id'])
        
        if not all_student_records:
            await callback_query.message.edit_text(
                "üí∞ <b>–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π —É —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤.",
                parse_mode="HTML",
                reply_markup=get_back_to_student_menu_keyboard()
            )
            await callback_query.answer()
            return
        
        # –°–æ–±–∏—Ä–∞–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è –ø–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º
        response_text = "üí∞ <b>–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
        total_unpaid = 0
        total_amount = 0.0
        has_unpaid_lessons = False
        
        # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞–º
        for student_record in all_student_records:
            tutor_name = student_record.get('tutor_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä')
            student_id_in_tutor = student_record['id']
            
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
            unpaid_lessons = db.get_unpaid_lessons_for_student(student_id_in_tutor)
            
            if unpaid_lessons:
                has_unpaid_lessons = True
                tutor_unpaid = 0
                tutor_amount = 0.0
                
                response_text += f"üë®‚Äçüè´ <b>{tutor_name}:</b>\n"
                
                for lesson in unpaid_lessons:
                    try:
                        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è
                        lesson_date = datetime.strptime(lesson['lesson_date'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
                        
                        response_text += f"   ‚Ä¢ {lesson_date} - {lesson['duration']} –º–∏–Ω."
                        if lesson.get('price'):
                            response_text += f" ({lesson['price']} —Ä—É–±.)"
                        response_text += "\n"
                        
                        tutor_unpaid += 1
                        if lesson.get('price'):
                            tutor_amount += float(lesson['price'])
                        
                    except Exception:
                        continue
                
                response_text += f"   <b>–ù–µ–æ–ø–ª–∞—á–µ–Ω–æ:</b> {tutor_unpaid} –∑–∞–Ω—è—Ç–∏–π"
                if tutor_amount > 0:
                    response_text += f" –Ω–∞ —Å—É–º–º—É {tutor_amount} —Ä—É–±."
                response_text += "\n\n"
                
                total_unpaid += tutor_unpaid
                total_amount += tutor_amount
        
        if not has_unpaid_lessons:
            response_text = "‚úÖ <b>–í—Å–µ –∑–∞–Ω—è—Ç–∏—è –æ–ø–ª–∞—á–µ–Ω—ã!</b>\n\n"
            response_text += "–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π —É –≤—Å–µ—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤."
        else:
            response_text += f"üìä <b>–í—Å–µ–≥–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–æ:</b> {total_unpaid} –∑–∞–Ω—è—Ç–∏–π"
            if total_amount > 0:
                response_text += f" –Ω–∞ –æ–±—â—É—é —Å—É–º–º—É {total_amount} —Ä—É–±."
            response_text += "\n\n"
            response_text += "üí≥ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–ª–∞—Ç–∏—Ç–µ –∑–∞–Ω—è—Ç–∏—è –≤–æ–≤—Ä–µ–º—è!"
        
        await callback_query.message.edit_text(
            response_text,
            parse_mode="HTML",
            reply_markup=get_back_to_student_menu_keyboard()
        )
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_student_unpaid_lessons: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏—è—Ö")
    
    await callback_query.answer()