from aiogram import types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import db
from datetime import datetime, timedelta

from handlers.start.keyboards_start import get_student_welcome_keyboard

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è —É—á–µ–Ω–∏–∫–æ–≤
student_router = Router()

def get_back_to_student_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥' –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 
                    callback_data="stud_back_menu"
                )
            ]
        ]
    )
    return keyboard

@student_router.callback_query(F.data == "stud_view_unpaid")
async def handle_student_unpaid_lessons(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è' –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã
        student = db.get_student_by_telegram_id(callback_query.from_user.id)
        
        if student:
            # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è
            unpaid_lessons = db.get_student_unpaid_lessons(student['id'])
            
            if unpaid_lessons:
                response_text = "üí∞ <b>–í–∞—à–∏ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏:</b>\n\n"
                total_debt = 0
                lesson_count = 0
                
                for lesson in unpaid_lessons:
                    try:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è
                        lesson_date = datetime.strptime(lesson['lesson_date'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
                        response_text += f"‚Ä¢ {lesson_date} - {lesson['price']} —Ä—É–±. ({lesson['duration']} –º–∏–Ω.)\n"
                        total_debt += lesson['price']
                        lesson_count += 1
                    except (ValueError, KeyError) as e:
                        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–Ω—è—Ç–∏—è {lesson}: {e}")
                        continue
                
                response_text += f"\n<b>–í—Å–µ–≥–æ –Ω–µ–æ–ø–ª–∞—á–µ–Ω–æ:</b> {lesson_count} –∑–∞–Ω—è—Ç–∏–π\n"
                response_text += f"<b>–û–±—â–∞—è —Å—É–º–º–∞ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏:</b> {total_debt} —Ä—É–±.\n\n"
                response_text += "üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º."
            else:
                response_text = "‚úÖ <b>–í—Å–µ –∑–∞–Ω—è—Ç–∏—è –æ–ø–ª–∞—á–µ–Ω—ã!</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π –ø–æ –æ–ø–ª–∞—Ç–µ –∑–∞–Ω—è—Ç–∏–π."
        else:
            response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞"
        
        await callback_query.message.edit_text(
            response_text,
            parse_mode="HTML",
            reply_markup=get_back_to_student_menu_keyboard()
        )
        
    except Exception as e:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è—Ö")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_student_unpaid_lessons: {e}")
    
    await callback_query.answer()

@student_router.callback_query(F.data == "stud_view_homeworks")
async def handle_student_homeworks(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã' –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã
        student = db.get_student_by_telegram_id(callback_query.from_user.id)
        
        if student:
            # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã
            undone_homeworks = db.get_student_undone_homeworks(student['id'])
            
            if undone_homeworks:
                response_text = "üìö <b>–ù–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã:</b>\n\n"
                homework_count = 0
                
                for homework in undone_homeworks:
                    try:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∑–∞–Ω—è—Ç–∏—è
                        lesson_date = datetime.strptime(homework['lesson_date'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
                        response_text += f"‚Ä¢ {lesson_date} - {homework['tutor_name']}\n"
                        
                        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏, –µ—Å–ª–∏ –µ—Å—Ç—å
                        if homework['student_performance']:
                            response_text += f"  –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {homework['student_performance']}\n\n"
                        else:
                            response_text += "\n"
                        
                        homework_count += 1
                    except (ValueError, KeyError) as e:
                        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–æ–º–∞—à–Ω–µ–π —Ä–∞–±–æ—Ç—ã {homework}: {e}")
                        continue
                
                response_text += f"\n<b>–í—Å–µ–≥–æ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–æ:</b> {homework_count} –¥–æ–º–∞—à–Ω–∏—Ö —Ä–∞–±–æ—Ç\n\n"
                response_text += "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è."
            else:
                response_text = "‚úÖ <b>–í—Å–µ –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω—ã!</b>\n\n–£ –≤–∞—Å –Ω–µ—Ç –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π."
        else:
            response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞"
        
        await callback_query.message.edit_text(
            response_text,
            parse_mode="HTML",
            reply_markup=get_back_to_student_menu_keyboard()
        )
        
    except Exception as e:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–º–∞—à–Ω–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_student_homeworks: {e}")
    
    await callback_query.answer()

@student_router.callback_query(F.data == "stud_view_upcoming")
async def handle_student_upcoming_lessons(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è' –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã
        student = db.get_student_by_telegram_id(callback_query.from_user.id)
        
        if student:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è –Ω–∞ –º–µ—Å—è—Ü –≤–ø–µ—Ä–µ–¥
            upcoming_lessons = db.get_student_upcoming_lessons(student['id'], 30)
            
            if upcoming_lessons:
                response_text = "üìÖ <b>–í–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
                lesson_count = 0
                
                for lesson in upcoming_lessons:
                    try:
                        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –∑–∞–Ω—è—Ç–∏—è
                        lesson_datetime = datetime.strptime(lesson['lesson_date'], '%Y-%m-%d %H:%M:%S')
                        lesson_date = lesson_datetime.strftime('%d.%m.%Y')
                        lesson_time = lesson_datetime.strftime('%H:%M')
                        
                        response_text += f"‚Ä¢ {lesson_date} –≤ {lesson_time} - {lesson['duration']} –º–∏–Ω.\n"
                        if lesson['price']:
                            response_text += f"  –°—Ç–æ–∏–º–æ—Å—Ç—å: {lesson['price']} —Ä—É–±.\n"
                        response_text += "\n"
                        
                        lesson_count += 1
                    except (ValueError, KeyError) as e:
                        print(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–Ω—è—Ç–∏—è {lesson}: {e}")
                        continue
                
                response_text += f"\n<b>–í—Å–µ–≥–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ:</b> {lesson_count} –∑–∞–Ω—è—Ç–∏–π\n\n"
                response_text += "‚è∞ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –∑–∞–Ω—è—Ç–∏—è–º!"
            else:
                response_text = "üìÖ <b>–ü—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è</b>\n\n"
                response_text += "–ù–∞ –±–ª–∏–∂–∞–π—à–∏–π –º–µ—Å—è—Ü —É –≤–∞—Å –Ω–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–Ω—è—Ç–∏–π.\n\n"
                response_text += "üìû –°–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–Ω—è—Ç–∏–π."
        else:
            response_text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞"
        
        await callback_query.message.edit_text(
            response_text,
            parse_mode="HTML",
            reply_markup=get_back_to_student_menu_keyboard()
        )
        
    except Exception as e:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –∑–∞–Ω—è—Ç–∏—è—Ö")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_student_upcoming_lessons: {e}")
    
    await callback_query.answer()

@student_router.callback_query(F.data == "stud_back_menu")
async def handle_back_to_student_menu(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—á–µ–Ω–∏–∫–∞ –∏–∑ –±–∞–∑—ã
        student = db.get_student_by_telegram_id(callback_query.from_user.id)
        
        if student:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–µ
            tutor = db.get_tutor_by_id(student['tutor_id'])
            
            if tutor:
                welcome_text = f"""
<b>–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {student['full_name']}!</b>

–í—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É <b>{tutor[2]}</b>.

–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–∏ –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã, –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏–µ –∑–∞–Ω—è—Ç–∏—è.
"""
            else:
                welcome_text = f"–î–æ–±—Ä—ã–π –¥–µ–Ω—å, {student['full_name']}! –í—ã –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω—ã –∫ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—É."
        else:
            welcome_text = "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!"
        
        await callback_query.message.edit_text(
            welcome_text,
            parse_mode="HTML",
            reply_markup=get_student_welcome_keyboard()
        )
        
    except Exception as e:
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é")
        print(f"–û—à–∏–±–∫–∞ –≤ handle_back_to_student_menu: {e}")
    
    await callback_query.answer()