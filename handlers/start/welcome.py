from aiogram import types
from database import db
from handlers.schedule.schedule_utils import get_today_schedule_text
from handlers.start.keyboards_start import get_student_welcome_keyboard, get_parent_welcome_keyboard, get_registration_keyboard
from keyboards.main_menu import get_main_menu_keyboard
from handlers.start.config import WELCOME_BACK_TEXT, REGISTRATION_TEXT
from aiogram.exceptions import TelegramBadRequest
from datetime import datetime

from aiogram.exceptions import TelegramBadRequest
import logging

logger = logging.getLogger(__name__)

# –ò –¥–æ–±–∞–≤—å—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é safe_edit_message –≤ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª
async def safe_edit_message(message, text, reply_markup=None, parse_mode=None):
    """
    –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–∫–∏ 'message not modified'
    """
    try:
        await message.edit_text(
            text=text,
            reply_markup=reply_markup,
            parse_mode=parse_mode
        )
        return True
    except TelegramBadRequest as e:
        if "message is not modified" in str(e):
            # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å - —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ
            return False
        else:
            logger.error(f"Error editing message: {e}")
            return False
    except Exception as e:
        logger.error(f"Error editing message: {e}")
        return False

logger = logging.getLogger(__name__)

async def show_welcome_message(message: types.Message):
    """–ü–æ–∫–∞–∑ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # 1) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—á–µ–Ω–∏–∫–æ–º –≤ main_students
    main_student = db.get_main_student_by_telegram_id(message.from_user.id)
    
    if main_student and main_student['student_telegram_id'] == message.from_user.id:
        await show_student_welcome(message, main_student)
        return
    
    # 2) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–æ–¥–∏—Ç–µ–ª–µ–º –≤ main_parents
    main_parent = db.get_main_parent_by_telegram_id(message.from_user.id)
    
    if main_parent:
        await show_parent_welcome(message, main_parent)
        return
    
    # 3) –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º
    existing_tutor = db.get_tutor_by_telegram_id(message.from_user.id)
    
    if existing_tutor:
        await show_welcome_back(message, existing_tutor)
        return
    
    # 4) –ï—Å–ª–∏ –Ω–∏ –æ–¥–Ω–æ –∏–∑ —É—Å–ª–æ–≤–∏–π –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–æ—Å—å - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é
    await show_registration_message(message)

async def show_student_welcome(message: types.Message, main_student: dict):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞ –∏–∑ main_students"""
    main_student_id = main_student['id']
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ —Å—Ç—É–¥–µ–Ω—Ç–∞
    tutors = db.get_tutors_for_main_student(main_student_id)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞
    welcome_text = format_student_welcome(main_student, tutors)
    
    keyboard = get_student_welcome_keyboard()
    
    await message.answer(
        welcome_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

async def show_parent_welcome(message: types.Message, main_parent: dict):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è –∏–∑ main_parents"""
    # –ü–æ–ª—É—á–∞–µ–º —É—á–µ–Ω–∏–∫–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è
    students = db.get_parent_students(main_parent['parent_telegram_id'])
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è
    tutors = db.get_tutors_for_parent(main_parent['parent_telegram_id'])
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
    welcome_text = format_parent_welcome(main_parent, students, tutors)
    
    keyboard = get_parent_welcome_keyboard()
    
    await message.answer(
        welcome_text,
        reply_markup=keyboard,
        parse_mode="HTML"
    )

def format_student_welcome(main_student: dict, tutors: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É—á–µ–Ω–∏–∫–∞"""
    
    student_name = main_student['full_name']
    
    header = f"üéì –ü—Ä–∏–≤–µ—Ç, {student_name}!\n\n"
    header += "–†–∞–¥ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å! –í–æ—Ç —Ç–≤–æ—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞—Ö
    tutors_text = "üìö <b>–¢–≤–æ–∏ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã:</b>\n"
    if tutors:
        for i, tutor in enumerate(tutors, 1):
            tutors_text += f"{i}. {tutor['full_name']}"
            if tutor.get('phone'):
                tutors_text += f" - {tutor['phone']}"
            tutors_text += "\n"
    else:
        tutors_text += "–ü–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã\n"
    tutors_text += "\n"
    
    # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è —É—á–µ–Ω–∏–∫–∞
    info_text = f"‚è∞ <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {main_student.get('timezone', 'Europe/Moscow')}\n"
    info_text += f"üîî <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> {'–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ' if main_student.get('notification_enabled', True) else '–≤—ã–∫–ª—é—á–µ–Ω—ã üîï'}\n"
    
    return f"{header}{tutors_text}{info_text}"

def format_parent_welcome(main_parent: dict, students: list, tutors: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è"""
    
    header = f"üë®‚Äçüë©‚Äçüëß‚Äçüë¶ –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –¥–µ—Ç—è—Ö
    if students:
        student_names = ", ".join([student['full_name'] for student in students])
        header += f"–í–∞—à–∏ –¥–µ—Ç–∏: <b>{student_names}</b>\n\n"
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–µ—Ç—è–º
        active_count = sum(1 for student in students if student.get('status') == 'active')
        paused_count = sum(1 for student in students if student.get('status') == 'paused')
        
        header += f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:</b>\n"
        header += f"‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö: {active_count}\n"
        if paused_count > 0:
            header += f"‚è∏Ô∏è –ù–∞ –ø–∞—É–∑–µ: {paused_count}\n"
        header += "\n"
    else:
        header += "–û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–∏–≤—è–∑–∫–∏ —É—á–µ–Ω–∏–∫–æ–≤.\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞—Ö
    tutors_text = "üë®‚Äçüè´ <b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π:</b>\n"
    if tutors:
        # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤
        unique_tutors = {tutor['id']: tutor for tutor in tutors}.values()
        
        for i, tutor in enumerate(unique_tutors, 1):
            tutors_text += f"{i}. {tutor['full_name']}"
            if tutor.get('phone'):
                tutors_text += f" - {tutor['phone']}"
            tutors_text += "\n"
        tutors_text += "\n<b>–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –ª—é–±—ã–º –∏–∑ –Ω–∏—Ö!</b>\n"
    else:
        tutors_text += "–ü–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã\n"
    tutors_text += "\n"
    
    # –ß—Ç–æ –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å
    info_text = "üëÄ <b>–ß—Ç–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å:</b>\n"
    info_text += "‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π\n"
    info_text += "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è\n"  
    info_text += "‚Ä¢ –£–≤–∏–¥–µ—Ç—å –æ—Ç—á–µ—Ç—ã –æ–± —É—Å–ø–µ–≤–∞–µ–º–æ—Å—Ç–∏\n"
    info_text += "‚Ä¢ –ù–∞—Å—Ç—Ä–æ–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
    
    info_text += f"‚è∞ <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> {main_parent.get('timezone', 'Europe/Moscow')}\n"
    
    return f"{header}{tutors_text}{info_text}"

async def show_welcome_back(message: types.Message, tutor: tuple):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞ —Å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ–º –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"""
    await show_main_menu(
        chat_id=message.from_user.id,
        message=message
    )
# # –í –ª—é–±–æ–º –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ, –≥–¥–µ –Ω—É–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# await show_main_menu(chat_id=user_id, message=message)
# # –∏–ª–∏
# await show_main_menu(chat_id=user_id, callback_query=callback_query)

async def show_registration_message(message: types.Message):
    """–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    await message.answer(
        REGISTRATION_TEXT,
        reply_markup=get_registration_keyboard(),
        parse_mode="HTML"
    )

async def show_main_menu(chat_id: int, message: types.Message = None, callback_query: types.CallbackQuery = None):
    """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é"""
    from database import Database
    from aiogram.exceptions import TelegramBadRequest
    
    db = Database()
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞
    tutor = db.get_tutor_by_telegram_id(chat_id)
    
    if not tutor:
        error_text = "‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞"
        if callback_query:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_edit_message –≤–º–µ—Å—Ç–æ –ø—Ä—è–º–æ–≥–æ edit_text
            success = await safe_edit_message(
                callback_query.message,
                text=error_text,
                parse_mode="HTML"
            )
            if not success:
                await callback_query.message.answer(error_text, parse_mode="HTML")
        elif message:
            await message.answer(error_text, parse_mode="HTML")
        return
    
    tutor_name = tutor[2] if tutor else "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    tutor_id = tutor[0]
    
    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è
    schedule_text = await get_today_schedule_text(tutor_id)

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ–¥–ø–∏—Å–∫–∏
    subscription_text = ""
    try:
        with db.get_connection() as conn:
            cursor = conn.cursor()
            
            cursor.execute('SELECT telegram_id FROM tutors WHERE id = ?', (tutor_id,))
            tutor_data = cursor.fetchone()
            
            if tutor_data:
                telegram_id = tutor_data[0]
                
                cursor.execute('''
                SELECT valid_until FROM payments 
                WHERE user_id = ? 
                AND status = 'succeeded'
                AND valid_until >= datetime('now')
                ORDER BY created_at DESC
                LIMIT 1
                ''', (telegram_id,))
                
                subscription_data = cursor.fetchone()
                
                if subscription_data:
                    valid_until = subscription_data[0]
                    
                    if isinstance(valid_until, str):
                        try:
                            valid_until = datetime.strptime(valid_until, '%Y-%m-%d %H:%M:%S')
                        except:
                            pass
                    
                    if isinstance(valid_until, datetime):
                        formatted_date = valid_until.strftime('%d.%m.%Y %H:%M')
                        subscription_text = f"üíé –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ: {formatted_date}\n"
                    else:
                        subscription_text = "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n"
    
    except Exception as e:
        logger.error(f"Error getting subscription details: {e}")
        if db.check_tutor_subscription(tutor_id):
            subscription_text = "üíé –ü–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–Ω–∞\n\n"

    # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç
    formatted_text = WELCOME_BACK_TEXT.format(
        tutor_name=tutor_name,
        schedule_text=schedule_text
    )
    welcome_text = f"{subscription_text}{formatted_text}"
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
    if callback_query:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º safe_edit_message
        success = await safe_edit_message(
            callback_query.message,
            text=welcome_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="HTML"
        )
        # –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if not success:
            await callback_query.message.answer(
                welcome_text,
                reply_markup=get_main_menu_keyboard(),
                parse_mode="HTML"
            )
    elif message:
        await message.answer(
            welcome_text,
            reply_markup=get_main_menu_keyboard(),
            parse_mode="HTML"
        )

