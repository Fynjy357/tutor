from aiogram import types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import db
from datetime import datetime
import logging

from handlers.start.keyboards_start import get_parent_welcome_keyboard
from handlers.start.welcome import show_parent_welcome  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ welcome.py

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
parent_router = Router()
logger = logging.getLogger(__name__)

def get_back_to_parent_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 
                    callback_data="back_to_parent_menu"
                )
            ]
        ]
    )
    return keyboard

@parent_router.callback_query(F.data == "parent_tutors")
async def handle_parent_tutors(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞'"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤ —Ä–æ–¥–∏—Ç–µ–ª—è
        tutors = db.get_tutors_for_parent(callback_query.from_user.id)
        
        if tutors:
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_tutors = {tutor['id']: tutor for tutor in tutors}.values()
            
            tutor_list = "\n".join([f"‚Ä¢ {tutor['full_name']} - {tutor['phone']}" 
                                  for tutor in unique_tutors])
            
            await callback_query.message.edit_text(
                f"üë®‚Äçüè´ <b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π:</b>\n\n"
                f"{tutor_list}\n\n"
                f"–í—Å–µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤: {len(unique_tutors)}",
                parse_mode="HTML",
                reply_markup=get_back_to_parent_menu_keyboard()
            )
        else:
            await callback_query.message.edit_text(
                "üë®‚Äçüè´ <b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.</b>\n\n"
                "–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∏ –ø–æ—è–≤—è—Ç—Å—è –∑–∞–Ω—è—Ç–∏—è, "
                "–≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏—Ö –∑–¥–µ—Å—å.",
                parse_mode="HTML",
                reply_markup=get_back_to_parent_menu_keyboard()
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_parent_tutors: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞—Ö")
    
    await callback_query.answer()

@parent_router.callback_query(F.data == "parent_unpaid_lessons")
async def handle_parent_debts(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏' - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è
        unpaid_lessons = db.get_parent_unpaid_lessons(callback_query.from_user.id)
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ SQL –∑–∞–ø—Ä–æ—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        filtered_unpaid = []
        for lesson in unpaid_lessons:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ
            if lesson.get('lesson_paid') == 0 or lesson.get('lesson_paid') is None:
                filtered_unpaid.append(lesson)
        
        if filtered_unpaid:
            response_text = "üí∞ <b>–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
            total_debt = 0
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—á–µ–Ω–∏–∫–∞–º
            students_debts = {}
            for lesson in filtered_unpaid:
                student_name = lesson.get('student_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–µ–Ω–∏–∫')
                if student_name not in students_debts:
                    students_debts[student_name] = []
                students_debts[student_name].append(lesson)
                total_debt += lesson['price']
            
            for student_name, lessons in students_debts.items():
                student_total = sum(lesson['price'] for lesson in lessons)
                response_text += f"üë§ <b>{student_name}:</b>\n"
                response_text += f"   –ù–µ–æ–ø–ª–∞—á–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: {len(lessons)}\n"
                response_text += f"   –°—É–º–º–∞: {student_total} —Ä—É–±.\n\n"
            
            response_text += f"üíµ <b>–û–±—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å:</b> {total_debt} —Ä—É–±.\n\n"
            response_text += "üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º."
        else:
            response_text = "‚úÖ <b>–í—Å–µ –∑–∞–Ω—è—Ç–∏—è –æ–ø–ª–∞—á–µ–Ω—ã!</b>\n\n–£ –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π –Ω–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π."
        
        # –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        logger.info(f"–†–æ–¥–∏—Ç–µ–ª—å {callback_query.from_user.id}: –Ω–∞–π–¥–µ–Ω–æ {len(unpaid_lessons)} –∑–∞–Ω—è—Ç–∏–π, –ø–æ—Å–ª–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ {len(filtered_unpaid)}")
        
        await callback_query.message.edit_text(
            response_text,
            parse_mode="HTML",
            reply_markup=get_back_to_parent_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_parent_debts: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è—Ö")
    
    await callback_query.answer()

@parent_router.callback_query(F.data == "parent_homeworks")
async def handle_parent_homeworks(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã'"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è
        homeworks = db.get_parent_homeworks(callback_query.from_user.id)
        
        if homeworks:
            response_text = "üìö <b>–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π:</b>\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—á–µ–Ω–∏–∫–∞–º
            students_homeworks = {}
            for hw in homeworks:
                student_name = hw.get('student_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–µ–Ω–∏–∫')
                if student_name not in students_homeworks:
                    students_homeworks[student_name] = []
                students_homeworks[student_name].append(hw)
            
            for student_name, homeworks_list in students_homeworks.items():
                response_text += f"üë§ <b>{student_name}:</b>\n"
                
                for hw in homeworks_list:
                    lesson_date = datetime.strptime(hw['lesson_date'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
                    response_text += f"   ‚Ä¢ {lesson_date}"
                    if hw.get('tutor_name'):
                        response_text += f" - {hw['tutor_name']}"
                    response_text += "\n"
            
            response_text += "\nüìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–æ–≥–∏—Ç–µ –¥–µ—Ç—è–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è."
        else:
            response_text = "üìö <b>–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π."
        
        await callback_query.message.edit_text(
            response_text,
            parse_mode="HTML",
            reply_markup=get_back_to_parent_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_parent_homeworks: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–º–∞—à–Ω–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö")
    
    await callback_query.answer()

@parent_router.callback_query(F.data == "back_to_parent_menu")
async def handle_back_to_parent_menu(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∏–∑ welcome.py"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—è
        main_parent = db.get_main_parent_by_telegram_id(callback_query.from_user.id)
        
        if main_parent:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ welcome.py –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
            await show_parent_welcome(callback_query.message, main_parent)
        else:
            await callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—è",
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_back_to_parent_menu: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é")
    
    await callback_query.answer()