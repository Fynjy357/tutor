from aiogram import types, Router, F
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from database import db
from datetime import datetime
import logging
import sqlite3
import asyncio

from handlers.start.keyboards_start import get_parent_welcome_keyboard
from handlers.start.welcome import show_parent_welcome  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ welcome.py

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
parent_router = Router()
logger = logging.getLogger(__name__)

def get_back_to_parent_menu_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥'"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 
                    callback_data="back_to_parent_menu"
                )
            ]
        ]
    )
    return keyboard

def get_reports_keyboard() -> InlineKeyboardMarkup:
    """–°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤"""
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å", 
                    callback_data="parent_reports_refresh"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 
                    callback_data="back_to_parent_menu"
                )
            ]
        ]
    )
    return keyboard

@parent_router.callback_query(F.data == "parent_reports")
async def handle_parent_reports(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–û—Ç—á–µ—Ç—ã –ø–æ –∑–∞–Ω—è—Ç–∏—è–º'"""
    try:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
        await callback_query.answer("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç—á–µ—Ç—ã...")
        
        # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 25 –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è
        reports = get_parent_reports(callback_query.from_user.id)
        
        if not reports:
            await callback_query.message.edit_text(
                "üì≠ <b>–û—Ç—á–µ—Ç—ã –ø–æ –∑–∞–Ω—è—Ç–∏—è–º</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∑–∞–Ω—è—Ç–∏—è–º.\n"
                "–û—Ç—á–µ—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω–∏—Ç –∏—Ö.",
                parse_mode="HTML",
                reply_markup=get_back_to_parent_menu_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–∞–º–∏
        message_text = format_reports_message(reports)
        
        await callback_query.message.edit_text(
            message_text,
            parse_mode="HTML",
            reply_markup=get_reports_keyboard()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_parent_reports: {e}")
        await callback_query.message.edit_text(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–æ–≤",
            reply_markup=get_back_to_parent_menu_keyboard()
        )
    
    await callback_query.answer()

@parent_router.callback_query(F.data == "parent_reports_refresh")
async def handle_parent_reports_refresh(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –æ—Ç—á–µ—Ç–æ–≤"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        await callback_query.answer("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç—á–µ—Ç—ã...")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –æ—à–∏–±–∫–∏ "message not modified"
        await asyncio.sleep(0.5)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
        reports = get_parent_reports(callback_query.from_user.id)
        
        if not reports:
            await callback_query.message.edit_text(
                "üì≠ <b>–û—Ç—á–µ—Ç—ã –ø–æ –∑–∞–Ω—è—Ç–∏—è–º</b>\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –æ—Ç—á–µ—Ç–æ–≤ –ø–æ –∑–∞–Ω—è—Ç–∏—è–º.\n"
                "–û—Ç—á–µ—Ç—ã –ø–æ—è–≤—è—Ç—Å—è –ø–æ—Å–ª–µ —Ç–æ–≥–æ, –∫–∞–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å –∑–∞–ø–æ–ª–Ω–∏—Ç –∏—Ö.",
                parse_mode="HTML",
                reply_markup=get_back_to_parent_menu_keyboard()
            )
            return
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π
        message_text = format_reports_message(reports)
        message_text += f"\n\nüîÑ <i>–û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M:%S')}</i>"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        await callback_query.message.edit_text(
            message_text,
            parse_mode="HTML",
            reply_markup=get_reports_keyboard()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_parent_reports_refresh: {e}")
        # –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ "message not modified", –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        await callback_query.answer("‚úÖ –û—Ç—á–µ—Ç—ã —É–∂–µ –∞–∫—Ç—É–∞–ª—å–Ω—ã", show_alert=False)

def get_parent_reports(parent_telegram_id: int):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ 25 –æ—Ç—á–µ—Ç–æ–≤ –¥–ª—è —Ä–æ–¥–∏—Ç–µ–ª—è"""
    try:
        with db.get_connection() as conn:
            conn.row_factory = sqlite3.Row
            cursor = conn.cursor()
            cursor.execute('''
            SELECT 
                l.id as lesson_id,
                l.lesson_date,
                l.duration,
                s.full_name as student_name,
                t.full_name as tutor_name,
                lr.lesson_held,
                lr.lesson_paid,
                lr.homework_done,
                lr.student_performance,
                lr.parent_performance
            FROM lessons l
            JOIN students s ON l.student_id = s.id
            JOIN tutors t ON l.tutor_id = t.id
            LEFT JOIN lesson_reports lr ON l.id = lr.lesson_id AND lr.student_id = s.id
            WHERE s.parent_telegram_id = ?
            AND lr.lesson_held IS NOT NULL  -- —Ç–æ–ª—å–∫–æ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –æ—Ç—á–µ—Ç—ã
            ORDER BY l.lesson_date DESC
            LIMIT 25
            ''', (parent_telegram_id,))
            return [dict(row) for row in cursor.fetchall()]
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ –ë–î: {e}")
        return []

def format_reports_message(reports):
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç—á–µ—Ç–∞–º–∏"""
    message_parts = ["<b>üìã –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—Ç—á–µ—Ç—ã –ø–æ –∑–∞–Ω—è—Ç–∏—è–º:</b>\n"]
    
    for i, report in enumerate(reports, 1):
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        lesson_date = report['lesson_date']
        if isinstance(lesson_date, str):
            lesson_date = lesson_date.split(' ')[0] if ' ' in lesson_date else lesson_date
        
        # –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        message_parts.append(
            f"\n<b>{i}. {report['student_name']}</b>\n"
            f"üìÖ {lesson_date} | ‚è± {report['duration']} –º–∏–Ω\n"
            f"- - - - -"
        )
        
        # –°—Ç–∞—Ç—É—Å –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–∏—è
        if report['lesson_held']:
            message_parts.append("‚úÖ –ü—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª")
            
            # –ï—Å–ª–∏ –ø—Ä–∏—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø–ª–∞—Ç—É –∏ –¥–æ–º–∞—à–Ω—é—é —Ä–∞–±–æ—Ç—É
            payment_status = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if report['lesson_paid'] else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
            homework_status = "‚úÖ –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞" if report['homework_done'] else "‚ùå –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞"
            
            message_parts.append(payment_status)
            message_parts.append(homework_status)
            
            # –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –µ—Å—Ç—å)
            if report.get('parent_performance'):
                message_parts.append(f"\nüí¨ <i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {report['parent_performance']}</i>")
        else:
            # –ï—Å–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å—Ç–∞—Ç—É—Å –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –∏ –æ–ø–ª–∞—Ç—ã
            message_parts.append("‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞–ª")
            payment_status = "‚úÖ –û–ø–ª–∞—á–µ–Ω–æ" if report['lesson_paid'] else "‚ùå –ù–µ –æ–ø–ª–∞—á–µ–Ω–æ"
            homework_status = "‚úÖ –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞" if report['homework_done'] else "‚ùå –î–æ–º–∞—à–Ω—è—è —Ä–∞–±–æ—Ç–∞"
            message_parts.append(payment_status)
            message_parts.append(homework_status)

            if report.get('parent_performance'):
                message_parts.append(f"\nüí¨ <i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {report['parent_performance']}</i>")
        
        message_parts.append("- - - - -")
    
    # –£–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    if message_parts and message_parts[-1] == "- - - - -":
        message_parts.pop()
    
    return "\n".join(message_parts)


# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
@parent_router.callback_query(F.data == "parent_tutors")
async def handle_parent_tutors(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –≤–∞—à–µ–≥–æ —Ä–µ–±–µ–Ω–∫–∞'"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã —Ä–æ–¥–∏—Ç–µ–ª—è
        tutors = db.get_tutors_for_parent(callback_query.from_user.id)
        
        if tutors:
            # –£–±–∏—Ä–∞–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã
            unique_tutors = {tutor['id']: tutor for tutor in tutors}.values()
            
            tutor_list = "\n".join([f"‚Ä¢ {tutor['full_name']} - {tutor['phone']}" 
                                  for tutor in unique_tutors])
            
            await callback_query.message.edit_text(
                f"üë®‚Äçüè´ <b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π:</b>\n\n"
                f"{tutor_list}\n\n"
                f"–í—Å–µ–≥–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–≤: {len(unique_tutors)}",
                parse_mode="HTML",
                reply_markup=get_back_to_parent_menu_keyboard()
            )
        else:
            await callback_query.message.edit_text(
                "üë®‚Äçüè´ <b>–†–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π –ø–æ–∫–∞ –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω—ã.</b>\n\n"
                "–ö–∞–∫ —Ç–æ–ª—å–∫–æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä—ã –±—É–¥—É—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∏ –ø–æ—è–≤—è—Ç—Å—è –∑–∞–Ω—è—Ç–∏—è, "
                "–≤—ã —Å–º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å –∏—Ö –∑–¥–µ—Å—å.",
                parse_mode="HTML",
                reply_markup=get_back_to_parent_menu_keyboard()
            )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_parent_tutors: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–∞—Ö")
    
    await callback_query.answer()

@parent_router.callback_query(F.data == "parent_unpaid_lessons")
async def handle_parent_debts(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏' - –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø –° parent_performance"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è
        unpaid_lessons = db.get_parent_unpaid_lessons(callback_query.from_user.id)
        
        # –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø - –ø–æ—Å–º–æ—Ç—Ä–∏–º —á—Ç–æ –ø—Ä–∏—Ö–æ–¥–∏—Ç
        logger.info(f"üîç –î–ê–ù–ù–´–ï –û–¢ –ë–ê–ó–´: {unpaid_lessons}")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ SQL –∑–∞–ø—Ä–æ—Å –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ª–∏—à–Ω–∏–µ –∑–∞–ø–∏—Å–∏
        filtered_unpaid = []
        for lesson in unpaid_lessons:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–Ω—è—Ç–∏–µ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –Ω–µ –æ–ø–ª–∞—á–µ–Ω–æ
            if lesson.get('lesson_paid') == 0 or lesson.get('lesson_paid') is None:
                filtered_unpaid.append(lesson)
        
        if filtered_unpaid:
            response_text = "üí∞ <b>–ù–µ–æ–ø–ª–∞—á–µ–Ω–Ω—ã–µ –∑–∞–Ω—è—Ç–∏—è:</b>\n\n"
            total_debt = 0
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—á–µ–Ω–∏–∫–∞–º
            students_debts = {}
            for lesson in filtered_unpaid:
                student_name = lesson.get('student_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–µ–Ω–∏–∫')
                if student_name not in students_debts:
                    students_debts[student_name] = []
                students_debts[student_name].append(lesson)
                total_debt += lesson['price']
            
            # –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–ê–Ø –û–¢–õ–ê–î–ö–ê - –ø–æ—Å–º–æ—Ç—Ä–∏–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            logger.info(f"üîç –ì–†–£–ü–ü–ò–†–û–í–ö–ê –ü–û –£–ß–ï–ù–ò–ö–ê–ú: {students_debts}")
            
            for student_name, lessons in students_debts.items():
                student_total = sum(lesson['price'] for lesson in lessons)
                response_text += f"üë§ <b>{student_name}:</b>\n"
                response_text += f"   –ù–µ–æ–ø–ª–∞—á–µ–Ω–æ –∑–∞–Ω—è—Ç–∏–π: {len(lessons)}\n"
                response_text += f"   –°—É–º–º–∞: {student_total} —Ä—É–±.\n"
                
                # # –î–æ–±–∞–≤–ª—è–µ–º parent_performance –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —É—á–µ–Ω–∏–∫–∞
                # parent_performance = lessons[0].get('parent_performance')
                
                response_text += "\n"
            
            response_text += f"üíµ <b>–û–±—â–∞—è –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—å:</b> {total_debt} —Ä—É–±.\n\n"
            response_text += "üí≥ –î–ª—è –æ–ø–ª–∞—Ç—ã —Å–≤—è–∂–∏—Ç–µ—Å—å —Å —Ä–µ–ø–µ—Ç–∏—Ç–æ—Ä–æ–º."
            
        else:
            response_text = "‚úÖ <b>–í—Å–µ –∑–∞–Ω—è—Ç–∏—è –æ–ø–ª–∞—á–µ–Ω—ã!</b>\n\n–£ –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π –Ω–µ—Ç –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–µ–π."
        
        # –î–æ–±–∞–≤–∏–º –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        
        await callback_query.message.edit_text(
            response_text,
            parse_mode="HTML",
            reply_markup=get_back_to_parent_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_parent_debts: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç—è—Ö")
    
    await callback_query.answer()


@parent_router.callback_query(F.data == "parent_homeworks")
async def handle_parent_homeworks(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–º–∞—à–Ω–∏–µ —Ä–∞–±–æ—Ç—ã'"""
    logger.info(f"üö® –§–£–ù–ö–¶–ò–Ø handle_parent_homeworks –í–´–ó–í–ê–ù–ê –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {callback_query.from_user.id}")
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Ä–æ–¥–∏—Ç–µ–ª—è
        homeworks = db.get_parent_homeworks(callback_query.from_user.id)
        
        # –û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø
        logger.info(f"üîç –î–ê–ù–ù–´–ï –û–¢ –ë–ê–ó–´ (homeworks): {homeworks}")
        
        if homeworks:
            response_text = "üìö <b>–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –≤–∞—à–∏—Ö –¥–µ—Ç–µ–π:</b>\n\n"
            
            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —É—á–µ–Ω–∏–∫–∞–º
            students_homeworks = {}
            for hw in homeworks:
                student_name = hw.get('student_name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —É—á–µ–Ω–∏–∫')
                if student_name not in students_homeworks:
                    students_homeworks[student_name] = []
                students_homeworks[student_name].append(hw)
            
            for student_name, homeworks_list in students_homeworks.items():
                response_text += f"üë§ <b>{student_name}:</b>\n"
                
                for hw in homeworks_list:
                    lesson_date = datetime.strptime(hw['lesson_date'], '%Y-%m-%d %H:%M:%S').strftime('%d.%m.%Y')
                    response_text += f"   ‚Ä¢ {lesson_date}"
                    if hw.get('tutor_name'):
                        response_text += f" - {hw['tutor_name']}"
                    
                    # –î–û–ë–ê–í–õ–Ø–ï–ú –û–ü–ò–°–ê–ù–ò–ï –î–û–ú–ê–®–ù–ï–ì–û –ó–ê–î–ê–ù–ò–Ø
                    if hw.get('homework_description'):
                        response_text += f"\n     üìù <i>–ó–∞–¥–∞–Ω–∏–µ: {hw['homework_description']}</i>"
                    
                    # –î–û–ë–ê–í–õ–Ø–ï–ú –ö–û–ú–ú–ï–ù–¢–ê–†–ò–ô –î–õ–Ø –†–û–î–ò–¢–ï–õ–Ø
                    parent_performance = hw.get('parent_performance')
                    if parent_performance:
                        response_text += f"\n     üí¨ <i>–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {parent_performance}</i>"
                    
                    response_text += "\n"
                
                response_text += "\n"
            
            response_text += "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–º–æ–≥–∏—Ç–µ –¥–µ—Ç—è–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è."
        else:
            response_text = "üìö <b>–î–æ–º–∞—à–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>\n\n–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–æ–º–∞—à–Ω–∏—Ö –∑–∞–¥–∞–Ω–∏–π."
        
        await callback_query.message.edit_text(
            response_text,
            parse_mode="HTML",
            reply_markup=get_back_to_parent_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_parent_homeworks: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –¥–æ–º–∞—à–Ω–∏—Ö —Ä–∞–±–æ—Ç–∞—Ö")
    
    await callback_query.answer()



@parent_router.callback_query(F.data == "back_to_parent_menu")
async def handle_back_to_parent_menu(callback_query: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é' - –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤ –Ω–∞—á–∞–ª—å–Ω–æ–µ –º–µ–Ω—é –∏–∑ welcome.py"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—è
        main_parent = db.get_main_parent_by_telegram_id(callback_query.from_user.id)
        
        if main_parent:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ welcome.py –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ –º–µ–Ω—é
            await show_parent_welcome(callback_query.message, main_parent)
        else:
            await callback_query.message.edit_text(
                "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ —Ä–æ–¥–∏—Ç–µ–ª—è",
                parse_mode="HTML"
            )
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ handle_back_to_parent_menu: {e}")
        await callback_query.message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—Ç–µ –≤ –º–µ–Ω—é")
    
    await callback_query.answer()
