# feedback_handlers.py
from aiogram import types, F, Router
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.exceptions import TelegramBadRequest
import os
from database import db


# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
from handlers.start.welcome import show_main_menu


router = Router()

class FeedbackStates(StatesGroup):
    waiting_for_feedback = State()

def get_cancel_inline_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="‚ùå –û—Ç–º–µ–Ω–∞",
        callback_data="cancel_feedback"
    ))
    return builder.as_markup()

@router.callback_query(F.data == "contact_developers")
async def contact_developers_handler(callback_query: types.CallbackQuery, state: FSMContext):
    await callback_query.message.answer(
        "üìû **–°–≤—è–∑—å —Å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏**\n\n"
        "–û—Å—Ç–∞–≤—å—Ç–µ –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ, –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —É—á—Ç–µ—Ç –µ–≥–æ –ø—Ä–∏ –¥–∞–ª—å–Ω–µ–π—à–µ–π —Ä–∞–±–æ—Ç–µ.\n\n"
        "–ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ - –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:",
        parse_mode='Markdown',
        reply_markup=get_cancel_inline_keyboard()
    )
    await state.set_state(FeedbackStates.waiting_for_feedback)
    await callback_query.answer()

@router.callback_query(F.data == "cancel_feedback", FeedbackStates.waiting_for_feedback)
async def cancel_feedback_callback(callback_query: types.CallbackQuery, state: FSMContext):
    await state.clear()
    await callback_query.answer()
    
     # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–∫–∞–∑–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    await show_main_menu(
        chat_id=callback_query.from_user.id,
        callback_query=callback_query
    )

@router.message(FeedbackStates.waiting_for_feedback)
async def process_feedback_message(message: types.Message, state: FSMContext, bot):
    user_id = message.from_user.id
    user_name = message.from_user.full_name
    feedback_text = message.text
    
    try:
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞—â–µ–Ω–∏–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                """INSERT INTO feedback_messages 
                   (user_id, user_name, message) 
                   VALUES (?, ?, ?)""",
                (user_id, user_name, feedback_text)
            )
            conn.commit()
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        phone = None
        with db.get_connection() as conn:
            cursor = conn.cursor()
            cursor.execute(
                "SELECT phone FROM tutors WHERE telegram_id = ?",
                (user_id,)
            )
            result = cursor.fetchone()
            if result:
                phone = result[0]
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å—É–ø–µ—Ä-–∞–¥–º–∏–Ω—É
        super_admin_id = int(os.getenv('SUPER_ADMIN_ID'))
        
        admin_message = (
            f"üì® **–ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è**\n\n"
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user_name} (ID: {user_id})\n"
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å
        if phone:
            admin_message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n\n"
        else:
            admin_message += f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: –Ω–µ —É–∫–∞–∑–∞–Ω\n\n"
        
        admin_message += (
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ:\n{feedback_text}\n\n"
            f"üïí –í—Ä–µ–º—è: {message.date.strftime('%d.%m.%Y %H:%M')}"
        )
        
        await bot.send_message(
            chat_id=super_admin_id,
            text=admin_message,
            parse_mode='Markdown'
        )
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await message.answer(
            "‚úÖ **–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!**\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ú—ã —Ä–∞—Å—Å–º–æ—Ç—Ä–∏–º –µ–≥–æ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
            "–ï—Å–ª–∏ —É –≤–∞—Å —Å—Ä–æ—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å - –º—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.",
            parse_mode='Markdown'
        )
        
        # –ó–ê–ú–ï–ù–ê: –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await show_main_menu(
            chat_id=message.from_user.id,
            message=message
        )
        
    except Exception as e:
        await message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –æ–±—Ä–∞—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
        print(f"Error saving feedback: {e}")
    
    await state.clear()


@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞", FeedbackStates.waiting_for_feedback)
async def cancel_feedback_text(message: types.Message, state: FSMContext):
    await state.clear()
    
@router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∞", FeedbackStates.waiting_for_feedback)
async def cancel_feedback_text(message: types.Message, state: FSMContext):
    await state.clear()
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    await show_main_menu(
        chat_id=message.from_user.id,
        message=message
    )
