from aiogram import Router, F
from aiogram.types import CallbackQuery
from database import db

from handlers.groups.keyboards import *

router = Router()

# –≠–∫—Ä–∞–Ω 4 - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≥—Ä—É–ø–ø–∞–º–∏ (—Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø)
@router.callback_query(F.data == "manage_groups")
async def manage_groups(callback_query: CallbackQuery):
    """–°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è"""
    await callback_query.answer()
    
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    groups = db.get_groups_by_tutor(tutor_id)
    
    if not groups:
        await callback_query.message.edit_text(
            "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –≥—Ä—É–ø–ø\n–°–æ–∑–¥–∞–π—Ç–µ –ø–µ—Ä–≤—É—é –≥—Ä—É–ø–ø—É.",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É", callback_data="add_group")],
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data="back_to_groups_menu")]
            ])
        )
        return
    
    await callback_query.message.edit_text(
        "üë®‚Äçüë©‚Äçüëß‚Äçüë¶ <b>–í–∞—à–∏ –≥—Ä—É–ø–ø—ã:</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É:",
        reply_markup=get_groups_list_keyboard(groups),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø—ã
@router.callback_query(F.data.startswith("group_"))
async def group_management(callback_query: CallbackQuery):
    """–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –≥—Ä—É–ø–ø–æ–π"""
    await callback_query.answer()
    
    group_id = int(callback_query.data.split("_")[1])
    group = db.get_group_by_id(group_id)
    
    if not group:
        await callback_query.message.edit_text("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    students = db.get_students_in_group(group_id)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤
    active_students = [s for s in students if s.get('status') != 'inactive']
    active_count = len(active_students)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –í–°–ï–• –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤
    if active_count > 0:
        students_list = "\n".join([f"‚Ä¢ {s['full_name']}" for s in active_students])
    else:
        students_list = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤"
    
    await callback_query.message.edit_text(
        f"üë• <b>–ì—Ä—É–ø–ø–∞: {group['name']}</b>\n\n"
        f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤: {active_count}\n\n"
        f"–£—á–µ–Ω–∏–∫–∏:\n{students_list}",
        reply_markup=get_group_management_keyboard(group_id),
        parse_mode="HTML"
    )