from aiogram import Router, F
from aiogram.types import CallbackQuery
from database import db
from handlers.groups.keyboards import *

router = Router()

# –≠–∫—Ä–∞–Ω 5 - –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É
@router.callback_query(F.data.startswith("add_to_group_"))
async def add_students_to_group(callback_query: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤ –≤ –≥—Ä—É–ø–ø—É"""
    await callback_query.answer()
    
    group_id = int(callback_query.data.split("_")[3])
    tutor_id = db.get_tutor_id_by_telegram_id(callback_query.from_user.id)
    students = db.get_available_students_for_group(tutor_id, group_id)
    
    if not students:
        await callback_query.message.edit_text(
            "‚ÑπÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"group_{group_id}")]
            ])
        )
        return
    
    await callback_query.message.edit_text(
        "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:</b>",
        reply_markup=get_students_list_keyboard(students, "add_student", group_id),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("add_student_"))
async def add_specific_student(callback_query: CallbackQuery):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –≤ –≥—Ä—É–ø–ø—É"""
    await callback_query.answer()
    
    parts = callback_query.data.split("_")
    student_id = int(parts[2])
    group_id = int(parts[4])
    
    success = db.add_student_to_group(student_id, group_id)
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    group = db.get_group_by_id(group_id)
    
    if not group:
        await callback_query.message.edit_text("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
    students = db.get_students_in_group(group_id)
    student_count = len(students)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º full_name –∫–∞–∫ –≤ –≤–∞—à–µ–º –ø—Ä–∏–º–µ—Ä–µ)
    active_students = []
    for s in students:
        status = str(s.get('status', '')).lower().strip()
        if status != 'inactive':
            active_students.append(s)

    students_list = "üë• <b>–£—á–µ–Ω–∏–∫–∏:</b>\n"
    if active_students:
        students_list += "\n".join([f"‚Ä¢ {s['full_name']}" for s in active_students])
    else:
        students_list += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤"
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –º–µ–Ω—é –≥—Ä—É–ø–ø—ã
    await callback_query.message.edit_text(
        f"üë• <b>–ì—Ä—É–ø–ø–∞: {group['name']}</b>\n\n"
        f"–£—á–µ–Ω–∏–∫–æ–≤: {student_count}\n\n"
        f"–£—á–µ–Ω–∏–∫–∏:\n{students_list if students_list else '–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤'}",
        reply_markup=get_group_management_keyboard(group_id),
        parse_mode="HTML"
    )

# –≠–∫—Ä–∞–Ω 6 - –£–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã
@router.callback_query(F.data.startswith("remove_from_group_"))
async def remove_students_from_group(callback_query: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ —É—á–µ–Ω–∏–∫–æ–≤ –∏–∑ –≥—Ä—É–ø–ø—ã"""
    await callback_query.answer()
    
    group_id = int(callback_query.data.split("_")[3])
    students = db.get_students_in_group(group_id)
    
    if not students:
        await callback_query.message.edit_text(
            "‚ÑπÔ∏è –í –≥—Ä—É–ø–ø–µ –Ω–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥", callback_data=f"group_{group_id}")]
            ])
        )
        return
    
    await callback_query.message.edit_text(
        "üë• <b>–í—ã–±–µ—Ä–∏—Ç–µ —É—á–µ–Ω–∏–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:</b>",
        reply_markup=get_students_list_keyboard(students, "remove_student", group_id),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞–ª–µ–Ω–∏—è —É—á–µ–Ω–∏–∫–∞
@router.callback_query(F.data.startswith("remove_student_"))
async def remove_specific_student(callback_query: CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —É—á–µ–Ω–∏–∫–∞ –∏–∑ –≥—Ä—É–ø–ø—ã"""
    await callback_query.answer()
    
    parts = callback_query.data.split("_")
    student_id = int(parts[2])
    group_id = int(parts[4])
    
    success = db.remove_student_from_group(student_id, group_id)
    
    if not success:
        await callback_query.message.edit_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—á–µ–Ω–∏–∫–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    group = db.get_group_by_id(group_id)
    
    if not group:
        await callback_query.message.edit_text("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤
    students = db.get_students_in_group(group_id)
    student_count = len(students)
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —É—á–µ–Ω–∏–∫–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º full_name)
    active_students = []
    for s in students:
        status = str(s.get('status', '')).lower().strip()
        if status != 'inactive':
            active_students.append(s)

    students_list = "üë• <b>–£—á–µ–Ω–∏–∫–∏:</b>\n"
    if active_students:
        students_list += "\n".join([f"‚Ä¢ {s['full_name']}" for s in active_students])
    else:
        students_list += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —É—á–µ–Ω–∏–∫–æ–≤"
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥—Ä—É–ø–ø–µ
    await callback_query.message.edit_text(
        f"‚úÖ –£—á–µ–Ω–∏–∫ —É–¥–∞–ª–µ–Ω!\n\n"
        f"üë• <b>–ì—Ä—É–ø–ø–∞: {group['name']}</b>\n\n"
        f"–£—á–µ–Ω–∏–∫–æ–≤: {student_count}\n\n"
        f"–£—á–µ–Ω–∏–∫–∏:\n{students_list if students_list else '–ù–µ—Ç —É—á–µ–Ω–∏–∫–æ–≤'}",
        reply_markup=get_group_management_keyboard(group_id),
        parse_mode="HTML"
    )